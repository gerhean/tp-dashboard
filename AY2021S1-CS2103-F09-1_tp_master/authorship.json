[
  {
    "path": ".github/ISSUE_TEMPLATE/bug_report.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "name: Bug report"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "about: Create a report to help us improve"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "title: \u0027\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "labels: \u0027\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "assignees: \u0027\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Describe the bug**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "A clear and concise description of what the bug is."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**To Reproduce**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Steps to reproduce the behavior:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "1. Go to \u0027...\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "2. Click on \u0027....\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "3. Scroll down to \u0027....\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "4. See error"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Expected behavior**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "A clear and concise description of what you expected to happen."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Screenshots**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "If applicable, add screenshots to help explain your problem."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Desktop (please complete the following information):**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " - OS: [e.g. iOS]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " - Browser [e.g. chrome, safari]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " - Version [e.g. 22]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Smartphone (please complete the following information):**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " - Device: [e.g. iPhone6]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " - OS: [e.g. iOS8.1]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " - Browser [e.g. stock browser, safari]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " - Version [e.g. 22]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Additional context**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Add any other context about the problem here."
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 38
    }
  },
  {
    "path": ".github/ISSUE_TEMPLATE/feature_request.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "name: Feature request"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "about: Suggest an idea for this project"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "title: \u0027\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "labels: \u0027\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "assignees: \u0027\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Is your feature request related to a problem? Please describe.**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "A clear and concise description of what the problem is. Ex. I\u0027m always frustrated when [...]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Describe the solution you\u0027d like**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "A clear and concise description of what you want to happen."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Describe alternatives you\u0027ve considered**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "A clear and concise description of any alternative solutions or features you\u0027ve considered."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Additional context**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Add any other context or screenshots about the feature request here."
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 20
    }
  },
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F09-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-F09-1/tp/branch/master/graph/badge.svg?token\u003dRf0uRl9HK0)](codecov)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "TAskmaster is a desktop app for managing students, optimised for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you are a CS Teaching Assistant who can type fast, TAskmaster can help you track your students\u0027 attendance and class participation faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* If you are interested in using TAskmaster, head over to the [**User Guide**](docs/UserGuide.md)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* If you are interested about developing TAskmaster, the [**Developer Guide**](docs/DeveloperGuide.md) is a good place to start."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "sc-arecrow": 2,
      "josuaaah": 4,
      "jflim98": 4,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "mainClassName \u003d \u0027seedu.taskmaster.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    archiveName \u003d \u0027taskmaster.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "sc-arecrow": 1,
      "jayarengam": 2,
      "-": 72
    }
  },
  {
    "path": "data/storage_test_taskmaster.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "  \"students\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"name\" : \"Moiraine Damodred\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"telegram\" : \"87438807\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"email\" : \"aessedai@tarvalonmail.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"nusnetId\" : \"e0000000\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"name\" : \"Matrim Cauthon\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"telegram\" : \"99272758\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"email\" : \"matrim@tworivers.com\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"nusnetId\" : \"e0000001\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"tagged\" : [ \"colleagues\", \"friends\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"name\" : \"Perrin Aybara\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"telegram\" : \"93210283\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"email\" : \"perrin@tworivers.com\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"nusnetId\" : \"e0000002\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"tagged\" : [ \"neighbours\" ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "josuaaah": 18
    }
  },
  {
    "path": "data/test_sample_load_file.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "  \"attendances\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"nusnetId\" : \"e0000000\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"attendanceType\" : \"PRESENT\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"nusnetId\" : \"e0000001\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"attendanceType\" : \"ABSENT\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"nusnetId\" : \"e0000002\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 12
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "This project is part of the NUS module CS2103 Software Engineering."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Our lecturer is Professor Damith Chatura Rajapakse."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "You can reach him at the email `damithch@comp.nus.edu.sg`."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Damith Chatura Rajapakse"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "\u003cimg src\u003d\"images/damithc.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[github](https://github.com/damithc)]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Project Advisor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Jaya Rengam"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "\u003cimg src\u003d\"images/jayarengam.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[github](http://github.com/jayarengam)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[portfolio](team/jayarengam.md)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Goh Siau Chiak"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "\u003cimg src\u003d\"images/sc-arecrow.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[github](http://github.com/sc-arecrow)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[portfolio](team/sc-arecrow.md)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Lim Jin Feng"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "\u003cimg src\u003d\"images/jflim98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[github](http://github.com/jflim98)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[portfolio](team/jflim98.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Joshua Chew Jian Xiang"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "\u003cimg src\u003d\"images/josuaaah.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[github](http://github.com/josuaaah)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[portfolio](team/josuaaah.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Theodore Leebrant"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "\u003cimg src\u003d\"images/theodoreleebrant.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[github](http://github.com/theodoreleebrant)]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[[portfolio](team/theodoreleebrant.md)]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Responsibilities: Integration"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 36,
      "-": 35
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103-F09-1/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-F09-1/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-F09-1/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-F09-1/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103-F09-1/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103-F09-1/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103-F09-1/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "1. `Logic` uses the `TaskmasterParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a student)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103-F09-1/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* stores the student list data as a `Taskmaster` object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cStudent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* also exposes an unmodifiable `ObservableList\u003cSession\u003e` that is similarly used by the UI."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Student` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Student` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-F09-1/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* can save the student list data in json format and read it back."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* can save the SessionList data in json format and read it back."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Classes used by multiple components are in the `seedu.taskmaster.commons` package."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "## **Additional Features Implemented**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### SessionList"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Author: **Joshua Chew**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Implement the class `SessionList` that encapsulate a list of tutorial sessions."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Implement the class `Session` that represents a tutorial session conducted by a teaching assistant."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Implement the commands in which a session is created and deleted."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Implement the command to select the current session."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "![Structure of the SessionList Component](images/SessionListClassDiagram.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "The `SessionList`,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* is stored by the Taskmaster."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* encapsulates a list of zero, one or more Session objects."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* can provide a list of the names of all Session objects that it contains (to pass to the UI)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "The `Session`,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* stores a SessionName."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* stores a StudentRecordList."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* can mark the attendance of a particular student in the StudentRecordList."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* can mark the attendance of all students in the StudentRecordList with a single Command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "The current running Session, `currentSession`, is also stored as an attribute in the Taskmaster."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Session` component when `Taskmaster#markStudentWithNusnetId(nusnetId, attendanceType)` is called."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![Interactions iside the Session class for the `markStudentAttendance\u0027` method call](images/MarkStudentAttendanceSequenceDiagram.png)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "The following considerations were taken into account in the process of implementing a `Session`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* The ability to name a session is meant to contribute to the ease of use of TAskmaster for a Teaching Assistant."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "This gives the Teaching Assistant the freedom to either name sessions as index numbers, or as the topic that was covered during the session."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "With modules typically having up to 24 sessions per semester, this would help the Teaching Assistant navigate and search through a large number of sessions."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Sessions are selected by name and deleted by name, to simplify the Teaching Assistant\u0027s process of managing multiple sessions. As a result,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "a Teaching Assistant is not allowed to name two sessions with the same name. The class `SessionList` hence supports operations to check if a "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "session with a specified name already exist inside the session list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "**Design Alternatives**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Make `Session` store an `AttendanceList` and a `ClassParticipationList`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    Initially, the attendance and class participation data was meant to be stored as seperate data structures. However, this"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    approach was abandoned in favour of allowing the `Session` class store the interface `StudentRecordList` instead. This would"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    support the Open-Closed Principle. It would allow greater ease of future extensions in the functionality of TAskmaster. For"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    example, if we wished to allow a session store data on student submissions, the original approach would necessitate the modification"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    of the code for `Session` to store another data structure which encapsulate the student submission data. On the other hand,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    storing a `StudentRecordList` can allow `Session` store such additional data without modifying its code at all, as all student-related"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    data is encapsulated in a `StudentRecord`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "**Future Expansion**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Beyond v1.4, additional features can be implemented for **Session**:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Allow `Session` to contain a `SessionRemark`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    We have considered that Teaching Assistants might feel the need to write down a short memo about every Session. Such memos"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    may consist of little reminders to collect assignments from students, or to note down what was not covered during the session due"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    to time constraints. Hence, it would be beneficial to give Teaching Assistants the option of adding remarks for every Session."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Allow users to edit the name, date and time of a `Session`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    Currently, users are given the option to delete a `Session` if he has made a typo when keying in inputs for "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    the `SessionName` or `SessionDateTime`. In the future, it would be good to implement an `EditSessionCommand`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    to allow users to change the name, date and time of a session while still keeping the session\u0027s student record data on TAskmaster."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "### StudentRecordList"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Author: **Goh Siau Chiak**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* Implementing the classes that encapsulate a list of student records."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![Structure of StudentRecordList Component](images/StudentRecordDiagram.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "The `StudentRecordList`,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* is stored by a `Session`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* encapsulates a list of zero or more `StudentRecord` objects."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* can provide a list of the `StudentRecord` objects that it contains (to pass to the UI)."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* can mark the attendance of a student in the `Session`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "The `StudentRecord`,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* represents an immutable record of a student\u0027s attendance in a particular `Session`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* contains"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  * a `NusnetId` that indicates which student the record represents"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  * the `Name` of the student represented"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  * the `AttendanceType` of the student for the `Session`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  * a `ClassParticipation` representing the score awarded to the student for participating in the `Session`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "When the user wants to update the attendance or class participation score, a new `StudentRecord` object will be created. "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `StudentRecordListManager` component when `StudentRecordListManager#markStudentAttendance(nusnetId, attendanceType)` is called."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![Interactions inside the StudentRecordListManager class for the `markStudentAttendance\u0027` method call](images/StudentRecordListAttendanceSequenceDiagram.png)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Considerations for `markStudentAttendance`:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "On one hand, the mark command uses an index to identify the record, for ease of usage for the user, as compared to "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "having to type out the record\u0027s NUSNET ID. On the other hand, the mark attendance method within the `Model` identifies "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "the record to mark using its NUSNET ID, to ensure correctness. Furthermore, the student records have to be stored in a "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "JavaFX `ObservableList` to be easily displayable on the GUI. In the end, I decided to find the record to mark by "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "iterating through the record list and comparing NUSNET IDs, since each student\u0027s NUSNET ID must be unique. The `O(N)`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "time complexity of this method does not incur significant time cost because we expect there to be no more than 1000"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "students recorded in any session created by TAs using TAskmaster."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Design alternatives:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Make `StudentRecord` mutable."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    This was the original design of `StudentRecord` which made sense at the time because a student\u0027s record"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    would be frequently updated for marking of attendnace and awarding of class participation scores. However,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    the JavaFX `ObservableList` interface is **not notified when contained objects are modified**, only when "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    objects were added or deleted. This resulted in a bug where the GUI will not show the changes made when a"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    student record was updated. In the end, it was decided that `StudentRecord` should be immutable to fix this bug."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Make each `StudentRecordList` be dependent on and backed by the `StudentList` maintained by TAskmaster."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    This alternative was eventually rejected because it did not make sense from a design perspective. Each"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    student record list represents the record of students **for that particular session only**. If we "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    implemented this alternative, edits to the student list will result in changes to all the student record"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    lists, which does not follow the design of the student record list. For example:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - suppose a TA is currently teaching three students, `A, B, C`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - when the TA creates a new session `S1` , it will contain three corresponding student records"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - subsequently after the session is over, student `A` informs the TA that he is going to drop the module"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - when the TA deletes student `A` from the student list, the student record list of `S1` will update and"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    no longer reflect that `A` was enrolled in the module when `S1` occurred"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Have `StudentRecord` contain the whole `Student` object, not just its `Name` and `NusnetId`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    This was considered and ultimately rejected because of the design considerations in the previous "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    alternative. Each student record, once created, is supposed to be independent of the student in the"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    student list. This implies that subsequent changes to the student should not be known by the student"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    record. Moreover, each student record only needs to know the name and NUSNET ID of the student at the moment "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    it was created and there is no need for it to know the rest of the student\u0027s information. "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Furthermore, having"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    each student record contain a student object will incur significant memory usage, especially since for most"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    TAs, the same set of students will be enrolled in multiple sessions, each with a student record list. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Following the **Law of Demeter**, it was decided to restrict the student record to only have the name and NUSNET ID."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Since editing of `NusnetId` is not allowed, there will be no issues with syncing of data. For example, even if the"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    name of a particular student is edited after his `StudentRecord` was saved, we can find that student using their"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    `NusnetId`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "### Storage"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Author: **Jaya Rengam**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* Change/Add classes in the Storage package to store data related to Sessions."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "![Structure of the Storage Component](images/NewStorageClassDiagram.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "A new method `JsonTaskmasterStorage#saveSessionList` will store the SessionList in the running Taskmaster to a separate .json file."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* The SessionList will be represented by a `JsonSerializableSessionList`, which contains a `List\u003cJsonSerializableSession\u003e`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* Each `JsonSerializableSession` will contain a `List\u003cJsonAdaptedStudentRecord\u003e`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**To-Do:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* Update `TaskmasterStorage` interface (add `saveSessionList(ReadOnlyTaskmaster taskmaster)` method)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* Implement `saveSessionList` method in `JsonTaskmasterStorage`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* Create the new `JsonSerializable..`/`JsonAdapted..` classes"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**_Notes from developer:_**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* This implementation of the feature uses Jackson libraries/formatting that is used in existing AB3 Storage classes"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Alternative implementations:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* Store the SessionList as a JSON field in the existing Taskmaster file"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * Doing it this way would mean that the file would be repeatedly overwritten and any format errors will invalidate the whole file, including the StudentList."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "### ClassParticipation"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Author: **Theodore Leebrant**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Implement the class in charge of representing the class participation of each student in a session."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Implement the commands in which class participation would be scored."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "The `ClassParticipation` is made such that it:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Stores a `score`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * of the `double` type."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * between 0 and 10 inclusive."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * with detail up to 2 decimal places."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Supports equality whenever scores are the same"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Has a method to return the `String` representation of itself."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Will be used by `StudentRecord`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "To support the `ClassParticipation` class, Taskmaster needs to be able to set a student\u0027s score in a session.  "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "In setting the student\u0027s score, TAskmaster needs to comply with the following specifications:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Supports checking of session (i.e. throws an error in case of no sessions made, or no sessions selected)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Able to identify the NUSNET ID from the index of student in the session."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Has input validation for the score (between 0 and 10 inclusive)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Able to truncate score to 2 decimal places (to follow with the `ClassParticipation` class)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* (Extra goal) Able to score all students who are present."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Based on the specification above, the following is the activity diagram when someone were to score a student\u0027s participation score:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "![Activity Diagram for Class Participation](images/ClassPartActivity.png)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Design Considerations**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "The specifications above has undergone several revisions, with the following considerations taken into account:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Session checking needs to be done, as the scoring depends on the session the user is currently on."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Support of scoring from the index is for ease of use for the user. "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Internally, it uses NUSNET ID to see which student needs to be scored as the NUSNET ID is unique for each student."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Therefore, there needs to be some lookup needed to bridge between these two."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Input validation is needed to ensure that the score inputed is valid."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* The choice of 0-10 `double` score is to support the granularity of score detail "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "(most TA would use at most 1 decimal place, therefore we added support for 2 decimal places for meticulous TAs), while"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "still maintaining good display for the sake of UX. Negative scores are not supported as negative score"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "does not make sense in this case."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Marking all students will be a feature that supports the user experience of TAs using TAskmaster. Oftentimes there"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "is a baseline on what TAs consider basic participation marks - and many students barring the exceptional ones will get"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "similar, if not the same sccore. The `mark all` command comes from our observation of this fact."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Design Alternatives**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Make `ClassParticipation` a field in `StudentRecord`.  "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "This was the initial plan for `StudentRecord`. However, there are advantages to having ClassParticipation as its own class."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "This would support data abstraction as we abstract away lower level data items. The implementer of `StudentRecord` does "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "not need to know the internal details of the implementation of `ClassParticipation`, whether is it an enum (of, let\u0027s say"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "`GREAT, GOOD, AVERAGE, BAD`) or a `double` score as we have chosen to implement. Having a `ClassParticipation` class would"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "also support future expansion in the scoring of class participation without going through the internal details of `StudentRecord`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Make `ClassParticipation` an enum or use `int` values for the score.  "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "This was initially considered but ultimately scrapped to increase the flexibility, as well as attention to detail. "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Having an enum as the scoring system would work, but in effect, it would reduce the detail of score given to a student."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "This may cause some TAs to not be satisfied with the scoring system. While having integer is a better solution, we"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "decided on using `double` due to the fact that 0-10 is easily scalable (e.g. to get percentage, the TA can just glance"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "at the score) and provides more detail. An alternative that may also be considered for future iteration is to use"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "`float` instead of `double` as we do not necessarily need double-precision decimal representation with only two decimal"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "places."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Future expansion**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Beyond 1.4, there are several improvements that can be done:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Set a maximum score for the session.  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "This would include one extra command to change the maximum value of the score. In this case, we need to implement"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "a field in `ClassParticipation` for the maximum score, and see from this value for input validation. A problem that we"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "forsee in implementing this is the default choice of maximum score, validation of current score (what happens if"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "there is a student with score 5.5 but we set the maximum score to 5), as well as possible coupling due to the command"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "needing to see the maximum value of the class participation score."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Have alternatives for scoring class participation.  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "We have thought about the possiblity that the TA does not need the granularity of a `double` value to 2 decimal places."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "In the future, it would be good to support a command that changes the type of the score, e.g. to discrete values given"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "by enum. Some considerations would be about existing scores, implementation of classes beyond `ClassParticipation`,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "as well as command handling."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jflim98"
        },
        "content": "### UI"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jflim98"
        },
        "content": "Author: **Lim Jin Feng**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jflim98"
        },
        "content": "* Change/Add classes in the UI package to display newly implemented functionality such as ClassRecords."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jflim98"
        },
        "content": "![Structure of the UI Component](images/UpdatedUiClassDiagram.png)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jflim98"
        },
        "content": "A new method `MainWindow#fillInnerParts2` will change the contents of the Ui to the student record, from the student list."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jflim98"
        },
        "content": "* This is implemented in such a way to accomodate future expansion."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jflim98"
        },
        "content": "**To-Do:**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jflim98"
        },
        "content": "* Support displaying of Sessions when Sessions are implemented."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jflim98"
        },
        "content": "* Support displaying of any new future implementation."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jflim98"
        },
        "content": "**_Notes from developer:_**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jflim98"
        },
        "content": "* Implementation still buggy: Ui does not update accordingly for student records."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jflim98"
        },
        "content": "Alternative implementations considered:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* Use FXML\u0027s tab feature to display class records:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Does not support future expansion when sessions is implemented - there may be an indefinite amount of sessions created."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* is an Undergraduate CS Teaching Assistant"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* has a need to manage their students:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    * attendance"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    * participation"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* manage students faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* view student details at a glance"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* add and remove students easily"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* create student records for each individual class conducted"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* mark and view attendance and class participation in these classes quickly"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Priorities: "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- High (must have) - `* * *`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- Medium (nice to have) - `* *`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                             |"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| -------- | ------------------------------------------ | --------------------------------- | -------------------------------------------------------------- |"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "| `* * *`  | user                                       | add a new student                 |                                                                |"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "| `* * *`  | user                                       | view details of a student         | have quick access to them                                      |"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "| `* * *`  | user                                       | view details of all my students   | have quick access to them                                      |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| `* * *`  | user                                       | mark a student\u0027s attendance       |                                                                |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| `* *`    | user                                       | mark all students\u0027 attendance     | update all attendance records quickly and focus on teaching    |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| `* * *`  | user                                       | score a student\u0027s participation   |                                                                |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| `* *`    | user                                       | score all students; participation | update all participation records quickly and focus on teaching |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "| `* * *`  | user                                       | delete a student                  |                                                                |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| `* * *`  | user                                       | add a new session                 |                                                                |"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| `* * *`  | user                                       | view details of a session         | have quick access to it                                        |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| `* * *`  | user                                       | delete a session                  |                                                                |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "(For all use cases below, the **System** is `Taskmaster` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "**Use case: Add a student**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "1.  User requests to add a new student"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "2.  System shows the added student"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    * 1a1. System shows an error message."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "**Use case: View a student\u0027s details**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "1.  User requests to view a student\u0027s details"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "2.  System shows the student\u0027s details"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    * 1a1. System shows an error message."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Use Case: View all students\u0027 details**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "1. User requests to view all students\u0027 details"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2. System shows all students\u0027 details."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Use Case: Delete a student**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "1. User requests to list students"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2. System shows a list of students"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "3. User requests to delete a specific student in the list"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "4. System deletes student"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 2a. The list is empty. \u003cbr\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 3a. The given input is invalid."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 3a1. System shows an error message."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Use Case: Add a session**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "1. User requests to add a session"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2. System adds the session and shows the student records for that session with default fields"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1a1. System shows an error message."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1b. The name of the session given by the user is already in use."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1b1. System shows an error message."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Use Case: Change view to a session**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "1. User requests to view information (student records) of a session"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2. System displays student records of that session"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1a1. System shows an error message."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Use Case: Delete a session**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "1. User requests to delete a session"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2. System deletes the session"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1a1. System shows an error message."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Use Case: Mark a student\u0027s attendance**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "1. User requests to mark student attendance."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2. System marks the student\u0027s attendance within the context of that session."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1a. System is not within the context of a session."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1a1. System shows an error message."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1b. The given input is invalid."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1b1. System shows an error message."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "**Use Case: Mark all students\u0027 attendances**"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "1. User requests to mark all students\u0027 attendance."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2. System marks all student attendances within the context of that session."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1a. System is not within the context of a session."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1a1. System shows an error message."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1b. The given input is invalid."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1b1. System shows an error message."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Use Case: Score student\u0027s participation**"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "1. User requests to score participation."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2. System scores the student\u0027s participation within the context of that session."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1a. System is not within the context of a session."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1a1. System shows an error message."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1b. The given input is invalid."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1b1. System shows an error message."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Use Case: Score all students\u0027 participation**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "1. User requests to score all students\u0027 participation."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2. System scores all student participation within the context of that session."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1a. System is not within the context of a session."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1a1. System shows an error message."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    "
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* 1b. The given input is invalid."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * 1b1. System shows an error message."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "2.  Should work without requiring an installer, the installation of any additional software, or any external connections."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "3.  Should only be for a single user."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "4.  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "5.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "6.  Should store data locally _only_, in a human editable text file"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "7.  Total file size should not exceed 100MB."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, macOS"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others (e.g. NUSNET ID)"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample students. The window size may not be optimal."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Adding a student"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "1. Adding a student while all students are being shown"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Prerequisites: List all students using the `list-students` command. Multiple students in the list."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `add-student n/John Tan u/johntan98 e/johntan98@gmail.com i/e0012345 t/tardy`\u003cbr\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: A student named John Tan is added to the list. Details of the added student shown in the status message."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `add-student n/John Tan u/johntan98 e/johntan98@gmail.com i/e0012345 t/tardy`\u003cbr\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: No student is added because a student with the same details already exists in the list. Status message informs user that student already exists."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `add-student n/Gandalf`\u003cbr\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: No student is added. Error details shown in the status message."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Other incorrect add commands to try: `add-student`, `add-student Gandalf`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      "
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Finding a student"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "1. Finding a student whose name exists in the student list"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Prerequisites: List all students using the `list-students` command. Multiple students in the list."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `find-students john`\u003cbr\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: A list of students whose names match the keyword `john` will be shown."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `find-students`\u003cbr\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: No change to the student list view. Error details shown in the status message."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      "
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Editing a student"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "1. Editing a student while all students are being shown"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Prerequisites: List all students using the `list-students` command. Multiple students in the list."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `edit-student 1 u/johntan68 e/johntan68@gmail.com`\u003cbr\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: First student\u0027s Telegram handle will be changed to `johntan68`, and his email to `johntan68@gmail.com`."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `edit-student 0 u/johntan98 e/johntan98@gmail.com`\u003cbr\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: No student is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Other incorrect delete commands to try: `edit-student`, `edit-student x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "### Deleting a student"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "1. Deleting a student while all students are being shown"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Prerequisites: List all students using the `list-students` command. Multiple students in the list."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `delete-student 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: First student is deleted from the list. Details of the deleted student shown in the status message."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `delete-student 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: No student is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Other incorrect delete commands to try: `delete-student`, `delete-student x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Adding a session"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "1. Adding a new session "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `add-session s/First Session dt/23-10-2020 0900`\u003cbr\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: A session named First Session is added to the session list. Details of the added session shown in the status message."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `add-session s/First Session dt/24-10-2020 0900`\u003cbr\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: No session is added as a session with the same name is already found in the session list. Status message informs user that session already exists."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `add-session`\u003cbr\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: No session is added. Error details shown in the status message."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Other incorrect add commands to try: `add-session First Session`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Changing the current session view"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "1. Changing the current session view"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Prerequisites: Add a session to the session list by running the command `add-session s/First Session dt/23-10-2020 0900`."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `goto s/First Session`\u003cbr\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: The student records of the session named First Session will be displayed."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `goto s/Session that does not exist`\u003cbr\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: Current view does not change. Status message states that the session does not exist."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `goto`\u003cbr\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: Current view does not change. Error details shown in the status message."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Other incorrect add commands to try: `goto First Session`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "### Scoring a student"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "The below testcases assume that you are in a session and have 7 students inside it."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Scoring a student"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    1. Test case: `score 1 cp/5.3`  "
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    Expected: The student with index 1 in the session will be scored 5.3."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    2. Test case: `score 8 cp/3.23`  "
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    Expected: No student\u0027s score will be changed. An error shows that the student index provided is invalid."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    3. Test case: `score 1 cp/-1`  "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    Expected: No student\u0027s score will be changed. An error shows that the input is invalid as it is negative."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    4. Test case: `score 1 cp/11.4`  "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    Expected: No student\u0027s score will be changed. An error shows that the input is invalid as it greater than 10."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* Scoring multiple students"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    1. Test case: `score all cp/8.2`  "
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    Expected:  "
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        * All students who are present are scored 8.2."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        * All students who are not present have their scores unchanged."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    2. Test case: `score all cp/-0.52`  "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    Expected: No scores changed, an error shows that the input is invalid as it is negative."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    3. Test case: `score all cp/10.52`  "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    Expected: No scores changed, an error shows that the input is invalid as it is greater than 10."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Clearing contents of student and session list"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "1. Clearing contents of student and session list"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `clear`\u003cbr\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: The contents of the student and session list will be emptied."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      "
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Deleting a session"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "1. Deleting a session"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Prerequisites: Add a session to the session list by running the command `add-session s/First Session dt/23-10-2020 0900`."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `delete-session s/First Session`\u003cbr\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: First session is deleted from the list."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `delete-session s/Session that does not exist`\u003cbr\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: No session is deleted. Status message informs user that there are no sessions in the session list with that name."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Other incorrect delete commands to try: `delete-session`, `delete-session First Session`\u003cbr\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Exiting the program"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "1. Exiting the program"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "   1. Test case: `exit`\u003cbr\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "      Expected: The window of the program will close."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "## **Appendix: Effort**"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 101,
      "sc-arecrow": 111,
      "josuaaah": 185,
      "jflim98": 18,
      "jayarengam": 181,
      "-": 261
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "   1. Run the `seedu.taskmaster.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 54
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "TAskmaster is a **desktop app for managing students, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you are a CS Teaching Assistant who can type fast, TAskmaster can help you track your students\u0027 attendance and class participation faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "## Contents:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [Quick Start](#quick-start \"Go to Quick Start\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - [Installation](#installation \"Go to Installation\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - [Usage](#usage \"Go to Usage\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- [Walkthrough](#walkthrough \"Go to Walkthrough\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [Commands](#commands \"Go to Commands\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - [Adding a student: `add-student`](#adding-a-student-add-student \"Go to Adding a student\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - [Listing all students: `list-students`](#listing-all-students-list-students \"Go to Listing all students\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - [Finding students by name: `find-students`](#finding-students-by-name-find-students \"Go to Finding students by name\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - [Editing a student: `edit-student`](#editing-a-student-edit-student \"Go to Editing a student\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - [Deleting a student: `delete-student`](#deleting-a-student-delete-student \"Go to Deleting a student\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - [Adding a session: `add-session`](#adding-a-session-add-session \"Go to Adding a session\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - [Delete a session: `delete-session`](#delete-a-session-delete-session \"Go to Deleting a session\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    - [Changing the current session: `goto`](#changing-the-current-session-goto \"Go to Changing the current session\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    - [Marking a student\u0027s attendance: `mark`](#marking-a-students-attendance-mark \"Go to Marking a student\u0027s attendance\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    - [Marking all students\u0027 attendance: `mark all`](#marking-all-students-attendance-mark-all \"Go to Marking all students\u0027 attendance\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    - [Scoring students\u0027 participation: `score`](#scoring-students-participation-score \"Go to Scoring students\u0027 participation mark\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    - [View lowest-scoring students: `lowest-score`](#view-lowest-scoring-students-lowest-score \"Go to View lowest scoring students\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    - [Get a random student: `random-student`](#get-a-random-student-random-student \"Go to Get a Random Student\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    - [Clear all students: `clear`](#clearing-all-entries-clear \"Go to Clearing all entries\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    - [Exit the program: `exit`](#exiting-the-program-exit \"Go to Exiting the program\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [Command Summary](#command-summary \"Go to Command Summary\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [Storage](#storage \"Go to Storage\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [FAQ](#frequently-asked-questions-faq \"Go to Frequently Asked Questions (FAQ)\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "### Installation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "1. Ensure you have Java 11 or later installed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "2. Download the jar file from the project website."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "4. Start the app, by doing one of the following:  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    1. Double-click on the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    2. Open the terminal or command prompt, navigate to the folder in which the jar file is at, and run the command `java -jar taskmaster.jar` (assuming that the file is called `taskmaster.jar`). "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "5. A GUI should appear, with the field bar to input commands. The list of commands is available below."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "### Usage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "1. Add the students that you are currently teaching into TAskmaster using the `add-student` command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    * You can use the `list-students`, `edit-student`, `find-students` and `delete-student` commands to read and modify your student list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "2. Create a new session that represents a tutorial, lab or recitation session using the `add-session` command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "3. Mark your students\u0027 attendance and award them class participation marks with the `mark` and `score` commands respectively."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    * Note that you will not be allowed to use these commands outside of a session."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "## Walkthrough"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "On the first use of TAskmaster, the program will be loaded with a sample student list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![walkthrough1](images/walkthrough/1.png)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Enter the `clear` command to delete all existing data in TAskmaster."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![walkthrough2](images/walkthrough/2.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Then, add the students that you are currently teaching into the student list using the `add-student` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![walkthrough3](images/walkthrough/3.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* Note that a student must have a non-empty name, a valid telegram handle, email address and NUSNET id."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* No two students in the student list can share the same NUSNET id."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* You can use the `find-students`, `edit-student` and `delete-student` commands to filter and modify your student list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "After adding all your students, you can create a new session that represents a tutorial, lab or recitation session using"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "the `add-session` command. TAskmaster will automatically switch to the new session view."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![walkthrough4](images/walkthrough/4.png)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* TAskmaster will read the current student list and create a list of corresponding student records that belongs to the new session created."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* Each student in the student list is by a student record"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* This list of records, once created, will be **independent of the student list**. Any modifications to the student list after a session is created **will not** affect the student records in that session."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* You can use the `delete-session` command to delete a session from the session list. This will delete all data (including student records) stored in that session."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Within the session view, you can mark your students\u0027 attendance with the `mark` commands."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![walkthrough5](images/walkthrough/5.png)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![walkthrough6](images/walkthrough/6.png)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "TAskmaster provides you with two ways to get students to call on to answer questions."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* The `lowest-score` command shows a student that is present and currently have the lowest score. If there are multiple"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "present students with the lowest score, the command will show all of them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![walkthrough7](images/walkthrough/7.png)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* The `random-student` command chooses a student that is present randomly."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![walkthrough8](images/walkthrough/8.png)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "You can award class participation score to students using the `score` command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "![walkthrough9](images/walkthrough/9.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Note that you will not be allowed to use any session view commands outside of a session."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* To switch to a session view, use the `goto` command or click the corresponding button on the left, under \u0027Sessions\u0027. "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "* To go back to student list view, use the `list-students` command or click the Student List button on the left."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "When you are done with TAskmaster, use the `exit` command to close the application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Data will be saved automatically."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003e Command format:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003e - Words in `UPPER_CASE` are parameters supplied by the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003e - Items in square brackets are optional."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003e - Items with ellipses (`...`) after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003e - Parameters can be in any order."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Adding a student: `add-student`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Adds a student into the student list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "add-student n/NAME u/TELEGRAM e/EMAIL i/NUSNETID [t/TAG]..."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The `NAME` must be non-empty."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- The `TELEGRAM` handle must be valid (comprising only alphanumeric "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " characters and underscore with a length between 5 and 32 characters inclusive)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The `EMAIL` and `NUSNETID` must be in a valid format."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "add-student n/John Tan u/johntan98 e/johntan98@gmail.com i/e0012345 t/tardy"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jflim98"
        },
        "content": "### Listing all students: `list-students`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Shows a list of all students on the student list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jflim98"
        },
        "content": "list-students"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jflim98"
        },
        "content": "### Finding students by name: `find-students`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Finds students whose name contains any of the given keywords."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jflim98"
        },
        "content": "find-students KEYWORD [MORE_KEYWORDS]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The search is case-insensitive (e.g. `hans` will match `Hans`)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The order of the keywords does not matter (e.g. `Hans Bo` will match `Bo Hans`)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Only the name is searched."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Only full names will be matched (e.g. `han` will NOT match `Hans`)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- Students matching at least one keyword will be returned (e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`)."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "// Returns \u0027john\u0027 and \u0027John Doe\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jflim98"
        },
        "content": "find-students John"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "// Returns \u0027Alex Yeoh\u0027, \u0027David Li\u0027"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jflim98"
        },
        "content": "find-students alex david"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Editing a student: `edit-student`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Edits an existing student in the student list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "edit-student INDEX [n/NAME] [u/TELEGRAM] [e/EMAIL] [i/NUSNETID] [t/TAG]..."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Edits the student at the specified `INDEX` number shown in the displayed student list. "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The `INDEX` **must be a positive integer** that exists in said list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Existing values will be updated to the input values."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- You can remove all the person’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "// Edit the telegram and email of the first person"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "edit-student 1 u/johntan98 e/johntan98@gmail.com"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "// Edit the name of the second person and clear all existing tags"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "edit-student 2 n/Rachel Lee t/"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Deleting a student: `delete-student`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Deletes the specified student from the student list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "delete-student INDEX"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- Deletes the student at the specified `INDEX` number shown in the displayed student list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The `INDEX` **must be a positive integer** that exists in said list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "delete-student 3"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Adding a session: `add-session`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Adds a session into the session list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "add-session s/SESSION_NAME dt/SESSION_DATE_TIME"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The `SESSION_DATE_TIME` must be a valid date of the format `dd-MM-yyyy HHmm`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "- Duplicate session names are not allowed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "add-session s/CS2103 Tutorial 9 dt/23-10-2020 0900"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Deleting a session: `delete-session`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Deletes the specified session from the session list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "```"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "delete-session s/SESSION_NAME"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "```"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- Deletes the session with the specified `SESSION_NAME` from the displayed session list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- A session with `SESSION_NAME` must exist in said list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "delete-session s/CS2103 Tutorial 9"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "### Changing the current session: `goto`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Changes the current session to the session with the specified name."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "goto s/SESSION_NAME"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- The `SESSION_NAME` must belong to one of the existing sessions in the session list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "goto s/CS2103 Tutorial 9"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "### Marking a student\u0027s attendance: `mark`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Marks the attendance of the specified student (or all students) in the session."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "mark INDEX a/ATTENDANCE_TYPE"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Marks the attendance at the specified `INDEX` number shown in the displayed student record list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The `INDEX` **must be a positive integer** that exists in said list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Alternatively, the `INDEX` can be replaced with `all` to mark all students in the student list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The `ATTENDANCE_TYPE` must either be `present` or `absent`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Example Usage:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "mark all a/present"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "mark 1 a/absent"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "### Scoring students\u0027 participation: `score`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Scores the participation of the specified student in the session."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "score INDEX cp/SCORE"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Scores the participation of the student associated with the specified `INDEX` number shown in the displayed student record list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- The `INDEX` **must be a positive integer** that exists in said list."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- The `SCORE` **must be a non-negative number** between 0 and 10, inclusive. "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Taskmaster supports a detailed score of up to 2 decimal places."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "For scores with more than 2 decimal places, the score will be rounded to the nearest 2 decimal places.  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Taskmaster supports scoring students\u0027 participation score even though the student is absent, to allow for"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "module-specific instructions (e.g. a module coordinator instructs the TA to give"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "a participation mark of 6 if a valid MC is given)."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "To score all students **who are present**, you can replace the `INDEX` with the keyword `all`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Example Usage:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "score 1 cp/5"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "score 3 cp/6.9"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "score 4 cp/4.21"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "score all cp/10"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "score all cp/2.94"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "```"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "### View lowest-scoring students: `lowest-score`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jflim98"
        },
        "content": "Displays all students with the lowest score in the current session."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "```"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "lowest-score"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- Lists the records of all present students in the current session with the lowest score."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- Will show no students if the student record list has no present students."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jflim98"
        },
        "content": "### Get random student: `random-student`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jflim98"
        },
        "content": "Displays a random present student from the current session"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jflim98"
        },
        "content": "```"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jflim98"
        },
        "content": "random-student"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jflim98"
        },
        "content": "```"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- Lists a random student that is present from the current session."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- Does not work if the session has no present students."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries: `clear`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Clears all saved data in Taskmaster (both students and sessions)."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "clear"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- This will delete all students and all sessions (including student record data)."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program: `exit`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "exit"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- Data is automatically saved."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "| Action            | Format, Examples                                                                                              |"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "|-------------------|---------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| Add student       | ```add-student n/NAME u/TELEGRAM e/EMAIL i/NUSNETID [t/TAG]``` \u003cbr\u003e e.g., ```add-student n/John Tan u/johntan98```\u003cbr\u003e```e/johntan98@gmail.com i/e0012345 t/tardy```  |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jflim98"
        },
        "content": "| List students     | ```list-students```                                                                                               |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jflim98"
        },
        "content": "| Find students     | ```find-students KEYWORD [MORE_KEYWORDS]``` \u003cbr\u003e e.g., ```find-students alex david```                                      |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| Edit student      | ```edit-student INDEX [n/NAME] [u/TELEGRAM] [e/EMAIL] [i/NUSNETID] [t/TAG]...```\u003cbr\u003e e.g., ```edit-student 1 u/johntan98 e/johntan98@gmail.com```                                                           |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| Delete student    | ```delete-student INDEX``` \u003cbr\u003e e.g., ```delete-student 3```                                                             |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| Add session       | ```add-session s/SESSION_NAME dt/SESSION_DATE_TIME``` \u003cbr\u003e e.g., ```add-session s/CS2103 Tutorial 9 dt/23-10-2020 0900```|"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "| Change session    | ```goto s/SESSION_NAME``` \u003cbr\u003e e.g., ```goto s/CS2103 Tutorial 9```"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| Delete session    | ```delete-session s/SESSION_NAME``` \u003cbr\u003e e.g., ```delete-session s/CS2103 Tutorial 9```"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "| Mark              | ```mark INDEX a/ATTENDANCE_TYPE``` \u003cbr\u003e e.g., `mark 1 a/absent`                                             |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "| Mark all          | ```mark all a/ATTENDANCE_TYPE``` \u003cbr\u003e e.g., `mark all a/present`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "| Score             | ```score INDEX cp/SCORE``` \u003cbr\u003e e.g., `score 1 cp/5`                                             |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "| Score all         | ```score all cp/SCORE``` \u003cbr\u003e e.g., `score all cp/10`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jflim98"
        },
        "content": "| Lowest score      | ```lowest-score```      |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jflim98"
        },
        "content": "| Random student    | ```random-student```     |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "| Clear             | ```clear```                                                                                              |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "| Exit              | ```exit```                                                                                              |"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "## Storage"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "The TAskmaster stores the running list of students and sessions automatically to JSON files when they are updated."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Student data** is stored in `data/taskmaster.json`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "**Session data** is stored in `data/session_list.json`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Avoid modifying the files as this may cause the program to read the input as invalid on startup and load with an"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "empty student list without any sessions."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "## Frequently Asked Questions (FAQ)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "How to download java? [Here](https://lmgtfy.com/?q\u003dhow+to+download+java)"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 79,
      "sc-arecrow": 136,
      "josuaaah": 49,
      "jflim98": 26,
      "jayarengam": 15,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteStudent(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueStudentList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "UniqueTagList -[hidden]down- UniqueStudentList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "UniqueTagList -[hidden]down- UniqueStudentList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "UniqueStudentList o-right-\u003e Student"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Student -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Student *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Student *--\u003e Telegram"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Student *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Student *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "sc-arecrow": 8,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "DeleteCommand -\u003e Model : deleteStudent(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "-": 68
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Interface ReadOnlyTaskmaster \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Class Taskmaster"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Class ReadOnlyTaskmaster"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Package Student {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Class Student"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Class NusnetId"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Class Telegram"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Class UniqueStudentList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Taskmaster .up.|\u003e ReadOnlyTaskmaster"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "ModelManager o--\u003e \"1\" Taskmaster"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Taskmaster *--\u003e \"1\" UniqueStudentList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "UniqueStudentList o--\u003e \"*\" Student"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Student *--\u003e Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Student *--\u003e Telegram"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Student *--\u003e Email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Student *--\u003e NusnetId"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Student *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Name -[hidden]right-\u003e Telegram"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Telegram -[hidden]right-\u003e NusnetId"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "NusnetId -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "ModelManager --\u003e\"1\" Student : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "sc-arecrow": 18,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/SessionAttendanceSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Participant \":Taskmaster\" as tm MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Participant \":Session\" as s MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Participant \":StudentRecordListManager\" as srlm MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "[-\u003e tm : markStudentWithNusnetId(\\n nusnetId, attendanceType)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "activate tm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "tm -\u003e s ++: markStudentAttendance(\\n nusnetId, attendanceType)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "s -\u003e srlm ++: markStudentAttendance(\\n nusnetId, attendanceType)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "srlm --\u003e s --"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "s --\u003e tm --"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c-- tm --"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 16
    }
  },
  {
    "path": "docs/diagrams/SessionClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "skinparam arrowColor MODEL_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Class Taskmaster"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package Session {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Class SessionList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Class Session"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Interface StudentRecordList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Taskmaster *--down-\u003e \"1\" SessionList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "SessionList *--right-\u003e \"*\" Session"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Taskmaster --down-\u003e \"1\" Session"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Session *--\u003e \"1\" StudentRecordList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 18,
      "jayarengam": 2
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Interface TaskmasterStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Class JsonTaskmasterStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Class JsonSerializableTaskmaster"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Class JsonSerializableSessionList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "Class JsonSerializableSession"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "StorageManager o--\u003e TaskmasterStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "JsonTaskmasterStorage .left.|\u003e TaskmasterStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "JsonTaskmasterStorage .right.\u003e JsonSerializableTaskmaster"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "JsonSerializableTaskmaster .down.\u003e JsonSerializableStudent"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "JsonSerializableStudent .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "JsonTaskmasterStorage .-down.\u003e JsonSerializableSessionList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "JsonSerializableSessionList .right.\u003e JsonSerializableSession"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "JsonSerializableSession .right.\u003e JsonAdaptedStudentRecord"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "jayarengam": 13,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/StudentRecordDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package Session {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Class Session"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package Record {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Interface StudentRecordList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Class StudentRecordListManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Class StudentRecord"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Class AttendanceType"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Class ClassParticipation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package Student {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Class Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Class NusnetId"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Session *-down-\u003e \"1\" StudentRecordList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentRecordListManager .up.|\u003e StudentRecordList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentRecordListManager o--\u003e \"*\" StudentRecord"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentRecord *--\u003e Name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentRecord *--\u003e NusnetId"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentRecord *--\u003e AttendanceType"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentRecord *--\u003e ClassParticipation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 32
    }
  },
  {
    "path": "docs/diagrams/StudentRecordListAttendanceSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Participant \":StudentRecordListManager\" as srlm MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Participant \":StudentRecord\" as sr MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "[-\u003e srlm : markStudentAttendance(\\n nusnetId, attendanceType)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "activate srlm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "loop find student"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    alt found student"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        srlm -\u003e sr ++: setAttendanceType(attendanceType)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        sr --\u003e srlm --"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    else student not found"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        \u003c-- srlm: StudentNotFoundException()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    end"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "end"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c-- srlm --"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 19
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Class StudentListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Class StudentCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "MainWindow *-down-\u003e StudentListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentListPanel -down-\u003e StudentCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "StudentListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 8,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "ecp -\u003e ec ++: index, editStudentDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "-": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "title: TAskmaster"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F09-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "TAskmaster is a desktop app for managing students, optimised for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you are a CS Teaching Assistant who can type fast, TAskmaster can help you track your students\u0027 attendance and class participation faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* If you are interested in using TAskmaster, head over to the [**User Guide**](UserGuide.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "* If you are interested about developing TAskmaster, the [**Developer Guide**](DeveloperGuide.md) is a good place to start."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 5,
      "-": 13
    }
  },
  {
    "path": "docs/team/jayarengam.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "title: Jaya Rengam\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "## Project: TAskmaster"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "TAskmaster is a desktop app for managing students, optimised for use"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "via a Command Line Interface (CLI) while still having the benefits of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "a Graphical User Interface (GUI). If you are a CS Teaching Assistant"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "who can type fast, TAskmaster can help you track your students\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "attendance and class participation faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* **New Feature**: Storage for `Attendance`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * This feature was replaced by the feature below, also developed by me."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* **New Feature**: Storage for `SessionList`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * What it does: saves the `SessionList` of the Taskmaster to a file every time it is modified; the `SessionList` is then loaded from the file on startup."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * Justification: This feature is essential for practical use of the application as it is expected that a user will not have it open all the time, but would still want to save their records when closing and reopening the app. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * Highlights: This enhancement required an good understanding of existing `Storage` code to convert `SessionList` classes to their Json representations. Significant modification to existing test code was also done (especially in `TypicalStudents.java`)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * Credits: The design of this feature were adapted from existing Storage code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* **New Feature**: `LowestScoreCommand`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * What it does: in a `Session`, displays all the students with the lowest class participation score"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * Justification: This feature is useful for TAs, especially if they have classes with many students and cannot afford to scroll through their list to call a student who does not have class participation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * Highlights: This enhancement required a substantial refactoring of Model code as the `ObservableList\u003cStudentRecord` passed to the UI was previously not modifiable (to set a predicate)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    The change of the relevant field in Model triggered a few errors that had to be fixed in a methodical manner. Testing of code was required to uncover the problem, which was that the list of student records was not updated in time before being called by the UI. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    This occurred when the relevant listener was activated upon the changing/adding of a Session to the Taskmaster. Fixing this issue required significant modifications to how the representation of the `StudentRecordList` was handled by the `Model` class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* **Bug Fix**: [Block duplicate `Session` names](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/164)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djayarengam\u0026tabRepo\u003dAY2021S1-CS2103-F09-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * Added documentation for above implemented features."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * Added implementation details for storage of `SessionList`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * Updated Use Cases for new features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    * Added non-functional requirements"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * Maintained project document"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#27](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/27)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  * [Other PRs reviewed](https://github.com/AY2021S1-CS2103-F09-1/tp/pulls?q\u003dis%3Apr+is%3Aclosed+reviewed-by%3Ajayarengam+)"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 14,
      "jayarengam": 38
    }
  },
  {
    "path": "docs/team/jflim98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "title: Lim Jin Feng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "## Project: TAskmaster"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "TAskmaster is a desktop app for managing students, optimised for use"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "via a Command Line Interface (CLI) while still having the benefits of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "a Graphical User Interface (GUI). If you are a CS Teaching Assistant"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "who can type fast, TAskmaster can help you track your students\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "attendance and class participation faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- **New feature:** `RandomStudentCommand`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - What it does: Allows a TA to get a random student from the current session directly. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - Justification: With this feature, the TA does not have to think of a random name on the spot, which is susceptible"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    to human bias, resulting in some students being called more often than others."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - Highlights: While this feature was not particularly tough to implement, implementing the test for this feature "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    was challenging as unit tests for methods involving random generation was not covered in class. I ended up having to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    find a way to synchronise the seed of the random generator of the command with the test\u0027s random generator, while"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    allowing the random generator to be initialised with a different seed each time it is called by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- **Code contributed:** [RepoSense Link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djflim98)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- **Project Management:**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "  - Authored, tracked and closed issues on Github"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "  - Reviewed PRs on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- **Enhancements to existing features:**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - Augmented the GUI for all major changes of TAskmaster. This includes:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        - Designing and actualising UI mockups for all iterations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        - Designing and coding FXML files and their relevant java code for all iterations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        - Implementing the ability to display the attendance list (v1.2)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        - Accommodating the addition of Sessions (v1.3)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            - Allowing sessions to be switched with the use of clicks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            - Cohering the `goto` and `list-students` command to make it function seamlessly with the GUI"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        - Adding a display to notify the view the GUI is currently on (v1.4)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        - Highlights: JavaFX is badly documented with blurred lines between FXML and JavaFX code found online. It was"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        challenging to implement a GUI with minimal experience (only from iP) for such a project. Software design patterns "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        used for GUI such as the Observer Pattern was alien to us at the start of this module and was required in our case"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        as we implemented on click events in the GUI itself."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - Implemented and fixed various existing tests."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - Fixed various bugs in TAskmaster."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- **Documentation:**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - User Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        - Updated documentation for `find-students` and `list-students`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        - Added documentation for `random-student`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - Developer Guide:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        - Added implementation details for UI."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "- **Community:**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    - PRs reviewed and [approved](https://github.com/AY2021S1-CS2103-F09-1/tp/pulls?q\u003dis%3Apr+is%3Aclosed+reviewed-by%3Ajflim98)"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 13,
      "jflim98": 42
    }
  },
  {
    "path": "docs/team/josuaaah.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "title: Joshua Chew\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "## Project: TAskmaster"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "TAskmaster is a desktop app for managing students, optimised for use via a Command Line Interface (CLI) while still "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "having the benefits of a Graphical User Interface (GUI). If you are a CS Teaching Assistant who can type fast, "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "TAskmaster can help you track your students\u0027 attendance and class participation faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "This application contains a central database of students, and supports operations to add, edit and delete students. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Each entry in the database keeps track of a student\u0027s name, NUSNET ID, Telegram handle and email address."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "It also supports commands to add and delete tutorial sessions. Each tutorial session contains an independent list of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "student records. A Teaching Assistant (TA) has the option to mark attendances and assign class participation scores to "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "each student in a session. He or she is also able to mark the attendance or assign a score to all students within a "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "session in one command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- **New Feature:** Added the ability to add sessions to TAskmaster."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - What it does: Allows a TA to add a new session to TAskmaster with a specified session name, date and time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    The new session would also contain a list of student records."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Justification: This feature is essential to the product as a TA should be able to create multiple sessions and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    name them according to his preferences."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Highlights: This enhancement requires the implementation of a `Session` class and a `SessionList` as a data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    structure that supports the addition of sessions. This was challenging as it requires an in-depth analysis of design"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    alternatives, and a decision to be made on which stage in the code\u0027s execution should the `StudentRecordList` be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    initialized in the new session."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- **New Feature:** Added the ability to toggle between current sessions in TAskmaster."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - What it does: Allows a TA to choose which session\u0027s student records to view in the GUI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Justification: As a TA would likely create multiple sessions in the application, it is important to allow a TA to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    be able to choose which session\u0027s records to view or perform commands on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Highlights: This enhancement requires some contemplation to be made on how the `Model` class should be redesigned"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    such that it contains information on which session is currently selected. It also has to support the corner case"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    where the TAskmaster is being used for the first time, where no sessions has been created yet and the pointer to the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    current session is `null`. This implementation is challenging as it has to ensure that such corner cases would not"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    present unexpected bugs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- **New Feature:** Added the ability to delete a session in TAskmaster."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - What it does: Allows a TA to delete a session with the specified session name from the session list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Justification: This feature improves the usability of the product. TAs can potentially made mistakes when adding"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    sessions. For example, he could have mistyped the name of a session, or keyed in the wrong date and time. In such"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    cases, a TA can easily delete the session from the application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Highlights: This enhancement requires careful testing to ensure that all potential bugs are eliminated. For"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    example, I made sure that sessions within the TAskmaster cannot possess the same name, such that there would be no"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    issues when deleting a session with a specific session name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- **New Feature:** Renamed the commands such that it is easier to differentiate between student-related and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "session-related commands."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Justification: Some commands have similar names. It is important for the TA to be clear on whether a command acts"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    on a student or a session. Prior to the renaming, the command to add a student to the student list was `add`,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    whereas that of adding a new session was `session`. This made the functionality of `add` sound ambiguous and "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    confusing. Now, the former is named `add-student`, and the latter is named `add-session`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- **Code contributed:** [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djosuaaah)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- **Enhancements to existing features:**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Wrote additional tests for existing features to increase code coverage (Pull requests "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    [#57](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/57) and [#171](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/171))."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- **Documentation:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - User Guide:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        - Added documentation for the features `add-session`, `goto` and `delete-session`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Developer Guide:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        - Added implementation details for the `Session` and `SessionList` feature. [#79](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/79)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        - Added instructions for manual testing for features adapted from AB3, like `add-student`, `find-student`, `edit-student` and `delete-student`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        [#212](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/212)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "- **Community:**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - PRs reviewed and [approved](https://github.com/AY2021S1-CS2103-F09-1/tp/pulls?q\u003dis%3Apr+is%3Aclosed+review%3Aapproved)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Contributed to forum discussions (Examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/266), "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/139))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    - Did manual testing on another group\u0027s product [ConciergeBook](https://github.com/AY2021S1-CS2103-W14-2/tp) and reported bugs to them"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "josuaaah": 86
    }
  },
  {
    "path": "docs/team/sc-arecrow.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "title: Goh Siau Chiak\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "## Project: TAskmaster"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "TAskmaster is a desktop app for managing students, optimised for use via a Command Line Interface (CLI) while still "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "having the benefits of a Graphical User Interface (GUI). If you are a CS Teaching Assistant who can type fast, "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "TAskmaster can help you track your students\u0027 attendance and class participation faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "This application contains a central database of students, and supports operations to add, edit and delete students. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "Each entry in the database keeps track of a student\u0027s name, NUSNET ID, Telegram handle and email address."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "It also supports commands to add and delete tutorial sessions. Each tutorial session contains an independent list of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "student records. A Teaching Assistant (TA) has the option to mark attendances and assign class participation scores to "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "each student in a session. He or she is also able to mark the attendance or assign a score to all students within a "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "session in one command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- **New Feature:** Designed and implemented the student record and record list contained in a session. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - What it does: Allows a TA to have a dynamic record of students who are enrolled in a particular session that"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    updates when certain changes are made, such as marking a student\u0027s attendance or awarding class participation score."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Each record contains the name and NUSNET ID of the represented student, their attendance and class participation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    score. \\"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    **Important**: the student record list in each session is **independent** of the student list maintained by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    TAskmaster."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - Justification: This feature is essential to the product as a TA should be able to see and change certain details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    of the student records in a session setting, without modifying the student list separately maintained by TAskmaster."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - Highlights: This enhancement requires the implementation of an immutable `StudentRecord` class and a"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    `StudentRecordList` as a data structure that supports the controlled addition and editing of student records. This"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    was challenging as it required an in-depth analysis of design alternatives (discussion found in the [developer guide](../DeveloperGuide.md#studentrecordlist))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    to how the `StudentRecord` and `StudentRecordList` classes should be implemented."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - Credits: The design of `StudentRecordList` was inspired by the design of `UniquePersonList` in AB3."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- **New Feature:** Added the ability to mark a student\u0027s attendance, or all students\u0027 attendances at once, in a"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "particular session."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - What it does: Allows a TA to track who is present at the session and who is absent."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - Justification: This feature enables the TA to mark class attendance efficiently and quickly move on with the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    lesson proper. TAskmaster will save the attendance records for the TA to view at his leisure after the class has"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ended, saving the TA from having to juggle between physical or slower digital means of taking attendance and "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    teaching the class. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - Highlights: This enhancement requires some contemplation to be made on the implementation of the mark attendance method."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    This was challenging as it required an in-depth analysis and consideration on how to reconcile the different ways"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    that the mark command vs the mark attendance method identifies which record is supposed to be marked. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- **Code contributed:** [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsc-arecrow)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- **Project Management:**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  * Managed releases `v1.2` - `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  * Authored, tracked and closed issues on Github"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  * Reviewed more than 30 PRs on GitHub"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- **Enhancements to existing features:**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - Improved the GUI in `v1.4` by fixing some bugs related to resizing of the application window, and changing the look of the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    following components: (PR [#170](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/170))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        - Student List button"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        - session buttons"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        - student card (inside the list)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        - student record card (inside the list)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - Redesigned `Attendance` and related classes in `v1.2` to `StudentRecord` in `v1.3` ([#77](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/77))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - Refactor names to update AB3 code to TAskmaster code: (PR [#43](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/43))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        - from `AddressBook` to `Taskmaster`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        - from `Person` to `Taskmaster`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- **Documentation:**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - User Guide:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        - Added documentation for the `mark` and `mark all` features."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        - Updated User Guide to resolve several documentation flaws pointed out during `PE-D` (PR [#166](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/166))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - Developer Guide:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        - Added implementation details for `StudentRecord` and `StudentRecordList`, including: (PR [#79](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/79) and [#199](https://github.com/AY2021S1-CS2103-F09-1/tp/pull/199))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            - class diagrams"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            - sequence diagrams"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            - design alternatives "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "- **Community:**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    - PRs reviewed and [approved](https://github.com/AY2021S1-CS2103-F09-1/tp/pulls?q\u003dis%3Apr+is%3Aclosed+reviewed-by%3Asc-arecrow+)"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 71,
      "josuaaah": 8
    }
  },
  {
    "path": "docs/team/theodoreleebrant.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "title: Theodore Leebrant\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "## Project: TAskmaster"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "TAskmaster is a desktop app for managing students, optimised for use via a Command Line Interface (CLI) while still "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "having the benefits of a Graphical User Interface (GUI). If you are a CS Teaching Assistant who can type fast, "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "TAskmaster can help you track your students\u0027 attendance and class participation faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "This application contains a central database of students, and supports operations to add, edit and delete students. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Each entry in the database keeps track of a student\u0027s name, NUSNET ID, Telegram handle and email address."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "It also supports commands to add and delete tutorial sessions. Each tutorial session contains an independent list of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "student records. A Teaching Assistant (TA) has the option to mark attendances and assign class participation scores to "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "each student in a session. He or she is also able to mark the attendance or assign a score to all students within a "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "session in one command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* **New Feature**: "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * Added a Participation Record field in the student session record, such that students\u0027 participation marks can be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  scored in every class session."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * Adapted the file writing behaviour of the original storage to include a new line at end-of-file to conform with "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  checkstyle."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* **Code contributed**: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "[RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dtheodoreleebrant)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * Included the CI and codecov badge inside the project."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * Managed the overall code coverage of the project."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * Created the pull request template which includes a checklist of what needs to be done for approval."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * Created bug report and features request template to make it more descriptive."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Changed the address field to one that supports NUSNET ID."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "      * Updated the regular expression validation for the field."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Changed the phone address to a telegram account."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "      * Updated the input validation to one that conforms to "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "      [Telegram\u0027s API](https://core.telegram.org/method/account.checkUsername)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Refactored Addressbook to Taskmaster."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Wrote additional tests for existing features to "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    increase coverage from 59.8% to 64.2% (Pull request [\\#105]())."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Added documentation for the features `score` and `score all`: [\\#109]()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Fixed the overall formatting for all tables and headings, as well as broken links: [\\#113](), [\\#114]()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Added implementation details of the `Class Participation`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * PRs reviewed and approved, as well as bug reported: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  [\\#26](), [\\#35](), [\\#51](), [\\#96](), [\\#105](), [\\#179](), [\\#181]()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * Contributed to forum discussions "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  (examples: [(Question) 1](https://github.com/nus-cs2103-AY2021S1/forum/issues/12), "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  [(Question) 2](https://github.com/nus-cs2103-AY2021S1/forum/issues/23), "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  [(Question) 3](https://github.com/nus-cs2103-AY2021S1/forum/issues/98), "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  [(Tip) 4](https://github.com/nus-cs2103-AY2021S1/forum/issues/264)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  [(Question) 5](https://github.com/nus-cs2103-AY2021S1/forum/issues/307)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  [(Answering) 6](https://github.com/nus-cs2103-AY2021S1/forum/issues/90))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  [1](https://github.com/AY2021S1-CS2103-W14-3/tp/issues/112), "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  [2](https://github.com/AY2021S1-CS2103-W14-3/tp/issues/113), "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "  [3](https://github.com/AY2021S1-CS2103-W14-3/tp/issues/117))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Managed and configured the code coverage tools (using [codecov.io](https://www.codecov.io))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Configured the github CI to include the codecov tool after intermittent failure"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    * Configured the YAML file for code coverage settings"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 62,
      "josuaaah": 10
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.taskmaster.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Create a new `Remark` in `seedu.taskmaster.model.student`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Simply add the following to [`seedu.taskmaster.ui.StudentCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getTelegram(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 7,
      "-": 387
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.taskmaster.model.student.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cLabel fx:id\u003d\"telegram\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$telegram\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"telegram\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 100
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.taskmaser.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [u/TELEGRAM] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 248
    }
  },
  {
    "path": "pull_request_template.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "# \u003cTitle\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "## Summary"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cSummary of the change\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cRelevant motivation and context, if applicable\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cAny dependencies required for change\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cClosing issues\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Closes # (issue number)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "## Type of change"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cSelect all that apply, in the form [x]\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] Bug fix (non-breaking change which fixes an issue)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] New feature (non-breaking change which adds functionality)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] This change requires a documentation update"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "# Testing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] Test A"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] Test B"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "**Test Configuration**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "* OS:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "# Checklist:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] My code follows the style guidelines of this project"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] I have commented my code, particularly in hard-to-understand areas"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] I have made corresponding changes to the documentation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] My changes generate no new warnings"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] I have added tests that prove my fix is effective or that my feature works"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "- [ ] New and existing unit tests pass locally with my changes"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 34
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionListManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.JsonTaskmasterStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.TaskmasterStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Taskmaster ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        TaskmasterStorage taskmasterStorage \u003d new JsonTaskmasterStorage(userPrefs.getTaskmasterFilePath(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                userPrefs.getSessionListFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        storage \u003d new StorageManager(taskmasterStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s student list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The data from the sample student list will be used instead if {@code storage}\u0027s student list is not found,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * or an empty student list will be used instead if errors occur when reading {@code storage}\u0027s student list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Optional\u003cReadOnlyTaskmaster\u003e taskmasterOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Optional\u003cSessionList\u003e sessionListOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ReadOnlyTaskmaster initialData \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        SessionList initialSessionList \u003d new SessionListManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            taskmasterOptional \u003d storage.readTaskmaster();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (!taskmasterOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Taskmaster\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            initialData \u003d taskmasterOptional.orElseGet(SampleDataUtil::getSampleTaskmaster);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            sessionListOptional \u003d storage.readSessionList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (!sessionListOptional.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                logger.info(\"Session List file not found.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            initialSessionList \u003d sessionListOptional.orElse(initialSessionList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Taskmaster\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            initialData \u003d new Taskmaster();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Taskmaster\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            initialData \u003d new Taskmaster();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            logger.warning(\"Problem when parsing ClassParticipation scores.\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    + \" Will be starting with empty SessionList.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            initialData \u003d (initialData !\u003d null) ? initialData : new Taskmaster();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            initialSessionList \u003d new SessionListManager();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return new ModelManager(initialData, initialSessionList.asUnmodifiableObservableList(), userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Taskmaster\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        logger.info(\"Starting Taskmaster \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping TAskmaster ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 24,
      "sc-arecrow": 16,
      "jflim98": 1,
      "jayarengam": 20,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final String LOG_FILE \u003d \"taskmaster.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "sc-arecrow": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final String MESSAGE_RECORDS_LISTED_OVERVIEW \u003d \"%1$d student records listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "jflim98": 2,
      "jayarengam": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the Taskmaster."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @see seedu.taskmaster.model.Model#getTaskmaster()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ReadOnlyTaskmaster getTaskmaster();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of student records */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ObservableList\u003cStudentRecord\u003e getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered session list */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredSessionList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the user prefs\u0027 student list file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Path getTaskmasterFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    void changeSession(SessionName sessionName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void showStudentList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    SimpleObjectProperty\u003cSession\u003e getCurrentSession();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 8,
      "sc-arecrow": 10,
      "jflim98": 12,
      "josuaaah": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.NewSessionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.StorageCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.TaskmasterParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordListManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final TaskmasterParser taskmasterParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmasterParser \u003d new TaskmasterParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Command command \u003d taskmasterParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (command instanceof StorageCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            StorageCommand storageCommand \u003d (StorageCommand) command;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            storageCommand.initialiseStorage(storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            commandResult \u003d storageCommand.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        } else if (command instanceof NewSessionCommand) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            NewSessionCommand newSessionCommand \u003d (NewSessionCommand) command;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            StudentRecordList studentRecords \u003d StudentRecordListManager.of(model.getFilteredStudentList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            newSessionCommand.setStudentRecords(studentRecords);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            commandResult \u003d newSessionCommand.execute(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            storage.saveTaskmaster(model.getTaskmaster());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            storage.saveSessionList(model.getTaskmaster());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ReadOnlyTaskmaster getTaskmaster() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return model.getTaskmaster();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ObservableList\u003cStudentRecord\u003e getFilteredStudentRecordList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return model.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return model.getFilteredSessionList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Path getTaskmasterFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return model.getTaskmasterFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void changeSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        model.changeSession(sessionName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void showStudentList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.showStudentList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public SimpleObjectProperty\u003cSession\u003e getCurrentSession() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return this.model.getCurrentSession();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 13,
      "sc-arecrow": 17,
      "jflim98": 20,
      "josuaaah": 9,
      "jayarengam": 10,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NUSNETID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Adds a student to the student list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-student\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the student list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + PREFIX_TELEGRAM + \"TELEGRAM \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + PREFIX_NUSNETID + \"NUSNETID \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            + PREFIX_TELEGRAM + \"telehandle \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + PREFIX_NUSNETID + \"e0123456 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the student list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public AddCommand(Student student) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 12,
      "sc-arecrow": 12,
      "josuaaah": 1,
      "jflim98": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/ChangeSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Changes the current session of the Taskmaster to another session in the session list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class ChangeSessionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the current session. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + PREFIX_SESSION_NAME + \"SESSION_NAME...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + PREFIX_SESSION_NAME + \"Default session\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Current session: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_SESSION_NOT_FOUND \u003d \"This session does not exist!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionName sessionName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Creates a ChangeSessionCommand to switch to the session with the specified {@code sessionName}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public ChangeSessionCommand(SessionName sessionName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (!model.hasSession(sessionName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new CommandException(MESSAGE_SESSION_NOT_FOUND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        model.changeSession(sessionName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sessionName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                || (other instanceof ChangeSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                \u0026\u0026 sessionName.equals(((ChangeSessionCommand) other).sessionName));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 54
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Clears the student list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Student and session list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.setTaskmaster(new Taskmaster());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "sc-arecrow": 2,
      "josuaaah": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Deletes a student identified using its displayed index from the student list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-student\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 6,
      "sc-arecrow": 8,
      "josuaaah": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/DeleteSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Deletes a session from the session list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class DeleteSessionCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-session\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a session from the session list. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + PREFIX_SESSION_NAME + \"SESSION_NAME...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + PREFIX_SESSION_NAME + \"CS2103 Tutorial 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted session: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_MISSING_SESSION \u003d \"There are no sessions in the session list with that name!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionName sessionName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Creates a DeleteSessionCommand to delete the specified {@code Session}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public DeleteSessionCommand(SessionName sessionName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            model.deleteSession(sessionName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        } catch (SessionNotFoundException sessionNotFoundException) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_SESSION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sessionName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                || other instanceof DeleteSessionCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                \u0026\u0026 sessionName.equals(((DeleteSessionCommand) other).sessionName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 54
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NUSNETID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Edits the details of an existing student in the student list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-student\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"[\" + PREFIX_TELEGRAM + \"TELEGRAM] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"[\" + PREFIX_NUSNETID + \"NUSNETID] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + PREFIX_TELEGRAM + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the student list.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Telegram updatedTelegram \u003d editStudentDescriptor.getTelegram().orElse(studentToEdit.getTelegram());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        NusnetId updatedNusnetId \u003d editStudentDescriptor.getNusnetId().orElse(studentToEdit.getNusnetId());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new Student(updatedName, updatedTelegram, updatedEmail, updatedNusnetId, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        private Telegram telegram;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        private NusnetId nusnetId;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            setTelegram(toCopy.telegram);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            setNusnetId(toCopy.nusnetId);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, telegram, email, nusnetId, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        public void setTelegram(Telegram telegram) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        public Optional\u003cTelegram\u003e getTelegram() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            return Optional.ofNullable(telegram);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        public void setNusnetId(NusnetId nusnetId) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            this.nusnetId \u003d nusnetId;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        public Optional\u003cNusnetId\u003e getNusnetId() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            return Optional.ofNullable(nusnetId);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    \u0026\u0026 getTelegram().equals(e.getTelegram())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    \u0026\u0026 getNusnetId().equals(e.getNusnetId())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 39,
      "sc-arecrow": 35,
      "josuaaah": 1,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Finds and lists all students in student list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-students\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 4,
      "sc-arecrow": 4,
      "jflim98": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/ListRecordsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.model.Model.PREDICATE_SHOW_ALL_STUDENT_RECORDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class ListRecordsCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-records\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all student records\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            model.updateFilteredStudentRecordList(PREDICATE_SHOW_ALL_STUDENT_RECORDS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        } catch (SessionException se) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new CommandException(se.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 27
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/ListStudentsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Lists all students in the student list to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class ListStudentsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-students\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.showStudentList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "sc-arecrow": 4,
      "jflim98": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/LowestScoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class LowestScoreCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lowest-score\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the student(s) with the lowest \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            + \"class participation score.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed %1$d students\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            model.showLowestScoringStudents();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (SessionException se) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new CommandException(se.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW, model.getFilteredStudentRecordList().size()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 32
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/MarkAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_ATTENDANCE_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class MarkAllCommand extends MarkCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark all\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            + \": Marks attendances of all students in the student list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            + PREFIX_ATTENDANCE_TYPE + \"ATTENDANCE_TYPE (must be \u0027present\u0027 or \u0027absent\u0027) \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + PREFIX_ATTENDANCE_TYPE + \"present\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_MARK_ALL_SUCCESS \u003d \"Marked all students as %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public MarkAllCommand(AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        super(null, attendanceType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            List\u003cStudentRecord\u003e lastShownList \u003d model.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            model.markAllStudentRecords(lastShownList, attendanceType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        } catch (SessionException sessionException) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new CommandException(sessionException.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_ALL_SUCCESS, attendanceType));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!(other instanceof MarkAllCommand)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        MarkAllCommand m \u003d (MarkAllCommand) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return attendanceType.equals(m.attendanceType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 53,
      "josuaaah": 5
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/MarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_ATTENDANCE_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Marks the attendance of a student identified using its displayed index from the student list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class MarkCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + \": Marks attendance of the student identified by the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + \"index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            + PREFIX_ATTENDANCE_TYPE + \"ATTENDANCE_TYPE (must be \u0027present\u0027 or \u0027absent\u0027) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_ATTENDANCE_TYPE + \"present\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_MARK_STUDENT_SUCCESS \u003d \"Marked %1$s as %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    protected final AttendanceType attendanceType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @param targetIndex of the student in the filtered student list to mark"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @param attendanceType to mark the student with"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public MarkCommand(Index targetIndex, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.attendanceType \u003d attendanceType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentRecord studentRecordToMark \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            int index \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            List\u003cStudentRecord\u003e lastShownList \u003d model.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            if (index \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            studentRecordToMark \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            model.markStudentRecord(studentRecordToMark, attendanceType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        } catch (SessionException sessionException) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new CommandException(sessionException.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                MESSAGE_MARK_STUDENT_SUCCESS, studentRecordToMark.getNusnetId(), attendanceType));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!(other instanceof MarkCommand)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        MarkCommand m \u003d (MarkCommand) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return targetIndex.equals(m.targetIndex)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 attendanceType.equals(m.attendanceType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 6,
      "sc-arecrow": 66,
      "josuaaah": 10
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/NewSessionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Adds a session to the session list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class NewSessionCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-session\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a session to the session list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + PREFIX_SESSION_NAME + \"SESSION_NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + PREFIX_SESSION_DATE_TIME + \"SESSION_DATE_TIME...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + PREFIX_SESSION_NAME + \"CS2103 Tutorial 1 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            + PREFIX_SESSION_DATE_TIME + \"23-10-2020 0900\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New session added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSION \u003d \"Cannot add session:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            + \"A session with the same name already exists in the session list\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private StudentRecordList studentRecordList \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionName sessionName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionDateTime sessionDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Creates a NewSessionCommand to add the specified {@code Session}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public NewSessionCommand(SessionName sessionName, SessionDateTime sessionDateTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(sessionDateTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.sessionDateTime \u003d sessionDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setStudentRecords(StudentRecordList studentRecords) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        studentRecordList \u003d studentRecords;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // At the point of execution, student records must be set."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(studentRecordList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        // If the Taskmaster already has a session with the same name, throw an error"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (model.hasSession(sessionName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Session toAdd \u003d new Session(sessionName, sessionDateTime, studentRecordList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        model.addSession(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (studentRecordList \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            return other instanceof NewSessionCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    \u0026\u0026 sessionName.equals(((NewSessionCommand) other).sessionName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    \u0026\u0026 sessionDateTime.equals(((NewSessionCommand) other).sessionDateTime)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    \u0026\u0026 ((NewSessionCommand) other).studentRecordList \u003d\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            return other instanceof NewSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    \u0026\u0026 sessionName.equals(((NewSessionCommand) other).sessionName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    \u0026\u0026 sessionDateTime.equals(((NewSessionCommand) other).sessionDateTime)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    \u0026\u0026 studentRecordList.equals(((NewSessionCommand) other).studentRecordList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 80,
      "jayarengam": 6
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/ParticipationAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_CLASS_PARTICIPATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class ParticipationAllCommand extends ParticipationCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"score all\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \": Scores the class participation of the student identified by the \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + PREFIX_CLASS_PARTICIPATION"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"CLASS_PARTICIPATION (between 0 to 10 inclusive, allows for 2 decimal points) \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"You may substitute INDEX for the word \u0027all\u0027 to mark all students in the session. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"Example 1: \" + COMMAND_WORD + \" 1 \" + PREFIX_CLASS_PARTICIPATION + \"7\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"Example 2: \" + COMMAND_WORD + \" all \" + PREFIX_CLASS_PARTICIPATION + \"6\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String MESSAGE_MARK_ALL_SUCCESS \u003d \"Scored %1$s for all students\u0027 participation mark.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public ParticipationAllCommand(double score) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        super(null, score);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            List\u003cStudentRecord\u003e lastShownList \u003d model.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            model.scoreAllStudents(lastShownList, score);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } catch (SessionException sessionException) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new CommandException(sessionException.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_ALL_SUCCESS, score));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (!(other instanceof ParticipationCommand)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand m \u003d (ParticipationCommand) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return (this.score \u003d\u003d m.score);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 61
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/ParticipationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_CLASS_PARTICIPATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " * Marks the participation of a student identified using its displayed index from the student list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class ParticipationCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"score\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \": Scores the class participation of the student identified by the \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + PREFIX_CLASS_PARTICIPATION"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"CLASS_PARTICIPATION (between 0 to 10 inclusive, allows for 2 decimal points) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"You may substitute INDEX for the word \u0027all\u0027 to mark all students in the session. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"Example 1: \" + COMMAND_WORD + \" 1 \" + PREFIX_CLASS_PARTICIPATION + \"7\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"Example 2: \" + COMMAND_WORD + \" all \" + PREFIX_CLASS_PARTICIPATION + \"6\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String MESSAGE_SCORE_STUDENT_SUCCESS \u003d \"%1$s scored %2$s for class participation\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    protected final double score;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @param targetIndex of the student in the filtered student list to mark"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @param newScore as the new score of the student"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public ParticipationCommand(Index targetIndex, double newScore) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.score \u003d newScore;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        StudentRecord studentToScore;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            int index \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            List\u003cStudentRecord\u003e lastShownList \u003d model.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            if (index \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            studentToScore \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            model.scoreStudent(studentToScore, score);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } catch (SessionException sessionException) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new CommandException(sessionException.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SCORE_STUDENT_SUCCESS, studentToScore.getName(), score));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (!(other instanceof ParticipationCommand)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand m \u003d (ParticipationCommand) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return (targetIndex.equals(m.targetIndex))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \u0026\u0026 (this.score \u003d\u003d m.score);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 83
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/RandomStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class RandomStudentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"random-student\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets a random student to call.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed random student\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Random random;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public RandomStudentCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.random \u003d new Random();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public RandomStudentCommand(Random random) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.random \u003d random;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            model.showRandomStudent(random);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } catch (SessionException se) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            throw new CommandException(se.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "jflim98": 40
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/StorageCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public abstract class StorageCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void initialiseStorage(Storage storage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "jayarengam": 9
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NUSNETID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        .tokenize(args, PREFIX_NAME, PREFIX_TELEGRAM, PREFIX_EMAIL, PREFIX_NUSNETID, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NUSNETID, PREFIX_TELEGRAM, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Telegram telegram \u003d ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        NusnetId nusnetId \u003d ParserUtil.parseNusnetId(argMultimap.getValue(PREFIX_NUSNETID).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Student student \u003d new Student(name, telegram, email, nusnetId, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new AddCommand(student);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 21,
      "sc-arecrow": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/ChangeSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.ChangeSessionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Parses input arguments and creates a new ChangeSessionCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class ChangeSessionCommandParser implements Parser\u003cChangeSessionCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * ChangeSessionCommand and returns a ChangeSessionCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public ChangeSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                        .tokenize(args, PREFIX_SESSION_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SESSION_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionName sessionName \u003d ParserUtil.parseSessionName(argMultimap.getValue(PREFIX_SESSION_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return new ChangeSessionCommand(sessionName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "josuaaah": 45
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final Prefix PREFIX_TELEGRAM \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final Prefix PREFIX_NUSNETID \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE_TYPE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE_FILENAME \u003d new Prefix(\"fn/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Prefix PREFIX_SESSION_NAME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Prefix PREFIX_SESSION_DATE_TIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final Prefix PREFIX_CLASS_PARTICIPATION \u003d new Prefix(\"cp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 4,
      "sc-arecrow": 1,
      "josuaaah": 2,
      "jayarengam": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "sc-arecrow": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/DeleteSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.DeleteSessionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Parses input arguments and creates a new DeleteSessionCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class DeleteSessionCommandParser implements Parser\u003cDeleteSessionCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * DeleteSessionCommand and returns an DeleteSessionCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public DeleteSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                        .tokenize(args, PREFIX_SESSION_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SESSION_NAME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionName sessionName \u003d ParserUtil.parseSessionName("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                argMultimap.getValue(PREFIX_SESSION_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return new DeleteSessionCommand(sessionName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 44
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NUSNETID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        .tokenize(args, PREFIX_NAME, PREFIX_TELEGRAM, PREFIX_EMAIL, PREFIX_NUSNETID, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TELEGRAM).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            editStudentDescriptor.setTelegram(ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NUSNETID).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            editStudentDescriptor.setNusnetId(ParserUtil.parseNusnetId(argMultimap.getValue(PREFIX_NUSNETID).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new EditCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 18,
      "sc-arecrow": 7,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "sc-arecrow": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/MarkCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_ATTENDANCE_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.logic.commands.MarkAllCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Parses input arguments and creates a new MarkCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class MarkCommandParser implements Parser\u003cMarkCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * and returns a MarkCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public MarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ATTENDANCE_TYPE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        AttendanceType attendanceType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            attendanceType \u003d ParserUtil.parseAttendanceType(argMultimap.getValue(PREFIX_ATTENDANCE_TYPE).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (preamble.equals(\"all\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                return new MarkAllCommand(attendanceType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                return new MarkCommand(index, attendanceType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (ParseException | NoSuchElementException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 6,
      "sc-arecrow": 33,
      "josuaaah": 1,
      "jayarengam": 4
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/NewSessionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.NewSessionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Parses input arguments and creates a new NewSessionCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class NewSessionCommandParser implements Parser\u003cNewSessionCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * NewSessionCommand and returns an NewSessionCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public NewSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                        .tokenize(args, PREFIX_SESSION_NAME, PREFIX_SESSION_DATE_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SESSION_NAME, PREFIX_SESSION_DATE_TIME)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionName sessionName \u003d ParserUtil.parseSessionName("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                argMultimap.getValue(PREFIX_SESSION_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionDateTime sessionDateTime \u003d ParserUtil.parseSessionDateTime("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                argMultimap.getValue(PREFIX_SESSION_DATE_TIME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return new NewSessionCommand(sessionName, sessionDateTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "josuaaah": 51
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.record.ClassParticipation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Parses a {@code String name} into a {@code SessionName}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static SessionName parseSessionName(String name) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (!SessionName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new ParseException(SessionName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return new SessionName(trimmedName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code SessionDateTime}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} has an invalid format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static SessionDateTime parseSessionDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            LocalDateTime localDateTime \u003d LocalDateTime.parse(trimmedDateTime, SessionDateTime.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            return new SessionDateTime(localDateTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        } catch (DateTimeParseException dateTimeParseException) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new ParseException(SessionDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Parses a {@code String telegramUsername} into a {@code Telegram}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws ParseException if the given {@code telegramUsername} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static Telegram parseTelegram(String telegramUsername) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireNonNull(telegramUsername);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String trimmedUsername \u003d telegramUsername.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (!Telegram.isValidTelegram(trimmedUsername)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new ParseException(Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new Telegram(trimmedUsername);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Parses a {@code String nusnetId} into an {@code NusnetId}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws ParseException if the given {@code nusnetId} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static NusnetId parseNusnetId(String nusnetId) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireNonNull(nusnetId);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String trimmedNusnetId \u003d nusnetId.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (!NusnetId.isValidNusnetId(trimmedNusnetId)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new ParseException(NusnetId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new NusnetId(trimmedNusnetId);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Parses a {@code String attendanceType} into an {@code AttendanceType}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws ParseException if the given {@code attendanceType} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static AttendanceType parseAttendanceType(String attendanceType) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(attendanceType);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String trimmedAttendanceType \u003d attendanceType.trim().toUpperCase();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!AttendanceType.isValidAttendanceType(trimmedAttendanceType)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new ParseException(AttendanceType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return AttendanceType.valueOf(trimmedAttendanceType);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Parses a {@code String filename} into a filename."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws ParseException if the given {@code filename} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static String parseFilename(String filename) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        requireNonNull(filename);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String trimmedFilename \u003d filename.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (!StorageManager.isValidFilename(filename)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new ParseException(StorageManager.FILENAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return trimmedFilename;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Parses a {@code String score} into a double array."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * First entry of the array would be a isNegative flag, second entry is the parsed score."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws ParseException if the given {@code score} is invalid."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static double[] parseScore(String score) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String trimmedScore \u003d score.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        double parsedScore \u003d 0;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            parsedScore \u003d Double.valueOf(trimmedScore);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            double negativeFlag \u003d trimmedScore.charAt(0) \u003d\u003d \u0027-\u0027 ? 1 : 0;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            return new double[]{negativeFlag, parsedScore};"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new ParseException(ClassParticipation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 49,
      "sc-arecrow": 16,
      "josuaaah": 36,
      "jayarengam": 14,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/ParticipationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_CLASS_PARTICIPATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.ParticipationAllCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.ParticipationCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " * Parses input arguments and creates a new ParticipationCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class ParticipationCommandParser implements Parser\u003cParticipationCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * and returns a MarkCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public ParticipationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CLASS_PARTICIPATION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        double score;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        double rawScore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        double[] raw; // [negative 1/0 flag, rawScore]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        boolean isNegative;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            raw \u003d ParserUtil.parseScore(argMultimap.getValue(PREFIX_CLASS_PARTICIPATION).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            rawScore \u003d raw[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            isNegative \u003d raw[0] \u003d\u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            score \u003d Math.round(rawScore * 100.0) / 100.0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            if (isNegative \u0026\u0026 rawScore \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                throw new IllegalValueException(\"Invalid input: Do not put - before zero.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            } else if (rawScore \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        \"Invalid input: Negative score. Score needs to be between 0 to 10 inclusive.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            } else if (rawScore \u003e 10) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        \"Invalid input: Score is greater than 10. Score needs to be between 0 to 10 inclusive.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            if (preamble.equals(\"all\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                return new ParticipationAllCommand(score);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                return new ParticipationCommand(index, score);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } catch (ParseException | NoSuchElementException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ParticipationCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    e.getMessage()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 65
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/TaskmasterParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.ChangeSessionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.DeleteSessionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.logic.commands.ListRecordsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.logic.commands.ListStudentsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.logic.commands.LowestScoreCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.NewSessionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.ParticipationCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.logic.commands.RandomStudentCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class TaskmasterParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        case ListStudentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return new ListStudentsCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        case ListRecordsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return new ListRecordsCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        case MarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return new MarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        case ParticipationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new ParticipationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        case LowestScoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new LowestScoreCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        case RandomStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return new RandomStudentCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        case NewSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            return new NewSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        case ChangeSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new ChangeSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        case DeleteSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            return new DeleteSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "sc-arecrow": 11,
      "josuaaah": 21,
      "jflim98": 3,
      "jayarengam": 8,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /** {@code Predicate} that always evaluates to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /** {@code Predicate} that always evaluates to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    Predicate\u003cSession\u003e PREDICATE_SHOW_ALL_SESSIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /** {@code Predicate} that always evaluates to true */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Predicate\u003cStudentRecord\u003e PREDICATE_SHOW_ALL_STUDENT_RECORDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /** {@code Predicate} that shows present students */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    Predicate\u003cStudentRecord\u003e PREDICATE_SHOW_ALL_PRESENT_STUDENT_RECORDS \u003d studentRecord -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            studentRecord.getAttendanceType().equals(AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the user prefs\u0027 student list file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Path getTaskmasterFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Sets the user prefs\u0027 student list file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void setTaskmasterFilePath(Path taskmasterFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Replaces student list data with the data in {@code taskmaster}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void setTaskmaster(ReadOnlyTaskmaster taskmaster);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /** Returns the Taskmaster */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ReadOnlyTaskmaster getTaskmaster();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Replaces the contents of the session list with {@code sessions}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code sessions} must not contain duplicate sessions."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    void setSessions(List\u003cSession\u003e sessions);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Deletes the session with {@code sessionName}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code sessionName} must already exist in the session list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    void deleteSession(SessionName sessionName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Adds the given session."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * {@code session} must not already exist in the session list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    void addSession(Session session);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Changes the currentSession to a Session with that name."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    void changeSession(SessionName sessionName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Switches TAskmaster to student list view."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void showStudentList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if {@code session} exists in the session list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    boolean hasSession(Session session);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if a session with {@code sessionName} exists in the session list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    boolean hasSession(SessionName sessionName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the student list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The student must exist in the student list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code student} must not already exist in the student list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code target} must exist in the student list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * the student list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered attendance list */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ObservableList\u003cStudentRecord\u003e getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered session list */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredSessionList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    void updateFilteredSessionList(Predicate\u003cSession\u003e predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    void updateFilteredStudentRecordList(Predicate\u003cStudentRecord\u003e predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Updates the filter of the filtered student list to show the students with the lowest score."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    void showLowestScoringStudents();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Marks the attendance of the given student record {@code target} with the given {@code attendanceType}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The student must exist in the student list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void markStudentRecord(StudentRecord target, AttendanceType attendanceType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    void markStudentWithNusnetId(NusnetId nusnetId, AttendanceType attendanceType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Marks the attendances of all {@code studentRecords} with the given {@code attendanceType}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void markAllStudentRecords(List\u003cStudentRecord\u003e studentRecords, AttendanceType attendanceType);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Marks the attendance of the given student {@code target} with the given {@code attendanceType}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * The student must exist in the student list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreStudent(StudentRecord target, double score);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreStudentWithNusnetId(NusnetId nusnetId, double score);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Marks the attendances of all {@code students} with the given {@code attendanceType}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreAllStudents(List\u003cStudentRecord\u003e students, double score);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Updates the corresponding attendance statuses with the Attendances in the given list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void updateStudentRecords(List\u003cStudentRecord\u003e studentRecords);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Updates the filter of the filtered student list to show a random student."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    void showRandomStudent(Random random);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Clears the attendance statuses of all students in the student list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    void clearAttendance();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    SimpleObjectProperty\u003cSession\u003e getCurrentSession();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 17,
      "sc-arecrow": 46,
      "jflim98": 16,
      "josuaaah": 32,
      "jayarengam": 33,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.record.ScoreEqualsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordEqualsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.EmptySessionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.NoSessionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.NoSessionSelectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Represents the in-memory model of the student list data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final Taskmaster taskmaster;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final FilteredList\u003cSession\u003e filteredSessions;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private FilteredList\u003cStudentRecord\u003e filteredStudentRecords;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Predicate\u003cStudentRecord\u003e studentRecordPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Initializes a ModelManager with the given Taskmaster, SessionList, and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public ModelManager(ReadOnlyTaskmaster taskmaster, List\u003cSession\u003e sessionList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireAllNonNull(taskmaster, userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        logger.fine(\"Initializing with student list: \" + taskmaster + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.taskmaster \u003d new Taskmaster(taskmaster);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.taskmaster.setSessions(sessionList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(this.taskmaster.getStudentList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        filteredSessions \u003d new FilteredList\u003c\u003e(this.taskmaster.getSessionList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        filteredStudentRecords \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        studentRecordPredicate \u003d PREDICATE_SHOW_ALL_STUDENT_RECORDS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public ModelManager(ReadOnlyTaskmaster taskmaster, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this(taskmaster, taskmaster.getSessionList(), userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this(new Taskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Path getTaskmasterFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return userPrefs.getTaskmasterFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setTaskmasterFilePath(Path taskmasterFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(taskmasterFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        userPrefs.setTaskmasterFilePath(taskmasterFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Taskmaster \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setTaskmaster(ReadOnlyTaskmaster taskmaster) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.taskmaster.resetData(taskmaster);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ReadOnlyTaskmaster getTaskmaster() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return taskmaster;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        taskmaster.setSessions(sessions);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void deleteSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        taskmaster.deleteSession(sessionName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        updateFilteredSessionList(PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void addSession(Session session) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        updateFilteredSessionList(PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        filteredStudentRecords \u003d null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskmaster.addSession(session);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        changeSession(session.getSessionName());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Changes the Session to the Session with that name."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void changeSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (taskmaster.inSession() \u0026\u0026 sessionName.equals(taskmaster.currentSessionName())) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            filteredStudentRecords.setPredicate(PREDICATE_SHOW_ALL_STUDENT_RECORDS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "             * Note that the implementation of this method requires that the filteredStudentRecords field is updated"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "             * first, as changing the Session triggers the UI listener to call the getFilteredStudentRecordList, hence"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "             * it must be loaded first."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "             */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            assert taskmaster.hasSession(sessionName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            studentRecordPredicate \u003d PREDICATE_SHOW_ALL_STUDENT_RECORDS;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            // Update filteredStudentRecords before Session is changed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            filteredStudentRecords \u003d new FilteredList\u003c\u003e(taskmaster.getSession(sessionName).getStudentRecords());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            taskmaster.changeSession(sessionName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Switches TAskmaster to student list view."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void showStudentList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        filteredStudentRecords \u003d null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.showStudentList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return taskmaster.hasSession(session);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean hasSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return taskmaster.hasSession(sessionName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return taskmaster.hasStudent(student);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.removeStudent(target);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.addStudent(student);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markStudentRecord(StudentRecord target, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireAllNonNull(target, attendanceType);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.markStudentRecord(target, attendanceType);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void markStudentWithNusnetId(NusnetId nusnetId, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        requireAllNonNull(nusnetId, attendanceType);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskmaster.markStudentWithNusnetId(nusnetId, attendanceType);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreStudent(StudentRecord target, double score) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireAllNonNull(target, score);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        taskmaster.scoreStudent(target, score);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreStudentWithNusnetId(NusnetId nusnetId, double score) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireAllNonNull(nusnetId, score);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        taskmaster.scoreStudentWithNusnetId(nusnetId, score);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreAllStudents(List\u003cStudentRecord\u003e students, double score) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        List\u003cNusnetId\u003e nusnetIds \u003d students"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .filter(s -\u003e s.getAttendanceType() \u003d\u003d AttendanceType.PRESENT)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .map(StudentRecord::getNusnetId)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        taskmaster.scoreAllStudents(nusnetIds, score);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markAllStudentRecords(List\u003cStudentRecord\u003e studentRecords, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cNusnetId\u003e nusnetIds \u003d studentRecords"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .map(StudentRecord::getNusnetId)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.markAllStudentRecords(nusnetIds, attendanceType);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void clearAttendance() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskmaster.clearAttendance();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void updateStudentRecords(List\u003cStudentRecord\u003e studentRecords) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.updateStudentRecords(studentRecords);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code versionedTaskmaster}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.showStudentList();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code StudentRecord} backed by the internal list of"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * {@code versionedTaskmaster}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ObservableList\u003cStudentRecord\u003e getFilteredStudentRecordList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (taskmaster.getSessionList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (getCurrentSession().isNull().get()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (filteredStudentRecords \u003d\u003d null) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            filteredStudentRecords \u003d new FilteredList\u003c\u003e(taskmaster.getCurrentSession().get().getStudentRecords());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            studentRecordPredicate \u003d PREDICATE_SHOW_ALL_STUDENT_RECORDS;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        filteredStudentRecords.setPredicate(studentRecordPredicate);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return filteredStudentRecords;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return filteredSessions;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        filteredSessions.setPredicate(predicate);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void updateFilteredStudentRecordList(Predicate\u003cStudentRecord\u003e predicate) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!taskmaster.inSession()) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        studentRecordPredicate \u003d predicate;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        filteredStudentRecords.setPredicate(predicate);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void showRandomStudent(Random random) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        FilteredList\u003cStudentRecord\u003e temp \u003d new FilteredList\u003c\u003e(taskmaster.getStudentRecordList());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        temp.setPredicate(PREDICATE_SHOW_ALL_PRESENT_STUDENT_RECORDS);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            int index \u003d random.nextInt(temp.size());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            StudentRecord randomRecord \u003d temp.get(index);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            updateFilteredStudentRecordList(new StudentRecordEqualsPredicate(randomRecord));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            throw new EmptySessionException();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void showLowestScoringStudents() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        double lowestScore \u003d taskmaster.getLowestScore();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        studentRecordPredicate \u003d new ScoreEqualsPredicate(lowestScore);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        updateFilteredStudentRecordList(studentRecordPredicate);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Current Session Accessor \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public SimpleObjectProperty\u003cSession\u003e getCurrentSession() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return this.taskmaster.getCurrentSession();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return taskmaster.equals(other.taskmaster)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                \u0026\u0026 filteredSessions.equals(other.filteredSessions)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                \u0026\u0026 ((filteredStudentRecords \u003d\u003d null \u0026\u0026 other.filteredStudentRecords \u003d\u003d null)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        || filteredStudentRecords.equals(filteredStudentRecords));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 29,
      "sc-arecrow": 79,
      "jflim98": 38,
      "josuaaah": 39,
      "jayarengam": 81,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/ReadOnlyTaskmaster.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Unmodifiable view of an student list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public interface ReadOnlyTaskmaster {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    ObservableList\u003cSession\u003e getSessionList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns an unmodifiable view of the list of students\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * attendances in the current session, represented as"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code StudentRecord}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ObservableList\u003cStudentRecord\u003e getStudentRecordList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 15,
      "josuaaah": 9,
      "jayarengam": 3
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Path getTaskmasterFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Path getSessionListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 1,
      "jayarengam": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/Taskmaster.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionListManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.NoSessionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.NoSessionSelectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Wraps all data at the Taskmaster level"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class Taskmaster implements ReadOnlyTaskmaster {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    protected SimpleObjectProperty\u003cSession\u003e currentSession;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionList sessions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * sometimes used to avoid duplication between constructors."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * other ways to avoid duplication among constructors."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession \u003d new SimpleObjectProperty\u003cSession\u003e() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions \u003d SessionListManager.of(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Taskmaster() {}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates an Taskmaster using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Taskmaster(ReadOnlyTaskmaster toBeCopied) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /* List Overwrite Operations */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.setValue(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Replaces the contents of the session list with {@code sessions}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code sessions} must not contain duplicate sessions."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.sessions.setSessions(sessions);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Resets the existing data of this {@code Taskmaster} with {@code newData}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void resetData(ReadOnlyTaskmaster newData) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        setSessions(newData.getSessionList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.setValue(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /* Session-Level Operations */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Deletes the session with {@code sessionName}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code sessionName} must already exist in the session list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void deleteSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.setValue(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.delete(sessionName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Adds a session to the session list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * The session must not already exist in the session list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void addSession(Session session) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        sessions.add(session);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Changes the current session of this {@code Taskmaster} to a previously"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * created session with name {@code sessionName}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void changeSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assert sessions.contains(sessionName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        currentSession.setValue(sessions.get(sessionName));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Switches {@code Taskmaster} to the student list view."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void showStudentList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        currentSession.setValue(null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if {@code session} exists in the session list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return sessions.contains(session);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if a session with {@code sessionName} exists in the session list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean hasSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(sessionName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return sessions.contains(sessionName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns the Session with the sessionName"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Session getSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return sessions.get(sessionName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /* Student-Level Operations */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the student list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Adds a student to the student list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The student must not already exist in the student list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.setValue(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        students.add(student);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code target} must exist in the student list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * the student list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.setValue(null);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Removes {@code key} from this {@code Taskmaster}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code key} must exist in the student list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.setValue(null);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Marks the attendance of a {@code target} student with {@code attendanceType} in the current session."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionException If the session list is empty."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionSelectedException If no session has been selected."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markStudentRecord(StudentRecord target, AttendanceType attendanceType)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throws NoSessionException, NoSessionSelectedException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assert target !\u003d null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assert attendanceType !\u003d null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (!sessions.isEmpty() \u0026\u0026 currentSession.get() \u003d\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.get().markStudentAttendance(target.getNusnetId(), attendanceType);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Marks the attendance of a student given the {@code nusnetId}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * with {@code attendanceType} in the current session."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionException If the session list is empty."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionSelectedException If no session has been selected."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void markStudentWithNusnetId(NusnetId nusnetId, AttendanceType attendanceType)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throws NoSessionException, NoSessionSelectedException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assert nusnetId !\u003d null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assert attendanceType !\u003d null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (!sessions.isEmpty() \u0026\u0026 currentSession.get() \u003d\u003d null) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.get().markStudentAttendance(nusnetId, attendanceType);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Marks the attendance of all student records represented by {@code nusnetIds} in the {@code studentRecordList}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * of the {@code currentSession}, with the given {@code attendanceType}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionException If the session list is empty."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionSelectedException If no session has been selected."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markAllStudentRecords(List\u003cNusnetId\u003e nusnetIds, AttendanceType attendanceType)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throws NoSessionException, NoSessionSelectedException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assert nusnetIds !\u003d null;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assert attendanceType !\u003d null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (!sessions.isEmpty() \u0026\u0026 currentSession.get() \u003d\u003d null) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        currentSession.get().markAllStudentAttendances(nusnetIds, attendanceType);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Updates participation marks of a {@code target} student with score {@code score} in the current session."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws NoSessionException If the session list is empty."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws NoSessionSelectedException If no session has been selected."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreStudent(StudentRecord target, double score)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throws NoSessionException, NoSessionSelectedException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assert target !\u003d null;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } else if (currentSession.isNull().get()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.get().scoreStudentParticipation(target.getNusnetId(), score);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Updates participation marks of a student given the {@code nusnetId}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * with score {@code score} in the current session."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws NoSessionException If the session list is empty."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws NoSessionSelectedException If no session has been selected."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreStudentWithNusnetId(NusnetId nusnetId, double score)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throws NoSessionException, NoSessionSelectedException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assert nusnetId !\u003d null;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } else if (currentSession.isNull().get()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.get().scoreStudentParticipation(nusnetId, score);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Updates participation marks of all students represented by {@code nusnetIds} in the {@code studentRecordList}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * of the {@code currentSession}, with the given {@code attendanceType}."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws NoSessionException If the session list is empty."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws NoSessionSelectedException If no session has been selected."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreAllStudents(List\u003cNusnetId\u003e nusnetIds, double score)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throws NoSessionException, NoSessionSelectedException {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assert nusnetIds !\u003d null;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } else if (currentSession.isNull().get()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.get().scoreAllParticipation(nusnetIds, score);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns the lowest score amongst all students in the student list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public double getLowestScore() throws NoSessionException, NoSessionSelectedException {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } else if (currentSession.isNull().get()) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return currentSession.get().getLowestScore();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /* Util Methods */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns an unmodifiable view of the {@code StudentRecordList} of the current session."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionException If the session list is empty."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionSelectedException If no session has been selected."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public ObservableList\u003cStudentRecord\u003e getStudentRecordList()"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throws NoSessionException, NoSessionSelectedException {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (!sessions.isEmpty() \u0026\u0026 currentSession.get() \u003d\u003d null) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return currentSession.get().getStudentRecords();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public ObservableList\u003cSession\u003e getSessionList() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return sessions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Sets the {@code AttendanceType} of all {@code StudentRecords} to NO_RECORD in the current session."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionException If the session list is empty."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionSelectedException If no session has been selected."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void clearAttendance() throws NoSessionException, NoSessionSelectedException {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (!sessions.isEmpty() \u0026\u0026 currentSession.get() \u003d\u003d null) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.get().clearAttendance();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Updates the {@code StudentRecordList} of the current session with the data in {@code studentRecords}."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws StudentNotFoundException If the operation is unable to find the specified student."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionException If the session list is empty."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws NoSessionSelectedException If no session has been selected."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void updateStudentRecords(List\u003cStudentRecord\u003e studentRecords)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throws StudentNotFoundException, NoSessionException {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (sessions.isEmpty()) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionException();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (!sessions.isEmpty() \u0026\u0026 currentSession.get() \u003d\u003d null) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new NoSessionSelectedException();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.get().updateStudentRecords(studentRecords);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public boolean inSession() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return !this.currentSession.isNull().get();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public SessionName currentSessionName() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return this.currentSession.get().getSessionName();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                || (other instanceof Taskmaster // instanceof handles nulls"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 students.equals(((Taskmaster) other).students));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public SimpleObjectProperty\u003cSession\u003e getCurrentSession() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return this.currentSession;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 61,
      "sc-arecrow": 132,
      "josuaaah": 150,
      "jflim98": 37,
      "jayarengam": 44
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Path taskmasterFilePath \u003d Paths.get(\"data\" , \"taskmaster.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Path sessionListFilePath \u003d Paths.get(\"data\", \"session_list.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        setTaskmasterFilePath(newUserPrefs.getTaskmasterFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Path getTaskmasterFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return taskmasterFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setTaskmasterFilePath(Path taskmasterFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(taskmasterFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.taskmasterFilePath \u003d taskmasterFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return sessionListFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 taskmasterFilePath.equals(o.taskmasterFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return Objects.hash(guiSettings, taskmasterFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + taskmasterFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 10,
      "jayarengam": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/record/AttendanceType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public enum AttendanceType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    PRESENT(\"PRESENT\", \"#228B22\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ABSENT(\"ABSENT\", \"#B22222\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    NO_RECORD(\"NO RECORD\", \"#696969\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"StudentRecord type can only be \u0027present\u0027, \u0027absent\u0027 or \u0027empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final String color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private AttendanceType(String description, String color) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns true if a given string is a valid attendance type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static boolean isValidAttendanceType(String test) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            AttendanceType.valueOf(test);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public String getColor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return color;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 36,
      "josuaaah": 1
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/record/ClassParticipation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class ClassParticipation {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The score of a student needs to be a positive integer.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private double score \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Constructor method for Class Participation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Uses the default maximum score, which is 10"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * The initial score is set to 0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public ClassParticipation() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Constructor method for Class Participation using score"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Uses the default maximum score, which is 10"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * The score is set to the wanted score"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public ClassParticipation(double score) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assert score \u003e\u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Returns the class participation score as an double."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public double getRawScore() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String formattedScore \u003d String.format(\"%.2f\", score);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return \"Class Participation Score: \" + formattedScore;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!(other instanceof ClassParticipation)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ClassParticipation classPart \u003d (ClassParticipation) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return (this.score \u003d\u003d classPart.score);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 33,
      "sc-arecrow": 16,
      "josuaaah": 1,
      "jflim98": 1,
      "jayarengam": 6
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/record/ScoreEqualsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class ScoreEqualsPredicate implements Predicate\u003cStudentRecord\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private final double desiredScore;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public ScoreEqualsPredicate(double desiredScore) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.desiredScore \u003d desiredScore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean test(StudentRecord studentRecord) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return studentRecord.getAttendanceType().equals(AttendanceType.PRESENT)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 studentRecord.getClassParticipation().getRawScore() \u003d\u003d desiredScore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                \u0026\u0026 desiredScore \u003d\u003d ((ScoreEqualsPredicate) other).desiredScore); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 2,
      "jayarengam": 26
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/record/StudentRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Represents a record of a student in a session."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final String STRING_FORMAT \u003d \"%s|%s|%s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final NusnetId nusnetId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final AttendanceType attendanceType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final ClassParticipation classParticipation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The student is represented by their {@code nusnetId} and initially marked with {@code NO_RECORD}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentRecord(Name name, NusnetId nusnetId) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.nusnetId \u003d nusnetId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.attendanceType \u003d AttendanceType.NO_RECORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.classParticipation \u003d new ClassParticipation();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates an StudentRecord object with the AttendanceType already specified."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentRecord(Name name, NusnetId nusnetId, AttendanceType attendanceType,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                         ClassParticipation classParticipation) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.nusnetId \u003d nusnetId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.attendanceType \u003d attendanceType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.classParticipation \u003d classParticipation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public NusnetId getNusnetId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return nusnetId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public AttendanceType getAttendanceType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return attendanceType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ClassParticipation getClassParticipation() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return classParticipation;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public boolean isSameStudentAs(StudentRecord other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return this.nusnetId.equals(other.nusnetId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return String.format(STRING_FORMAT, nusnetId, attendanceType.name(), classParticipation);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!(other instanceof StudentRecord)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentRecord studentRecord \u003d (StudentRecord) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this.name.equals(studentRecord.name)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 this.nusnetId.equals(studentRecord.nusnetId)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 this.attendanceType.equals(studentRecord.attendanceType)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 this.classParticipation.equals(studentRecord.classParticipation);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 77,
      "josuaaah": 1,
      "jflim98": 4
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/record/StudentRecordEqualsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class StudentRecordEqualsPredicate implements Predicate\u003cStudentRecord\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final StudentRecord desiredStudentRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public StudentRecordEqualsPredicate(StudentRecord desiredStudentRecord) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.desiredStudentRecord \u003d desiredStudentRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public boolean test(StudentRecord studentRecord) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return this.desiredStudentRecord.isSameStudentAs(studentRecord);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                || (other instanceof StudentRecordEqualsPredicate) // instanceof handles nulls"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                \u0026\u0026 desiredStudentRecord.equals(((StudentRecordEqualsPredicate) other).desiredStudentRecord);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 24
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/record/StudentRecordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public interface StudentRecordList extends Iterable\u003cStudentRecord\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Marks the attendance of a student represented by their {@code nusnetId} with {@code attendanceType}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void markStudentAttendance(NusnetId nusnetId, AttendanceType attendanceType);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Marks the attendance of students represented by the list of {@code nusnetIds} with {@code attendanceType}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void markAllStudentAttendances(List\u003cNusnetId\u003e nusnetIds, AttendanceType attendanceType);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Updates participation score of a student represented by their {@code nusnetId} to {@code score}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreStudentParticipation(NusnetId nusnetId, double score);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Updates participation score of all students in the list of {@code nusnetIds} with {@code attendanceType}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreAllParticipation(List\u003cNusnetId\u003e nusnetIds, double score);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns the lowest score amongst all students in the student list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    double getLowestScore();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void setStudentRecords(StudentRecordListManager replacement);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Replaces the contents of this list with {@code studentRecords}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code studentRecords} must not contain duplicate students."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void setStudentRecords(List\u003cStudentRecord\u003e studentRecords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    ObservableList\u003cStudentRecord\u003e asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Iterator\u003cStudentRecord\u003e iterator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 11,
      "sc-arecrow": 35,
      "josuaaah": 1,
      "jayarengam": 4
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/record/StudentRecordListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Represents a list of students\u0027 attendance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentRecordListManager implements StudentRecordList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final ObservableList\u003cStudentRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final ObservableList\u003cStudentRecord\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Initialises an {@code StudentRecordListManager} with the given {@code students}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The attendance of each student is marked as {@code NO_RECORD}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static StudentRecordList of(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudentRecord\u003e studentRecords \u003d students"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .map(student -\u003e new StudentRecord(student.getName(), student.getNusnetId()))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentRecordList studentRecordList \u003d new StudentRecordListManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecordList.setStudentRecords(studentRecords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return studentRecordList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Marks the attendance of a student represented by their {@code nusnetId} with {@code attendanceType}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markStudentAttendance(NusnetId nusnetId, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireAllNonNull(nusnetId, attendanceType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            StudentRecord studentRecord \u003d internalList.get(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (studentRecord.getNusnetId().equals(nusnetId)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                EditStudentRecordDescriptor descriptor \u003d new EditStudentRecordDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                descriptor.setAttendanceType(attendanceType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                StudentRecord markedStudentRecord \u003d createEditedStudentRecord(studentRecord, descriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                internalList.set(i, markedStudentRecord);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                isFound \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!isFound) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Marks the attendance of students represented by the list of {@code nusnetIds} with {@code attendanceType}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markAllStudentAttendances(List\u003cNusnetId\u003e nusnetIds, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        for (NusnetId nusnetId : nusnetIds) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            markStudentAttendance(nusnetId, attendanceType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Updates participation score of a student represented by their {@code nusnetId} to {@code score}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreStudentParticipation(NusnetId nusnetId, double score) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireAllNonNull(nusnetId);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            StudentRecord studentRecord \u003d internalList.get(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            if (studentRecord.getNusnetId().equals(nusnetId)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                EditStudentRecordDescriptor descriptor \u003d new EditStudentRecordDescriptor();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                descriptor.setClassParticipation(new ClassParticipation(score));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                StudentRecord markedStudentRecord \u003d createEditedStudentRecord(studentRecord, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                internalList.set(i, markedStudentRecord);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                isFound \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (!isFound) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Updates participation score of all students in the list of {@code nusnetIds} with {@code attendanceType}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreAllParticipation(List\u003cNusnetId\u003e nusnetIds, double score) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        for (NusnetId nusnetId : nusnetIds) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            scoreStudentParticipation(nusnetId, score);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudentRecords(StudentRecordListManager replacement) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Replaces the contents of this list with {@code attendances}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code attendances} must not contain duplicate students."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudentRecords(List\u003cStudentRecord\u003e studentRecords) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireAllNonNull(studentRecords);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!studentsAreUnique(studentRecords)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        internalList.setAll(studentRecords);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns the lowest score amongst all students in the student list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public double getLowestScore() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        double lowestScore \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            StudentRecord studentRecord \u003d internalList.get(i);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (studentRecord.getAttendanceType().equals(AttendanceType.PRESENT)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                double score \u003d studentRecord.getClassParticipation().getRawScore();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                if (score \u003c lowestScore) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    lowestScore \u003d score;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return lowestScore;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates and returns a {@code StudentRecord} with the details of {@code studentRecordToEdit}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * edited with {@code editStudentRecordDescriptor}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Note that the {@code name} and {@code nusnetId} should not be edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static StudentRecord createEditedStudentRecord("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            StudentRecord studentRecordToEdit,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            StudentRecordListManager.EditStudentRecordDescriptor editStudentRecordDescriptor) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assert studentRecordToEdit !\u003d null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assert editStudentRecordDescriptor.isAnyFieldEdited();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        AttendanceType updatedAttendanceType \u003d editStudentRecordDescriptor.getAttendanceType()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .orElse(studentRecordToEdit.getAttendanceType());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ClassParticipation updatedClassParticipation \u003d editStudentRecordDescriptor.getClassParticipation()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .orElse(studentRecordToEdit.getClassParticipation());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new StudentRecord(studentRecordToEdit.getName(), studentRecordToEdit.getNusnetId(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                updatedAttendanceType, updatedClassParticipation);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ObservableList\u003cStudentRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Iterator\u003cStudentRecord\u003e iterator() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        for (StudentRecord studentRecord : internalList) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            result +\u003d studentRecord.toString() + \"\\n\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                || (other instanceof StudentRecordListManager // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 internalList.equals(((StudentRecordListManager) other).internalList));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns true if {@code studentRecords} contains only unique students."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudentRecord\u003e studentRecords) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        for (int i \u003d 0; i \u003c studentRecords.size() - 1; i++) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            for (int j \u003d i + 1; j \u003c studentRecords.size(); j++) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                if (studentRecords.get(i).getNusnetId().equals(studentRecords.get(j).getNusnetId())) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Stores the details to edit the student record with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * corresponding field value of the student record. Note that the name and nusnetId cannot be changed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static class EditStudentRecordDescriptor {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        private AttendanceType attendanceType;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        private ClassParticipation classParticipation;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public EditStudentRecordDescriptor() {}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public EditStudentRecordDescriptor(EditStudentRecordDescriptor toCopy) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            setAttendanceType(toCopy.attendanceType);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            setClassParticipation((toCopy.classParticipation));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return CollectionUtil.isAnyNonNull(attendanceType, classParticipation);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void setAttendanceType(AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            this.attendanceType \u003d attendanceType;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public Optional\u003cAttendanceType\u003e getAttendanceType() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return Optional.ofNullable(attendanceType);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void setClassParticipation(ClassParticipation classParticipation) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            this.classParticipation \u003d classParticipation;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public Optional\u003cClassParticipation\u003e getClassParticipation() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return Optional.ofNullable(classParticipation);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (!(other instanceof StudentRecordListManager.EditStudentRecordDescriptor)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            StudentRecordListManager.EditStudentRecordDescriptor e \u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                    (StudentRecordListManager.EditStudentRecordDescriptor) other;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return getAttendanceType().equals(e.getAttendanceType())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                    \u0026\u0026 getClassParticipation().equals(e.getClassParticipation());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 43,
      "sc-arecrow": 225,
      "josuaaah": 1,
      "jayarengam": 18
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/Session.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordListManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Represents a tutorial session conducted by a teaching assistant."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class Session {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private static final String STRING_FORMAT \u003d \"%s|%s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionName sessionName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionDateTime sessionDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final StudentRecordList studentRecords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * A session is represented by its {@code sessionName},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * stores date and time data and a list of student records."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public Session(SessionName sessionName,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                   SessionDateTime sessionDateTime,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                   StudentRecordList studentRecords) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.sessionDateTime \u003d sessionDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.studentRecords \u003d studentRecords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Creates a session object with a {@code sessionName}, {@code sessionDateTime} and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * a list of students."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public Session(SessionName sessionName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                   SessionDateTime sessionDateTime,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                   List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.sessionDateTime \u003d sessionDateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.studentRecords \u003d StudentRecordListManager.of(students);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public SessionName getSessionName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return sessionName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public SessionDateTime getSessionDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return sessionDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns list of student records as an unmodifiable {@code ObservableList}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public ObservableList\u003cStudentRecord\u003e getStudentRecords() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return studentRecords.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Marks the attendance of a student with the given {@code nusnetId} in the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * student record list with {@code attendanceType}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void markStudentAttendance(NusnetId nusnetId, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assert nusnetId !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assert attendanceType !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        studentRecords.markStudentAttendance(nusnetId, attendanceType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markAllStudentAttendances(List\u003cNusnetId\u003e nusnetIds, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecords.markAllStudentAttendances(nusnetIds, attendanceType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Marks the attendance of a student with the given {@code nusnetId} in the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * student record list with {@code attendanceType}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreStudentParticipation(NusnetId nusnetId, double score) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assert nusnetId !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        studentRecords.scoreStudentParticipation(nusnetId, score);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void scoreAllParticipation(List\u003cNusnetId\u003e nusnetIds, double score) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        studentRecords.scoreAllParticipation(nusnetIds, score);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns the lowest score amongst all students in the student list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public double getLowestScore() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return studentRecords.getLowestScore();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Sets the {@code AttendanceType} of all {@code StudentRecords} to NO_RECORD."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void clearAttendance() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecords.markAllStudentAttendances("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                studentRecords.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                        .map(StudentRecord::getNusnetId).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                AttendanceType.NO_RECORD);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Updates the {@code StudentRecordList} with the data in {@code studentRecords}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @throws StudentNotFoundException"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void updateStudentRecords(List\u003cStudentRecord\u003e studentRecords) throws StudentNotFoundException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        for (StudentRecord studentRecord: studentRecords) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            this.studentRecords.markStudentAttendance("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    studentRecord.getNusnetId(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    studentRecord.getAttendanceType());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return String.format(STRING_FORMAT, sessionName.toString(), sessionDateTime);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if both sessions have the identical attributes."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (!(other instanceof Session)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session otherSession \u003d (Session) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return otherSession.getSessionName().equals(getSessionName())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                \u0026\u0026 otherSession.getSessionDateTime().equals(getSessionDateTime())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                \u0026\u0026 otherSession.getStudentRecords().equals(getStudentRecords());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 13,
      "sc-arecrow": 5,
      "josuaaah": 117,
      "jayarengam": 7
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/SessionDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class SessionDateTime {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MM-uuuu HHmm\").withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final DateTimeFormatter DISPLAY_FORMATTER \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            DateTimeFormatter.ofPattern(\"HH:mm (EEE) \\nd LLL yyyy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            \"Date and time should be valid and in the format \u0027dd-MM-yyyy HHmm\u0027.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Constructs a {@code SessionDateTime}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @param localDateTime The date and time of a session."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public SessionDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return this.localDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public String getDateTimeString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return localDateTime.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public String getDisplayDateTimeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return localDateTime.format(DISPLAY_FORMATTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return localDateTime.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                || (other instanceof SessionDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                \u0026\u0026 localDateTime.equals(((SessionDateTime) other).getLocalDateTime())); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 12,
      "josuaaah": 36,
      "jflim98": 3
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/SessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public interface SessionList extends Iterable\u003cSession\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    Session get(SessionName sessionName) throws SessionNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    int getNumberOfSessions();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if the session list contains {@code session}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    boolean contains(Session session);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    boolean contains(SessionName sessionName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    void add(Session toAdd);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    void delete(SessionName toDelete);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if there are no sessions in the session list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    void setSessions(SessionListManager replacement);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Replaces the contents of this list with {@code sessions}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code sessions} must not contain duplicate sessions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    void setSessions(List\u003cSession\u003e sessions);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns the session list as an unmodifiable {@code ObservableList}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    ObservableList\u003cSession\u003e asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 43
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/SessionListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.DuplicateSessionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Represents a list of sessions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class SessionListManager implements SessionList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final ObservableList\u003cSession\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final ObservableList\u003cSession\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Initialises an {@code SessionListManager} with the given {@code sessions}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static SessionList of(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList sessionList \u003d new SessionListManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessionList.setSessions(sessions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return sessionList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public Session get(SessionName sessionName) throws SessionNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        for (int i \u003d 0; i \u003c getNumberOfSessions(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            if (internalList.get(i).getSessionName().equals(sessionName)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                return internalList.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public int getNumberOfSessions() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if the session list contains {@code session}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean contains(Session session) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return internalList.contains(session);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if the session list contains a session with {@code sessionName}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean contains(SessionName sessionName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        for (Session session : internalList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            if (session.getSessionName().equals(sessionName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if there are no sessions in the session list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return getNumberOfSessions() \u003d\u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void add(Session toAdd) throws DuplicateSessionException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (contains(toAdd.getSessionName())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void delete(SessionName toDelete) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (!contains(toDelete)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        internalList.removeIf(session -\u003e session.getSessionName().equals(toDelete));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions(SessionListManager replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Replaces the contents of this list with {@code sessions}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * {@code sessions} must not contain duplicate sessions."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireAllNonNull(sessions);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        if (!sessionsAreUnique(sessions)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        internalList.setAll(sessions);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if {@code sessions} contains only unique sessions."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private boolean sessionsAreUnique(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        for (int i \u003d 0; i \u003c sessions.size() - 1; i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            for (int j \u003d i + 1; j \u003c sessions.size(); j++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                if (sessions.get(i).equals(sessions.get(j))) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns the session list as an unmodifiable {@code ObservableList}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public ObservableList\u003cSession\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public Iterator\u003cSession\u003e iterator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                || (other instanceof SessionListManager // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                \u0026\u0026 internalList.equals(((SessionListManager) other).internalList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 135,
      "jayarengam": 8
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/SessionName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Represents the name of a session conducted by a teaching assistant."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class SessionName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String SESSION_NOT_FOUND_NAME \u003d \"SESSION_NOT_FOUND\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Constructs a {@code SessionName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public SessionName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static SessionName getSessionNotFoundName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return new SessionName(SESSION_NOT_FOUND_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                || (other instanceof SessionName // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                \u0026\u0026 name.equals(((SessionName) other).name)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 63
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/exceptions/DuplicateSessionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Signals that the operation will result in duplicate Sessions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Sessions are considered duplicates if they have the same identity."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class DuplicateSessionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public DuplicateSessionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        super(\"Operation would result in duplicate sessions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 11
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/exceptions/EmptySessionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package seedu.taskmaster.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class EmptySessionException extends SessionException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String message \u003d \"The session list has no students!\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 9
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/exceptions/NoSessionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Signals that the operation cannot be executed as the SessionList is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class NoSessionException extends SessionException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final String message \u003d \"There are no sessions yet!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public NoSessionException() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 16
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/exceptions/NoSessionSelectedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class NoSessionSelectedException extends SessionException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final String message \u003d \"Please select a session first!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public NoSessionSelectedException() {}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 13
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/exceptions/SessionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public abstract class SessionException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public abstract String getMessage();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 5
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/session/exceptions/SessionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " * Signals that the operation is unable to find the specified session."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class SessionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 6
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Represents a Student\u0027s address in the student list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 1,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Represents a Student\u0027s email in the student list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Represents a Student\u0027s name in the student list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String STUDENT_NOT_FOUND_NAME \u003d \"STUDENT_NOT_FOUND\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static Name getStudentNotFoundName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new Name(STUDENT_NOT_FOUND_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 5,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 4,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/NusnetId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNusnetId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class NusnetId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            \"NusnetId needs to start with e, followed by 0, followed by 6 more numerical digits.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^e0[0-9]{6}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Constructs an {@code NusnetId}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public NusnetId(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        checkArgument(isValidNusnetId(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static boolean isValidNusnetId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                || (other instanceof NusnetId // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \u0026\u0026 value.equals(((NusnetId) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 13,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Represents a Student in the student list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private final Telegram telegram;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private final NusnetId nusnetId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Student(Name name, Telegram telegram, Email email, NusnetId nusnetId, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireAllNonNull(name, telegram, email, nusnetId, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.nusnetId \u003d nusnetId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Telegram getTelegram() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return telegram;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public NusnetId getNusnetId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return nusnetId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (otherStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return otherStudent.getNusnetId().equals(getNusnetId());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \u0026\u0026 otherStudent.getTelegram().equals(getTelegram())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \u0026\u0026 otherStudent.getNusnetId().equals(getNusnetId())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return Objects.hash(name, telegram, email, nusnetId, tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .append(\" Telegram: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .append(getTelegram())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .append(\" NusnetId: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .append(getNusnetId())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 20,
      "sc-arecrow": 18,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/Telegram.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " * Represents a Student\u0027s telegram username in the student list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTelegram(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class Telegram {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            \"Telegram numbers should consist of only \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            + \"alphanumeric characters and underscores with length between 5 and 32 characters inclusive.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z0-9_]{5,32}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Constructs a {@code Telegram}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @param telegramAccount A valid telegram account."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Telegram(String telegramAccount) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        requireNonNull(telegramAccount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        checkArgument(isValidTelegram(telegramAccount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        value \u003d telegramAccount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Returns true if a given string is a valid telegram account."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static boolean isValidTelegram(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                || (other instanceof Telegram // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \u0026\u0026 value.equals(((Telegram) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 54
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * updating of students uses Student#isSameStudent(Student) for equality so as to ensure that the student being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * or updated is unique in terms of identity in the UniqueStudentList. However, the removal of a student uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Student#equals(Object) so as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 4,
      "sc-arecrow": 130,
      "jflim98": 3
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "sc-arecrow": 10
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "sc-arecrow": 5
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Represents a Tag in the student list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Contains utility methods for populating {@code Taskmaster} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new Student("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    new Telegram(\"alexyeoh\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    new NusnetId(\"e0456456\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    getTagSet(\"smartalec\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new Student("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Name(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    new Telegram(\"notverynice\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    new NusnetId(\"e0789789\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    getTagSet(\"alwayslate\", \"weak\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new Student("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    new Telegram(\"charlotte_o\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    new NusnetId(\"e0987897\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    getTagSet(\"good\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new Student("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Name(\"David Li\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    new Telegram(\"david_light\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    new NusnetId(\"e0321321\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    getTagSet(\"slacker\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new Student("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Name(\"Irfan Ibrahim\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    new Telegram(\"irfan\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    new NusnetId(\"e0984984\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    getTagSet(\"smart\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new Student("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Name(\"Roy Balakrishnan\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    new Telegram(\"roy_bk\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    new NusnetId(\"e0984983\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    getTagSet(\"smart\"))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static ReadOnlyTaskmaster getSampleTaskmaster() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster sampleTaskmaster \u003d new Taskmaster();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            sampleTaskmaster.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session sampleSession \u003d new Session("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Sample session\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 1, 1, 12, 0)),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                Arrays.asList(getSampleStudents()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sampleTaskmaster.addSession(sampleSession);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return sampleTaskmaster;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 14,
      "sc-arecrow": 5,
      "josuaaah": 32,
      "jflim98": 6,
      "jayarengam": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private final String telegram;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private final String nusnetId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"telegram\") String telegram,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                              @JsonProperty(\"email\") String email, @JsonProperty(\"nusnetId\") String nusnetId,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.nusnetId \u003d nusnetId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        telegram \u003d source.getTelegram().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        nusnetId \u003d source.getNusnetId().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (telegram \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Telegram.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (!Telegram.isValidTelegram(telegram)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new IllegalValueException(Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        final Telegram modelTelegram \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (nusnetId \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, NusnetId.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (!NusnetId.isValidNusnetId(nusnetId)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new IllegalValueException(NusnetId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        final NusnetId modelNusnetId \u003d new NusnetId(nusnetId);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new Student(modelName, modelTelegram, modelEmail, modelNusnetId, modelTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 29,
      "sc-arecrow": 12,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/JsonAdaptedStudentRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.ClassParticipation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": " * Jackson-friendly version of {@link StudentRecord}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "class JsonAdaptedStudentRecord {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private final String nusnetId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private final String attendanceType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private final String classParticipation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public JsonAdaptedStudentRecord(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                    @JsonProperty(\"nusnetId\") String nusnetId,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                    @JsonProperty(\"telegram\") String attendanceType,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                    @JsonProperty(\"classParticipation\") String classParticipation) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.nusnetId \u003d nusnetId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.attendanceType \u003d attendanceType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.classParticipation \u003d classParticipation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Converts a given {@code StudentRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public JsonAdaptedStudentRecord(StudentRecord source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        nusnetId \u003d source.getNusnetId().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        attendanceType \u003d source.getAttendanceType().name();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        classParticipation \u003d String.valueOf(source.getClassParticipation().getRawScore());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code StudentRecordListManager} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (nusnetId \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    NusnetId.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (!NusnetId.isValidNusnetId(nusnetId)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new IllegalValueException(NusnetId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (attendanceType \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    AttendanceType.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (!AttendanceType.isValidAttendanceType(attendanceType)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new IllegalValueException(AttendanceType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        final NusnetId modelNusnetId \u003d new NusnetId(nusnetId);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        final AttendanceType modelAttendanceType \u003d AttendanceType.valueOf(attendanceType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        final ClassParticipation classParticipation \u003d new ClassParticipation("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                Double.parseDouble(this.classParticipation));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return new StudentRecord(modelName, modelNusnetId, modelAttendanceType, classParticipation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "sc-arecrow": 7,
      "josuaaah": 2,
      "jayarengam": 80
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/JsonSerializableSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordListManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": " * Jackson-friendly version of {@link Session}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "@JsonRootName(value \u003d \"session\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "class JsonSerializableSession {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"StudentRecord list contains duplicate NusnetId(s).\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final String DATE_TIME_FORMAT \u003d \"dd-MM-yyyy HH:mm\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private final String sessionName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private final String sessionDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private final List\u003cJsonAdaptedStudentRecord\u003e records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Constructs a {@code JsonSerializablesession} from the given parameters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public JsonSerializableSession(@JsonProperty(\"sessionName\") String sessionName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                   @JsonProperty(\"sessionDateTime\") String sessionDateTime,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                   @JsonProperty(\"records\") List\u003cJsonAdaptedStudentRecord\u003e records) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assert sessionName !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assert sessionDateTime !\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assert records !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.sessionName \u003d sessionName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.sessionDateTime \u003d sessionDateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.records.addAll(records);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Converts a given {@code Session} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public JsonSerializableSession(Session source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.sessionName \u003d source.getSessionName().name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.sessionDateTime \u003d source.getSessionDateTime().getDateTimeString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.records.addAll(source.getStudentRecords().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    .map(JsonAdaptedStudentRecord::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Converts this object into a Session for use by the model."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Session toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        SessionDateTime newDateTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        List\u003cStudentRecord\u003e studentRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        List\u003cNusnetId\u003e nusnetIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        for (JsonAdaptedStudentRecord jsonAdaptedStudentRecord : records) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            StudentRecord modelAttendance \u003d jsonAdaptedStudentRecord.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            // check for duplicates"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            NusnetId nusnetId \u003d modelAttendance.getNusnetId();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (nusnetIds.contains(nusnetId)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            nusnetIds.add(modelAttendance.getNusnetId());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            studentRecords.add(modelAttendance);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        StudentRecordList newRecordList \u003d new StudentRecordListManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        newRecordList.setStudentRecords(studentRecords);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        SessionName newSessionName \u003d new SessionName(sessionName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            newDateTime \u003d new SessionDateTime("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    LocalDateTime.parse(sessionDateTime, DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new IllegalValueException(\"Error when parsing SessionDateTime.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return new Session(newSessionName, newDateTime, newRecordList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "jayarengam": 101
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/JsonSerializableSessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionListManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": " * An Immutable SessionList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "@JsonRootName(value \u003d \"sessionList\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "class JsonSerializableSessionList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSION \u003d \"Students list contains duplicate session name(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private final List\u003cJsonSerializableSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskmaster} with the given sessions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public JsonSerializableSessionList(@JsonProperty(\"sessions\") List\u003cJsonSerializableSession\u003e sessions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assert sessions !\u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.sessions.addAll(sessions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskmaster} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskmaster}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public JsonSerializableSessionList(ReadOnlyTaskmaster source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        sessions.addAll(source.getSessionList().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    .map(JsonSerializableSession::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Converts this student list into the model\u0027s {@code Taskmaster} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public SessionList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        SessionList sessionList \u003d new SessionListManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        for (JsonSerializableSession jsonSerializableSession : sessions) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            Session session \u003d jsonSerializableSession.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (sessionList.contains(session.getSessionName())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            sessionList.add(session);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return sessionList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 64
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/JsonSerializableTaskmaster.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * An Immutable Taskmaster that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "@JsonRootName(value \u003d \"taskmaster\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "class JsonSerializableTaskmaster {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskmaster} with the given students."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public JsonSerializableTaskmaster(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assert students !\u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskmaster} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskmaster}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public JsonSerializableTaskmaster(ReadOnlyTaskmaster source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Converts this student list into the model\u0027s {@code Taskmaster} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Taskmaster toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Taskmaster taskmaster \u003d new Taskmaster();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (taskmaster.hasStudent(student)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            taskmaster.addStudent(student);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return taskmaster;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "sc-arecrow": 55,
      "jayarengam": 1
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/JsonTaskmasterStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * A class to access Taskmaster data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class JsonTaskmasterStorage implements TaskmasterStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskmasterStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Path taskmasterFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Path sessionListFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Initialises the Storage object which will use the given file paths."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public JsonTaskmasterStorage(Path taskmasterFilePath, Path sessionListFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.taskmasterFilePath \u003d taskmasterFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.sessionListFilePath \u003d sessionListFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Path getTaskmasterFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return taskmasterFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return sessionListFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Optional\u003cReadOnlyTaskmaster\u003e readTaskmaster() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return readTaskmaster(taskmasterFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Similar to {@link #readTaskmaster()}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Optional\u003cReadOnlyTaskmaster\u003e readTaskmaster(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Optional\u003cJsonSerializableTaskmaster\u003e jsonTaskmaster \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                filePath, JsonSerializableTaskmaster.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!jsonTaskmaster.isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return Optional.of(jsonTaskmaster.get().toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void saveTaskmaster(ReadOnlyTaskmaster taskmaster) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        saveTaskmaster(taskmaster, taskmasterFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Similar to {@link #saveTaskmaster(ReadOnlyTaskmaster)}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void saveTaskmaster(ReadOnlyTaskmaster taskmaster, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        requireNonNull(taskmaster);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskmaster(taskmaster), filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void saveSessionList(ReadOnlyTaskmaster taskmaster) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        saveSessionList(taskmaster, sessionListFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Saves the SessionList in a Taskmaster to the filepath specified."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void saveSessionList(ReadOnlyTaskmaster taskmaster, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        requireNonNull(taskmaster);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSessionList(taskmaster), filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * See {@link #readSessionList(Path)}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Optional\u003cSessionList\u003e readSessionList() throws DataConversionException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return readSessionList(sessionListFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Gets SessionList from the filePath specified."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Optional\u003cSessionList\u003e readSessionList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Optional\u003cJsonSerializableSessionList\u003e jsonSerializableSessionList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                filePath, JsonSerializableSessionList.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (!jsonSerializableSessionList.isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return Optional.of(jsonSerializableSessionList.get().toModelType());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 7,
      "sc-arecrow": 16,
      "jayarengam": 65,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public interface Storage extends TaskmasterStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Path getTaskmasterFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Optional\u003cReadOnlyTaskmaster\u003e readTaskmaster() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void saveTaskmaster(ReadOnlyTaskmaster taskmaster) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    boolean fileExists(Path filepath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "sc-arecrow": 4,
      "jayarengam": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Manages storage of Taskmaster data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static final String FILENAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            \"Filenames should only be a string of alphanumeric characters with no spaces, and cannot be blank.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\w*\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private TaskmasterStorage taskmasterStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code TaskmasterStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StorageManager(TaskmasterStorage taskmasterStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.taskmasterStorage \u003d taskmasterStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Taskmaster methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Path getTaskmasterFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return taskmasterStorage.getTaskmasterFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Path getSessionListFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return taskmasterStorage.getSessionListFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Optional\u003cReadOnlyTaskmaster\u003e readTaskmaster() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return readTaskmaster(taskmasterStorage.getTaskmasterFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Optional\u003cReadOnlyTaskmaster\u003e readTaskmaster(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return taskmasterStorage.readTaskmaster(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void saveTaskmaster(ReadOnlyTaskmaster taskmaster) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        saveTaskmaster(taskmaster, taskmasterStorage.getTaskmasterFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void saveTaskmaster(ReadOnlyTaskmaster taskmaster, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmasterStorage.saveTaskmaster(taskmaster, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void saveSessionList(ReadOnlyTaskmaster taskmaster) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        saveSessionList(taskmaster, taskmasterStorage.getSessionListFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void saveSessionList(ReadOnlyTaskmaster taskmaster, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        logger.fine(\"Attempting to save session list to file: \" + filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskmasterStorage.saveSessionList(taskmaster, filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Optional\u003cSessionList\u003e readSessionList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return readSessionList(taskmasterStorage.getSessionListFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Optional\u003cSessionList\u003e readSessionList(Path filepath)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        logger.fine(\"Attempting to load attendance from file: \" + filepath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return taskmasterStorage.readSessionList(filepath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean fileExists(Path filePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return Files.exists(filePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static boolean isValidFilename(String filename) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return filename.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 6,
      "sc-arecrow": 16,
      "jayarengam": 46,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/TaskmasterStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Represents a storage for {@link Taskmaster}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public interface TaskmasterStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Path getTaskmasterFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns the file path of the SessionList data file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Path getSessionListFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns Taskmaster data as a {@link ReadOnlyTaskmaster}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Optional\u003cReadOnlyTaskmaster\u003e readTaskmaster() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @see #getTaskmasterFilePath()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    Optional\u003cReadOnlyTaskmaster\u003e readTaskmaster(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskmaster} to the storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @param taskmaster cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @throws IOException if there is a problem writing to the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void saveTaskmaster(ReadOnlyTaskmaster taskmaster) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @see #saveTaskmaster(ReadOnlyTaskmaster)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    void saveTaskmaster(ReadOnlyTaskmaster taskmaster, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Saves the SessionList of the Taskmaster to the storage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @param taskmaster cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @throws IOException if there is a problem writing to the file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    void saveSessionList(ReadOnlyTaskmaster taskmaster) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @see #saveTaskmaster(ReadOnlyTaskmaster)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    void saveSessionList(ReadOnlyTaskmaster taskmaster, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns SessionList data as a {@link ReadOnlyTaskmaster}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Optional\u003cSessionList\u003e readSessionList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * @see #readSessionList()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Optional\u003cSessionList\u003e readSessionList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 4,
      "sc-arecrow": 41,
      "jayarengam": 31
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": " * Represents a storage for {@link seedu.taskmaster.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Saves the given {@link seedu.taskmaster.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "         * @see seedu.taskmaster.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-f09-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private UiPart\u003cRegion\u003e mainListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private SimpleObjectProperty\u003cSession\u003e currentSession;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private StackPane viewListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private AnchorPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private AnchorPane sessionListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.currentSession \u003d logic.getCurrentSession();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        // the ui will refill its contents when currentSession updates"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        currentSession.addListener(new ChangeListener\u003cSession\u003e() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Session\u003e observable, Session oldValue, Session newValue) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    fillInnerParts(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    fillInnerParts(false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Fills inner parts of the ui"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param fillWithStudents true if filling with students, false otherwise"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    void fillInnerParts(boolean fillWithStudents) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        fillMainList(fillWithStudents);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        viewListPanelPlaceholder.getChildren().add(mainListPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        SessionListPanel sessionListPanel \u003d new SessionListPanel(logic.getFilteredSessionList(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this::changeSession, this::handleStudent);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        sessionListPanelPlaceholder.getChildren().add(sessionListPanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaskmasterFilePath());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Decides on what to fill the main list with."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param fillWithStudents true if filling with students, false otherwise"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    void fillMainList(boolean fillWithStudents) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (fillWithStudents) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            mainListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            String sessionName \u003d currentSession.get().getSessionName().name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            String sessionDateTime \u003d currentSession.get().getSessionDateTime().getDisplayDateTimeString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            mainListPanel \u003d new StudentRecordListPanel(logic.getFilteredStudentRecordList(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    sessionName, sessionDateTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Change current session and fill the main list with it."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    void changeSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        logic.changeSession(sessionName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Switches to student tab."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private void handleStudent() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        logic.showStudentList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @see seedu.taskmaster.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (commandText.equals(\"\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            logger.info(\"User input is empty\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new ParseException(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 8,
      "sc-arecrow": 1,
      "jflim98": 63,
      "jayarengam": 5,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/SessionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Panel containing the list of sessions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class SessionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private static final String FXML \u003d \"SessionListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SessionListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Runnable studentDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private ListView\u003cSession\u003e sessionListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Creates a {@code SessionListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public SessionListPanel(ObservableList\u003cSession\u003e sessionList, Consumer\u003cSessionName\u003e changeSessionAndFill,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                            Runnable studentDisplay) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        sessionListView.setItems(sessionList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        sessionListView.setCellFactory(listView -\u003e new SessionListViewCell(changeSessionAndFill));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.studentDisplay \u003d studentDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private void handleStudent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        studentDisplay.run();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    class SessionListViewCell extends ListCell\u003cSession\u003e { //change the stub to session"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        private final Consumer\u003cSessionName\u003e changeSession;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        private final Button button \u003d new Button();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        SessionListViewCell(Consumer\u003cSessionName\u003e changeSession) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            this.changeSession \u003d changeSession;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        protected void updateItem(Session session, boolean empty) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            super.updateItem(session, empty);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (empty || session \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                SessionName sessionName \u003d session.getSessionName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                button.setText(sessionName.name + \"\\n\" + session.getSessionDateTime().getDisplayDateTimeString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                button.setMinSize(100, 50);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                button.setMaxWidth(140);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                button.setStyle(\"-fx-font-size:13; -fx-alignment: center-left;\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                AnchorPane.setBottomAnchor(button, 0.0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                AnchorPane.setLeftAnchor(button, 0.0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                AnchorPane.setRightAnchor(button, 0.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                AnchorPane.setTopAnchor(button, 0.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                button.wrapTextProperty().setValue(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                button.setOnAction(new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    public void handle(ActionEvent event) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        changeSession.accept(sessionName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                AnchorPane anchorPane \u003d new AnchorPane();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                anchorPane.getChildren().add(button);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                anchorPane.setStyle(\"-fx-padding: 3 0 3 0; -fx-background-color: #383838; -fx-border-color: #383838\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                setGraphic(anchorPane);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 4,
      "jflim98": 81
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private Label telegram;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private Label nusnetId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates a {@code StudentCode} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        telegram.setText(\"@\" + student.getTelegram().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        nusnetId.setText(student.getNusnetId().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "sc-arecrow": 13,
      "jflim98": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private static final String FXML \u003d \"ListDisplayPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Label viewName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private ListView\u003cStudent\u003e mainListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates a {@code StudentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        viewName.setText(\"Student List\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        mainListView.setItems(studentList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        mainListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "sc-arecrow": 42,
      "jflim98": 9
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/StudentRecordCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class StudentRecordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final String FXML \u003d \"StudentRecordListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public final StudentRecord studentRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Label nusnetId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Label attendanceStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Label classParticipation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates a {@code StudentRecordListCard} with the given {@code AttendanceType} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public StudentRecordCard(StudentRecord studentRecord, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.studentRecord \u003d studentRecord;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String studentName \u003d studentRecord.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String studentNusnetId \u003d studentRecord.getNusnetId().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String studentClassParticipation \u003d String.valueOf(studentRecord.getClassParticipation().getRawScore());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assert studentName.length() \u003e 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assert studentNusnetId.length() \u003e 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assert studentClassParticipation.length() \u003e 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        name.setText(studentName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        nusnetId.setText(studentNusnetId);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        setAttendanceStatus(studentRecord.getAttendanceType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        classParticipation.setText(studentClassParticipation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private void setAttendanceStatus(AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        attendanceStatus.setText(attendanceType.getDescription());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        attendanceStatus.setStyle(String.format(\"-fx-background-color: %s; \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                + \"-fx-background-radius: 3; -fx-padding: 1 3 1 3\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                attendanceType.getColor()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (!(other instanceof StudentRecordCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        StudentRecordCard card \u003d (StudentRecordCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                \u0026\u0026 this.studentRecord.equals(card.studentRecord);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "sc-arecrow": 14,
      "jflim98": 70,
      "josuaaah": 1
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/StudentRecordListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Panel containing the list of student records."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentRecordListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private static final String FXML \u003d \"ListDisplayPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentRecordListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Label viewName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Label viewDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private ListView\u003cStudentRecord\u003e mainListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates a {@code StudentRecordListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * @param studentRecordList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public StudentRecordListPanel(ObservableList\u003cStudentRecord\u003e studentRecordList,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                                  String sessionName, String sessionDateTime) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        viewName.setText(sessionName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        viewDateTime.setText(sessionDateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        mainListView.setItems(studentRecordList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        mainListView.setCellFactory(listView -\u003e new StudentRecordListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code StudentRecord} using a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code StudentRecordListCard}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    class StudentRecordListViewCell extends ListCell\u003cStudentRecord\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        protected void updateItem(StudentRecord studentRecord, boolean empty) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            super.updateItem(studentRecord, empty);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            if (empty || studentRecord \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                setGraphic(new StudentRecordCard(studentRecord, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 43,
      "jflim98": 17,
      "josuaaah": 1
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/TAskmaster_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            mainWindow.fillInnerParts(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "jflim98": 1,
      "jayarengam": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/taskmaster/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cStackPane maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"40.0\" styleClass\u003d\"stack-pane\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "         \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "jflim98": 6,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "#filterField, #studentListPanel, #studentWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/ListDisplayPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003cAnchorPane fx:id\u003d\"currentView\" maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            \u003cLabel fx:id\u003d\"viewName\" maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" styleClass\u003d\"listHeader\" wrapText\u003d\"true\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"100.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            \u003cLabel fx:id\u003d\"viewDateTime\" maxHeight\u003d\"50.0\" maxWidth\u003d\"110.0\" minHeight\u003d\"50.0\" minWidth\u003d\"110.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"110.0\" styleClass\u003d\"listHeader\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003cListView fx:id\u003d\"mainListView\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 7,
      "jflim98": 23,
      "-": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003cfx:root minHeight\u003d\"400.0\" minWidth\u003d\"600.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Taskmaster\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \u003cImage url\u003d\"@/images/TAskmaster_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003cScene stylesheets\u003d\"@Taskmaster.css\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "          \u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #383838;\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003cMenuBar fx:id\u003d\"menuBar\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"40.0\" AnchorPane.bottomAnchor\u003d\"375.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                  \u003cmenus\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/Menu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                  \u003c/menus\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"40.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"25.0\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                     \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"100.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"65.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                     \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003cAnchorPane fx:id\u003d\"sessionListPanelPlaceholder\" prefWidth\u003d\"180.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"30.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"165.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003cVBox fx:id\u003d\"viewList\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"220.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"30.0\" AnchorPane.leftAnchor\u003d\"180.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"165.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                     \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"viewListPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003cAnchorPane fx:id\u003d\"statusbarPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"30.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 7,
      "jflim98": 19,
      "jayarengam": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"100.0\" styleClass\u003d\"black-pane\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "jflim98": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/SessionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003cAnchorPane prefWidth\u003d\"180.0\" styleClass\u003d\"session-list\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      \u003cButton layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleStudent\" prefHeight\u003d\"50.0\" prefWidth\u003d\"130.0\" stylesheets\u003d\"@Taskmaster.css\" text\u003d\"Student List\" textAlignment\u003d\"CENTER\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      \u003cListView fx:id\u003d\"sessionListView\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" prefWidth\u003d\"130.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"105.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      \u003cLabel layoutX\u003d\"64.0\" layoutY\u003d\"79.0\" text\u003d\"Sessions\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Light\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 10,
      "jflim98": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cGridPane maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"15.0\" styleClass\u003d\"status-bar\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "          AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "jflim98": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "      \u003cLabel fx:id\u003d\"nusnetId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nusnetId\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cLabel fx:id\u003d\"telegram\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$telegram\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "sc-arecrow": 17,
      "jflim98": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/StudentRecordListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003cLabel fx:id\u003d\"nusnetId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nusnetId\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            \u003cLabel fx:id\u003d\"attendanceStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendanceStatus\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003cLabel fx:id\u003d\"classParticipation\" styleClass\u003d\"cell_huge_label\" text\u003d\"\\$classParticipation\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                  \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                  \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 18,
      "jflim98": 36
    }
  },
  {
    "path": "src/main/resources/view/Taskmaster.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ".cell_huge_label {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".result-display .content {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-colour: black;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-padding: 0 1 0 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".menu-item {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-padding: 1 200 1 5"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-fill: #383838;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jflim98"
        },
        "content": "#currentView {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: #313638;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jflim98"
        },
        "content": "#viewName {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jflim98"
        },
        "content": "#viewDateTime {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jflim98"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jflim98"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jflim98"
        },
        "content": "#filterField, #studentListPanel, #studentWebpage {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jflim98"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jflim98"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jflim98"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-background-color: #5d5d5d;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-background-radius: 8;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-border-radius: 8;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-padding: 10 20 10 20;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    -fx-background-color: #555555;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jflim98"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jflim98"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jflim98"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 15,
      "jflim98": 255
    }
  },
  {
    "path": "src/test/data/JsonSerializableSessionListTest/duplicateNusnetIdSessionList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"sessions\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionName\" : \"Typical session\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionDateTime\" : \"01-01-2020 12:00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"records\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0123456\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0456789\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0312654\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0987465\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0946875\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0319843\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"George Best\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0731894\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionName\" : \"Typical session\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionDateTime\" : \"01-01-2020 13:00\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"records\" : [ {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0123456\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0456789\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0312654\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0987465\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0946875\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0319843\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"George Best\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0731894\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 81
    }
  },
  {
    "path": "src/test/data/JsonSerializableSessionListTest/invalidSessionList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"sessions\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionName\" : \"Typical session\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionDateTime\" : \"01-01-2020 12:00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"records\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e012345@\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableSessionListTest/typicalSessionList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"sessions\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionName\" : \"Typical session\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionDateTime\" : \"01-01-2020 12:00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"records\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0123456\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0456789\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0312654\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0987465\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0946875\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0319843\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"George Best\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0731894\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionName\" : \"Typical session 2\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"sessionDateTime\" : \"01-01-2020 13:00\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"records\" : [ {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0123456\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0456789\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0312654\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0987465\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0946875\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0319843\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"name\" : \"George Best\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"nusnetId\" : \"e0731894\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "      \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 81
    }
  },
  {
    "path": "src/test/data/JsonSerializableSessionTest/duplicateStudentSession.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"sessionName\" : \"Typical session\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"sessionDateTime\" : \"01-01-2020 12:00\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"records\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0123456\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"PRESENT\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0123456\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"5\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0312654\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0987465\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0946875\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"7\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"PRESENT\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0319843\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0731894\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 40
    }
  },
  {
    "path": "src/test/data/JsonSerializableSessionTest/invalidSession.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"sessionName\" : \"Typical session\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"sessionDateTime\" : \"01-01-220 12:00\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"records\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0123456\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"PRESENT\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0456789\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"5\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0312654\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0987465\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0946875\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"7\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"PRESENT\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0319843\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0731894\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 40
    }
  },
  {
    "path": "src/test/data/JsonSerializableSessionTest/typicalSession.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"sessionName\" : \"Typical session\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"sessionDateTime\" : \"01-01-2020 12:00\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  \"records\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0123456\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"PRESENT\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0456789\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"5\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0312654\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0987465\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0946875\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"7\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"PRESENT\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0319843\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"nusnetId\" : \"e0731894\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"classParticipation\" : \"0\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"attendanceType\" : \"NO_RECORD\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 40
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskmasterTest/duplicateStudentTaskmaster.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"telegram\": \"alicepauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\": \"e0123456\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"telegram\": \"alicepauline\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\": \"e0123456\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 1,
      "jayarengam": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskmasterTest/invalidStudentTaskmaster.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"telegram\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\": \"e0123456\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 1,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskmasterTest/typicalStudentsTaskmaster.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  \"_comment\": \"Taskmaster save file which contains the same Student values as in TypicalStudents#getTypicalTaskmaster()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  \"students\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"telegram\" : \"alicepauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\" : \"e0123456\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"telegram\" : \"benson_m\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\" : \"e0456789\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"telegram\" : \"kurzzz\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\" : \"e0312654\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"telegram\" : \"dms_only\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\" : \"e0987465\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"telegram\" : \"mellie\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\" : \"e0946875\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"telegram\" : \"fionakunz\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\" : \"e0319843\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    \"telegram\" : \"george_worst\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\" : \"e0731894\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 7,
      "sc-arecrow": 2,
      "jayarengam": 7,
      "-": 30
    }
  },
  {
    "path": "src/test/data/JsonTaskmasterStorageTest/invalidAndValidStudentTaskmaster.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    \"name\": \"Valid Student\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"telegram\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\": \"e0123456\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    \"name\": \"Student With Invalid Phone Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"telegram\": \"948asdf@2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\": \"e0123456\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 4,
      "sc-arecrow": 3,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonTaskmasterStorageTest/invalidStudentTaskmaster.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    \"name\": \"Student with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"telegram\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    \"nusnetId\": \"e0123456\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 2,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  \"taskmasterFilePath\" : \"taskmaster.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "  \"taskmasterFilePath\" : \"taskmaster.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 7,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/TAskmaster_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "jayarengam": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NUSNETID_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.logic.commands.ListStudentsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.JsonTaskmasterStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonTaskmasterStorage taskmasterStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                new JsonTaskmasterStorage(temporaryFolder.resolve(\"taskmaster.json\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        temporaryFolder.resolve(\"session_list.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taskmasterStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String deleteCommand \u003d \"delete-student 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String listCommand \u003d ListStudentsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandSuccess(listCommand, ListStudentsCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // Setup LogicManager with JsonTaskmasterIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonTaskmasterStorage taskmasterStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                new JsonTaskmasterIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionTaskmaster.json\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionSessionList.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taskmasterStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + TELEGRAM_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + NUSNETID_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static class JsonTaskmasterIoExceptionThrowingStub extends JsonTaskmasterStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        private JsonTaskmasterIoExceptionThrowingStub(Path taskmasterFilePath, Path sessionListFilePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            super(taskmasterFilePath, sessionListFilePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void saveTaskmaster(ReadOnlyTaskmaster taskmaster, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 24,
      "sc-arecrow": 16,
      "josuaaah": 1,
      "jayarengam": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandSuccess(new AddCommand(validStudent), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student studentInList \u003d model.getTaskmaster().getStudentList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandFailure(new AddCommand(studentInList), model, AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 9,
      "sc-arecrow": 10,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_STUDENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public Path getTaskmasterFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void setTaskmasterFilePath(Path taskmasterFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void setTaskmaster(ReadOnlyTaskmaster taskmaster) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public ReadOnlyTaskmaster getTaskmaster() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        public void setSessions(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        public void deleteSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        public void changeSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void showStudentList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        public boolean hasSession(SessionName sessionName) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public ObservableList\u003cStudentRecord\u003e getFilteredStudentRecordList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        public void updateFilteredStudentRecordList(Predicate\u003cStudentRecord\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        public void showLowestScoringStudents() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void markStudentRecord(StudentRecord studentRecord, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        public void markStudentWithNusnetId(NusnetId nusnetId, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void markAllStudentRecords(List\u003cStudentRecord\u003e studentRecords, AttendanceType attendanceType) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        public void scoreStudent(StudentRecord target, double score) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        public void scoreStudentWithNusnetId(NusnetId nusnetId, double score) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        public void scoreAllStudents(List\u003cStudentRecord\u003e students, double score) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void updateStudentRecords(List\u003cStudentRecord\u003e studentRecords) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        public void showRandomStudent(Random random) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        public void clearAttendance() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        public SimpleObjectProperty\u003cSession\u003e getCurrentSession() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public ReadOnlyTaskmaster getTaskmaster() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return new Taskmaster();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 26,
      "sc-arecrow": 66,
      "jflim98": 17,
      "josuaaah": 41,
      "jayarengam": 23,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/ChangeSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class ChangeSessionCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Session existingSession \u003d new Session("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionName(\"Existing Session\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionDateTime(LocalDateTime.of(2020, 11, 1, 12, 0)),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            getTypicalStudents());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void constructor_nullSessionName_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e new ChangeSessionCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void execute_validSession_fromStudentListToSessionSuccess() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        model.addSession(existingSession);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String expectedMessage \u003d String.format(ChangeSessionCommand.MESSAGE_SUCCESS, existingSession.getSessionName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        expectedModel.addSession(existingSession);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.showStudentList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        ChangeSessionCommand changeSessionCommand \u003d new ChangeSessionCommand(existingSession.getSessionName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assertCommandSuccess(changeSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void execute_validSession_sameSessionToSameSessionSuccess() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        model.addSession(existingSession);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expectedMessage \u003d String.format(ChangeSessionCommand.MESSAGE_SUCCESS, existingSession.getSessionName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        expectedModel.addSession(existingSession);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        expectedModel.changeSession(existingSession.getSessionName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        ChangeSessionCommand changeSessionCommand \u003d new ChangeSessionCommand(existingSession.getSessionName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandSuccess(changeSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_sessionNotInModel_exceptionThrown() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        ChangeSessionCommand changeSessionCommand \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new ChangeSessionCommand(new SessionName(\"This session does not exist\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandFailure(changeSessionCommand, model, ChangeSessionCommand.MESSAGE_SESSION_NOT_FOUND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "josuaaah": 51,
      "jflim98": 12
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_emptyTaskmaster_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_nonEmptyTaskmaster_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.setTaskmaster(new Taskmaster());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 7,
      "sc-arecrow": 5,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_ATTENDANCE_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_CLASS_PARTICIPATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NUSNETID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_DATE_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String VALID_TELEGRAM_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String VALID_TELEGRAM_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String VALID_NUSNETID_AMY \u003d \"e0123456\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String VALID_NUSNETID_BOB \u003d \"e0456789\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String VALID_SESSION_NAME \u003d \"Tutorial 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String VALID_SESSION_DATETIME \u003d \"23-10-2020 0900\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String PRESENT_ATTENDANCE \u003d \"present\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String ABSENT_ATTENDANCE \u003d \"absent\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String VALID_SCORE_STRING \u003d \"0.00\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final double VALID_SCORE_DOUBLE \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String TELEGRAM_DESC_AMY \u003d \" \" + PREFIX_TELEGRAM + VALID_TELEGRAM_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String TELEGRAM_DESC_BOB \u003d \" \" + PREFIX_TELEGRAM + VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String NUSNETID_DESC_AMY \u003d \" \" + PREFIX_NUSNETID + VALID_NUSNETID_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String NUSNETID_DESC_BOB \u003d \" \" + PREFIX_NUSNETID + VALID_NUSNETID_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String ATTENDANCE_DESC_PRESENT \u003d \" \" + PREFIX_ATTENDANCE_TYPE + PRESENT_ATTENDANCE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String ATTENDANCE_DESC_ABSENT \u003d \" \" + PREFIX_ATTENDANCE_TYPE + ABSENT_ATTENDANCE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String NEW_SESSION_NAME_DESC \u003d \" \" + PREFIX_SESSION_NAME + VALID_SESSION_NAME;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String NEW_SESSION_DATETIME_DESC \u003d \" \" + PREFIX_SESSION_DATE_TIME + VALID_SESSION_DATETIME;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String INVALID_TELEGRAM_DESC \u003d \" \" + PREFIX_TELEGRAM + \"911@\"; // \u0027@\u0027 not allowed in telegram"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_NUSNETID; // empty string not allowed for nusnetid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String INVALID_ATTENDANCE_DESC \u003d \" \" + PREFIX_ATTENDANCE_TYPE + \"notAttendanceType\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String INVALID_PARTICIPATION_SCORE \u003d \" \" + PREFIX_CLASS_PARTICIPATION + \"-1\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String INVALID_PARTICIPATION_TOOSMALL \u003d \" \" + PREFIX_CLASS_PARTICIPATION + \"-1\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String INVALID_PARTICIPATION_NEGATIVEZERO \u003d \" \" + PREFIX_CLASS_PARTICIPATION + \"-0\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String INVALID_PARTICIPATION_TOOBIG \u003d \" \" + PREFIX_CLASS_PARTICIPATION + \"10.1\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String INVALID_PARTICIPATION_NONINTEGER \u003d \" \" + PREFIX_CLASS_PARTICIPATION + \"NOTASCORE\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final String INVALID_SESSION_NAME_DESC \u003d \" \" + PREFIX_SESSION_NAME + \"****\"; // \u0027*\u0027 not allowed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    // refer to {@code AttendanceType} for valid attendance types"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String PREAMBLE_ALL \u003d \"all\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withTelegram(VALID_TELEGRAM_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_NUSNETID_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withTelegram(VALID_TELEGRAM_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_NUSNETID_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * - the student list, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Taskmaster expectedTaskmaster \u003d new Taskmaster(actualModel.getTaskmaster());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(expectedTaskmaster, actualModel.getTaskmaster());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * {@code model}\u0027s student list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 34,
      "sc-arecrow": 25,
      "josuaaah": 8,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of student list list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskmaster().getStudentList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 13,
      "sc-arecrow": 27,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/DeleteSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class DeleteSessionCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionName sessionName \u003d new SessionName(\"Session To Delete\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionDateTime sessionDateTime \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Session toDelete \u003d new Session(sessionName, sessionDateTime, getTypicalStudents());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void constructor_nullSessionName_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e new DeleteSessionCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_sessionFound_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(sessionName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        model.addSession(toDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        expectedModel.addSession(toDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        expectedModel.deleteSession(sessionName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSessionCommand.MESSAGE_SUCCESS, sessionName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandSuccess(deleteSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_sessionNotFound_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(toDelete.getSessionName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandFailure(deleteSessionCommand, model, DeleteSessionCommand.MESSAGE_MISSING_SESSION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_sameCommand_returnsTrue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand \u003d new DeleteSessionCommand(toDelete.getSessionName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(deleteSessionCommand, deleteSessionCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_sameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand1 \u003d new DeleteSessionCommand(toDelete.getSessionName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand2 \u003d new DeleteSessionCommand(toDelete.getSessionName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(deleteSessionCommand1, deleteSessionCommand2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_differentSessionName_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand1 \u003d new DeleteSessionCommand(toDelete.getSessionName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        DeleteSessionCommand deleteSessionCommand2 \u003d new DeleteSessionCommand(new SessionName(\"Different name\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertNotEquals(deleteSessionCommand1, deleteSessionCommand2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 75,
      "jflim98": 2
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Taskmaster(model.getTaskmaster()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withTelegram(VALID_TELEGRAM_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Taskmaster(model.getTaskmaster()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, new EditStudentDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Taskmaster(model.getTaskmaster()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Taskmaster(model.getTaskmaster()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_STUDENT, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // edit student in filtered list into a duplicate in student list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student studentInList \u003d model.getTaskmaster().getStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * but smaller than size of student list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of student list list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskmaster().getStudentList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_STUDENT, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_STUDENT, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_STUDENT, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 24,
      "sc-arecrow": 57,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/EditStudentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NUSNETID_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // different telegram -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTelegram(VALID_TELEGRAM_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withAddress(VALID_NUSNETID_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 13,
      "sc-arecrow": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 11,
      "sc-arecrow": 11,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/ListStudentsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListStudentsCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class ListStudentsCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandSuccess(new ListStudentsCommand(), model, ListStudentsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandSuccess(new ListStudentsCommand(), model, ListStudentsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 8,
      "sc-arecrow": 7,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/LowestScoreCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_RECORDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getScoredTaskmaster;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalPresentStudentRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.markAllAsPresentInTypicalSession;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.record.ScoreEqualsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class LowestScoreCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Taskmaster scoredTaskmaster \u003d getScoredTaskmaster();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Model model \u003d new ModelManager(scoredTaskmaster, new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(scoredTaskmaster, new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        LowestScoreCommand lowestScoreCommand \u003d new LowestScoreCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertTrue(lowestScoreCommand.equals(lowestScoreCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertFalse(lowestScoreCommand.equals(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertFalse(lowestScoreCommand.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void execute_unscoredSession_allStudentsFound() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        model.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        expectedModel.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        markAllAsPresentInTypicalSession(model.getCurrentSession().get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        markAllAsPresentInTypicalSession(expectedModel.getCurrentSession().get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 7);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        LowestScoreCommand command \u003d new LowestScoreCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ScoreEqualsPredicate predicate \u003d new ScoreEqualsPredicate(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        expectedModel.updateFilteredStudentRecordList(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(getTypicalPresentStudentRecords(), model.getFilteredStudentRecordList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void execute_scoredStudentSession_multipleStudentsFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        model.changeSession(new SessionName(\"Typical session 2\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        expectedModel.changeSession(new SessionName(\"Typical session 2\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        LowestScoreCommand command \u003d new LowestScoreCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ScoreEqualsPredicate predicate \u003d new ScoreEqualsPredicate(4);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        expectedModel.updateFilteredStudentRecordList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertEquals(model.getFilteredStudentRecordList(), expectedModel.getFilteredStudentRecordList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 6,
      "jayarengam": 67
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/MarkAllCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class MarkAllCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        model.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudentRecord\u003e studentRecords \u003d model.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        expectedModel.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        MarkAllCommand markAllCommand \u003d new MarkAllCommand(AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.markAllStudentRecords(studentRecords, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d String.format(MarkAllCommand.MESSAGE_MARK_ALL_SUCCESS, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandSuccess(markAllCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        markAllCommand \u003d new MarkAllCommand(AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.markAllStudentRecords(studentRecords, AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedMessage \u003d String.format(MarkAllCommand.MESSAGE_MARK_ALL_SUCCESS, AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandSuccess(markAllCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_emptySessionList_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        model.setSessions(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        MarkAllCommand markAllCommand \u003d new MarkAllCommand(AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expectedMessage \u003d \"There are no sessions yet!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandFailure(markAllCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_nullCurrentSession_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        MarkAllCommand markAllCommand \u003d new MarkAllCommand(AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expectedMessage \u003d \"Please select a session first!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandFailure(markAllCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 34,
      "josuaaah": 20
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/MarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class MarkCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        model.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentRecord firstStudentRecord \u003d model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .getFilteredStudentRecordList()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentRecord secondStudentRecord \u003d model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .getFilteredStudentRecordList()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        expectedModel.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.markStudentRecord(firstStudentRecord, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expectedMessage \u003d String.format(MarkCommand.MESSAGE_MARK_STUDENT_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                firstStudentRecord.getNusnetId(), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandSuccess(markCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        markCommand \u003d new MarkCommand(INDEX_SECOND_STUDENT, AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedModel.markStudentRecord(secondStudentRecord, AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedMessage \u003d String.format(MarkCommand.MESSAGE_MARK_STUDENT_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                secondStudentRecord.getNusnetId(), AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertCommandSuccess(markCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_indexTooLarge_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        model.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        int numOfStudents \u003d model.getFilteredStudentList().size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Index indexTooBig \u003d Index.fromZeroBased(numOfStudents);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(indexTooBig, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandFailure(markCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_emptySessionList_exceptionThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        model.setSessions(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expectedMessage \u003d \"There are no sessions yet!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandFailure(markCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_nullCurrentSession_exceptionThrown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expectedMessage \u003d \"Please select a session first!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandFailure(markCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 10,
      "sc-arecrow": 21,
      "josuaaah": 46
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/NewSessionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordListManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class NewSessionCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionName newSessionName \u003d new SessionName(\"New Session\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionDateTime newSessionDateTime \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Session newSession \u003d new Session(newSessionName, newSessionDateTime, getTypicalStudents());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void constructor_nullSessionName_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e new NewSessionCommand(null, newSessionDateTime));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void constructor_nullSessionDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e new NewSessionCommand(newSessionName, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_validNewSession_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand \u003d new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        expectedModel.addSession(newSession);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expectedMessage \u003d String.format(NewSessionCommand.MESSAGE_SUCCESS, newSession);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandSuccess(newSessionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_studentRecordsNotSet_exceptionThrown() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand \u003d new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e newSessionCommand.execute(model));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void execute_sessionAlreadyInTaskmaster_exceptionThrown() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session existingSession \u003d TypicalStudents.getTypicalSession();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand \u003d new NewSessionCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                existingSession.getSessionName(), existingSession.getSessionDateTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertCommandFailure(newSessionCommand, model, NewSessionCommand.MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_sameCommand_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand \u003d new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(newSessionCommand, newSessionCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_sameAttributes_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand1 \u003d new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand2 \u003d new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand1.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand2.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(newSessionCommand1, newSessionCommand2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_differentSessionName_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand1 \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand1.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand2 \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(new SessionName(\"Different name\"), newSessionDateTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand2.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertNotEquals(newSessionCommand2, newSessionCommand1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_differentSessionDateTime_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand1 \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand1.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand2 \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(newSessionName,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                        new SessionDateTime(LocalDateTime.of(2019, 11, 1, 10, 30)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand2.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertNotEquals(newSessionCommand2, newSessionCommand1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_oneHasNullStudentRecordList_returnsFalse() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand1 \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand2 \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        newSessionCommand2.setStudentRecords(StudentRecordListManager.of(getTypicalStudents()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertNotEquals(newSessionCommand2, newSessionCommand1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_sameAttributesWithNullRecordLists_returnsTrue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand1 \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand2 \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(newSessionCommand2, newSessionCommand1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_differentAttributesWithNullRecordLists_returnsFalse() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand1 \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(newSessionName, newSessionDateTime);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand newSessionCommand2 \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new NewSessionCommand(new SessionName(\"Different name\"), newSessionDateTime);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertNotEquals(newSessionCommand2, newSessionCommand1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 139
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/ParticipationAllCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SCORE_DOUBLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SCORE_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "class ParticipationAllCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void execute_participationAllStudents_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        model.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        List\u003cStudentRecord\u003e students \u003d model.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationAllCommand participationAllCommand \u003d new ParticipationAllCommand(VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        expectedModel.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        expectedModel.scoreAllStudents(students, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                ParticipationAllCommand.MESSAGE_MARK_ALL_SUCCESS, Double.parseDouble(VALID_SCORE_STRING));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertCommandSuccess(participationAllCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void execute_emptySessionList_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        model.setSessions(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationAllCommand participationAllCommand \u003d new ParticipationAllCommand(VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d \"There are no sessions yet!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertCommandFailure(participationAllCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void execute_nullCurrentSession_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationAllCommand participationAllCommand \u003d new ParticipationAllCommand(VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d \"Please select a session first!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertCommandFailure(participationAllCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationAllCommand partCommand1 \u003d new ParticipationAllCommand(VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationAllCommand partCommand2 \u003d new ParticipationAllCommand(VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationAllCommand partCommand3 \u003d new ParticipationAllCommand(VALID_SCORE_DOUBLE + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(partCommand1.equals(partCommand1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(partCommand1.equals(partCommand2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(partCommand1.equals(partCommand3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 64
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/ParticipationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SCORE_DOUBLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SCORE_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "class ParticipationCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void execute_participationWithValidIndex_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        model.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        StudentRecord firstStudentRecord \u003d model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .getFilteredStudentRecordList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        expectedModel.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand participationCommand \u003d new ParticipationCommand(INDEX_FIRST_STUDENT, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        expectedModel.scoreStudent(firstStudentRecord, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d String.format(ParticipationCommand.MESSAGE_SCORE_STUDENT_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                firstStudentRecord.getName(), Double.parseDouble(VALID_SCORE_STRING));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertCommandSuccess(participationCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void execute_indexTooLarge_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        model.changeSession(new SessionName(\"Typical session\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        int numOfStudents \u003d model.getFilteredStudentList().size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Index indexTooBig \u003d Index.fromZeroBased(numOfStudents);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand participationCommand \u003d new ParticipationCommand(indexTooBig, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertCommandFailure(participationCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void execute_emptySessionList_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        model.setSessions(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand participationCommand \u003d new ParticipationCommand(INDEX_FIRST_STUDENT, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d \"There are no sessions yet!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertCommandFailure(participationCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void execute_nullCurrentSession_exceptionThrown() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand participationCommand \u003d new ParticipationCommand(INDEX_FIRST_STUDENT, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d \"Please select a session first!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertCommandFailure(participationCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand partCommand1 \u003d new ParticipationCommand(INDEX_FIRST_STUDENT, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand partCommand2 \u003d new ParticipationCommand(INDEX_FIRST_STUDENT, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand partCommand3 \u003d new ParticipationCommand(INDEX_SECOND_STUDENT, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand partCommand4 \u003d new ParticipationCommand(INDEX_SECOND_STUDENT, VALID_SCORE_DOUBLE + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(partCommand1.equals(partCommand1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(partCommand1.equals(partCommand2));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(partCommand1.equals(partCommand3));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(partCommand3.equals(partCommand4));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(partCommand1.equals(partCommand4));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 82
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/commands/RandomStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package seedu.taskmaster.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class RandomStudentCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final Session existingSession \u003d new Session("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            new SessionName(\"Existing Session\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            new SessionDateTime(LocalDateTime.of(2020, 11, 1, 12, 0)),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            getTypicalStudents());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void execute_nullCurrentSessions_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        RandomStudentCommand randomStudentCommand \u003d new RandomStudentCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String expectedMessage \u003d \"Please select a session first!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assertCommandFailure(randomStudentCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void execute_emptySessionList_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        model.setSessions(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        RandomStudentCommand randomStudentCommand \u003d new RandomStudentCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String expectedMessage \u003d \"There are no sessions yet!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assertCommandFailure(randomStudentCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void execute_emptySession_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        Session emptySession \u003d new Session("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                new SessionName(\"Empty Session\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 11, 1, 12, 0)),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        model.addSession(emptySession);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        RandomStudentCommand randomStudentCommand \u003d new RandomStudentCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String expectedMessage \u003d \"The session list has no students!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assertCommandFailure(randomStudentCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        long seed \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        model.addSession(existingSession);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        model.markAllStudentRecords(existingSession.getStudentRecords(), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        RandomStudentCommand randomStudentCommand \u003d new RandomStudentCommand(new Random(seed));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String expectedMessage \u003d RandomStudentCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        expectedModel.addSession(existingSession);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        expectedModel.markAllStudentRecords(existingSession.getStudentRecords(), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        expectedModel.showRandomStudent(new Random(seed));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assertCommandSuccess(randomStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 1,
      "jflim98": 85
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_TELEGRAM_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NUSNETID_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NUSNETID_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.TELEGRAM_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NUSNETID_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + NUSNETID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + NUSNETID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // multiple telegrams - last telegram accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TELEGRAM_DESC_AMY + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + NUSNETID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + NUSNETID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB + NUSNETID_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + NUSNETID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB + NUSNETID_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + TELEGRAM_DESC_AMY + EMAIL_DESC_AMY + NUSNETID_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB + NUSNETID_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // missing telegram prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_TELEGRAM_BOB + EMAIL_DESC_BOB + NUSNETID_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + VALID_EMAIL_BOB + NUSNETID_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB + VALID_NUSNETID_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_TELEGRAM_BOB + VALID_EMAIL_BOB + VALID_NUSNETID_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB + NUSNETID_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // invalid telegram"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_TELEGRAM_DESC + EMAIL_DESC_BOB + NUSNETID_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + INVALID_EMAIL_DESC + NUSNETID_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, NusnetId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB + NUSNETID_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + NUSNETID_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 68,
      "sc-arecrow": 5,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/ChangeSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NEW_SESSION_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.ChangeSessionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class ChangeSessionCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeSessionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final ChangeSessionCommandParser parser \u003d new ChangeSessionCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // no session name specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, PREFIX_SESSION_NAME.getPrefix(), MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"x/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void parse_validInput_returnsChangeSessionCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String input \u003d NEW_SESSION_NAME_DESC;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        ChangeSessionCommand expectedCommand \u003d new ChangeSessionCommand(new SessionName(\"Tutorial 1\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 45
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 6,
      "sc-arecrow": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/DeleteSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.DeleteSessionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class DeleteSessionCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSessionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final DeleteSessionCommandParser parser \u003d new DeleteSessionCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // no session name specified"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"s/\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // invalid session name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"s/****\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"x/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void parse_validInput_returnsChangeSessionCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String input \u003d \" s/To Delete\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        DeleteSessionCommand expectedCommand \u003d new DeleteSessionCommand(new SessionName(\"To Delete\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 46
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_TELEGRAM_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NUSNETID_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NUSNETID_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.TELEGRAM_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NUSNETID_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NUSNETID_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1 a/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TELEGRAM_DESC, Telegram.MESSAGE_CONSTRAINTS); // invalid telegram"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, NusnetId.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // invalid telegram followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TELEGRAM_DESC + EMAIL_DESC_AMY, Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // valid telegram followed by invalid telegram. The test case for invalid telegram followed by valid telegram"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1\" + TELEGRAM_DESC_BOB + INVALID_TELEGRAM_DESC, Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_NUSNETID_AMY + VALID_TELEGRAM_AMY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TELEGRAM_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + EMAIL_DESC_AMY + NUSNETID_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withTelegram(VALID_TELEGRAM_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_NUSNETID_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TELEGRAM_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // telegram"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTelegram(VALID_TELEGRAM_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NUSNETID_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withAddress(VALID_NUSNETID_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TELEGRAM_DESC_AMY + NUSNETID_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + TAG_DESC_FRIEND + TELEGRAM_DESC_AMY + NUSNETID_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + TELEGRAM_DESC_BOB + NUSNETID_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_NUSNETID_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TELEGRAM_DESC + TELEGRAM_DESC_BOB;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                new EditStudentDescriptorBuilder().withTelegram(VALID_TELEGRAM_BOB).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_TELEGRAM_DESC + NUSNETID_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + TELEGRAM_DESC_BOB;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTelegram(VALID_TELEGRAM_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withAddress(VALID_NUSNETID_BOB).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 73,
      "sc-arecrow": 13,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/MarkCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.ATTENDANCE_DESC_ABSENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.ATTENDANCE_DESC_PRESENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_ATTENDANCE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.PREAMBLE_ALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.logic.commands.MarkAllCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class MarkCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private MarkCommandParser parser \u003d new MarkCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // no attendance type specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // no index and no attendance type specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseFailure(parser, \"1 a/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void parse_invalidAttendanceType_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ATTENDANCE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void parse_markOneStudent_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String inputMarkPresent \u003d targetIndex.getOneBased() + ATTENDANCE_DESC_PRESENT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        MarkCommand expectedCommandPresent \u003d new MarkCommand(targetIndex, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseSuccess(parser, inputMarkPresent, expectedCommandPresent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String inputMarkAbsent \u003d targetIndex.getOneBased() + ATTENDANCE_DESC_ABSENT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        MarkCommand expectedCommandAbsent \u003d new MarkCommand(targetIndex, AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseSuccess(parser, inputMarkAbsent, expectedCommandAbsent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void parse_markAllStudents_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String inputMarkPresent \u003d PREAMBLE_ALL + ATTENDANCE_DESC_PRESENT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        MarkCommand expectedCommandPresent \u003d new MarkAllCommand(AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseSuccess(parser, inputMarkPresent, expectedCommandPresent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        String inputMarkAbsent \u003d PREAMBLE_ALL + ATTENDANCE_DESC_ABSENT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        MarkCommand expectedCommandAbsent \u003d new MarkAllCommand(AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertParseSuccess(parser, inputMarkAbsent, expectedCommandAbsent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 81,
      "josuaaah": 1
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/NewSessionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_SESSION_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NEW_SESSION_DATETIME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NEW_SESSION_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SESSION_DATETIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SESSION_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_DATE_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_SESSION_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.logic.commands.NewSessionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class NewSessionCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewSessionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private NewSessionCommandParser parser \u003d new NewSessionCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // no session date time specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, PREFIX_SESSION_NAME + VALID_SESSION_NAME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // no session name specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, PREFIX_SESSION_DATE_TIME + VALID_SESSION_DATETIME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // invalid session name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, INVALID_SESSION_NAME_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseFailure(parser, \"x/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void parse_validInput_returnsNewSessionCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String input \u003d NEW_SESSION_NAME_DESC + NEW_SESSION_DATETIME_DESC;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        NewSessionCommand expectedCommand \u003d new NewSessionCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(VALID_SESSION_NAME),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 10, 23, 9, 0))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertParseSuccess(parser, input, expectedCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 59
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_NONINTEGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_SCORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SCORE_DOUBLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SCORE_STRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String INVALID_TELEGRAM \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \"e1123456\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String VALID_TELEGRAM \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"e0123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parseTelegram_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTelegram((String) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parseTelegram_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTelegram(INVALID_TELEGRAM));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parseTelegram_validValueWithoutWhitespace_returnsTelegram() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Telegram expectedTelegram \u003d new Telegram(VALID_TELEGRAM);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(expectedTelegram, ParserUtil.parseTelegram(VALID_TELEGRAM));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parseTelegram_validValueWithWhitespace_returnsTrimmedTelegram() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String telegramWithWhitespace \u003d WHITESPACE + VALID_TELEGRAM + WHITESPACE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Telegram expectedTelegram \u003d new Telegram(VALID_TELEGRAM);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(expectedTelegram, ParserUtil.parseTelegram(telegramWithWhitespace));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNusnetId((String) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNusnetId(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        NusnetId expectedNusnetId \u003d new NusnetId(VALID_ADDRESS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(expectedNusnetId, ParserUtil.parseNusnetId(VALID_ADDRESS));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        NusnetId expectedNusnetId \u003d new NusnetId(VALID_ADDRESS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(expectedNusnetId, ParserUtil.parseNusnetId(addressWithWhitespace));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void parseScore_invalidInput() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseScore(INVALID_PARTICIPATION_SCORE));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseScore(INVALID_PARTICIPATION_NONINTEGER));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void parseScore_validInput() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        double res \u003d ParserUtil.parseScore(VALID_SCORE_STRING)[0];"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(VALID_SCORE_DOUBLE, res);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 47,
      "sc-arecrow": 2,
      "-": 163
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/ParticipationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_NEGATIVEZERO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_NONINTEGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_TOOBIG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_TOOSMALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.PREAMBLE_ALL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SCORE_DOUBLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SCORE_STRING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_CLASS_PARTICIPATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.ParticipationAllCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.ParticipationCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "class ParticipationCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ParticipationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT_TOO_SMALL \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            \"Invalid input: Negative score. Score needs to be between 0 to 10 inclusive.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT_TOO_BIG \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            \"Invalid input: Score is greater than 10. Score needs to be between 0 to 10 inclusive.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String MESSAGE_INVALID_NEGATIVE_ZERO \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            \"Invalid input: Do not put - before zero.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private ParticipationCommandParser parser \u003d new ParticipationCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // no score specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // no index and no score specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1 x/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parse_invalidAttendanceType_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PARTICIPATION_NONINTEGER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PARTICIPATION_TOOSMALL, MESSAGE_INVALID_INPUT_TOO_SMALL);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PARTICIPATION_TOOBIG, MESSAGE_INVALID_INPUT_TOO_BIG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PARTICIPATION_NEGATIVEZERO, MESSAGE_INVALID_NEGATIVE_ZERO);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parse_markOneStudent_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String inputScore \u003d targetIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + PREFIX_CLASS_PARTICIPATION + VALID_SCORE_STRING;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand expectedCommandPresent \u003d new ParticipationCommand(targetIndex, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseSuccess(parser, inputScore, expectedCommandPresent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parse_markAllStudents_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String inputScore \u003d PREAMBLE_ALL + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + PREFIX_CLASS_PARTICIPATION + VALID_SCORE_STRING;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ParticipationCommand expectedCommandPresent \u003d new ParticipationAllCommand(VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertParseSuccess(parser, inputScore, expectedCommandPresent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 87
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/logic/parser/TaskmasterParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_CLASS_PARTICIPATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.logic.commands.ListStudentsCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.ParticipationCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class TaskmasterParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final TaskmasterParser parser \u003d new TaskmasterParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(new AddCommand(student), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_STUDENT), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_STUDENT, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentsCommand.COMMAND_WORD) instanceof ListStudentsCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentsCommand.COMMAND_WORD + \" 3\") instanceof ListStudentsCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void parseCommand_participation() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        ParticipationCommand.COMMAND_WORD + \" 1 \" + PREFIX_CLASS_PARTICIPATION + \"1\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        instanceof ParticipationCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 29,
      "sc-arecrow": 14,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_SCORE_DOUBLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudentRecords.ALICE_STUDENT_RECORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudentRecords.BENSON_STUDENT_RECORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalSession;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.NoSessionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.NoSessionSelectedException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.TaskmasterBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private ModelManager modelManager2 \u003d new ModelManager(new Taskmaster(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(new Taskmaster(), new Taskmaster(modelManager.getTaskmaster()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager2.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(new Taskmaster(), new Taskmaster(modelManager2.getTaskmaster()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        userPrefs.setTaskmasterFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        userPrefs.setTaskmasterFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setTaskmasterFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTaskmasterFilePath(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setTaskmasterFilePath_validPath_setsTaskmasterFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.setTaskmasterFilePath(path);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(path, modelManager.getTaskmasterFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions_validSessionList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session newSession \u003d getTypicalSession();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(newSession);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        modelManager.setSessions(sessions);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster expectedTaskmaster \u003d new TaskmasterBuilder().withSession(newSession).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(expectedTaskmaster, new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(modelManager, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions_nullSessionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setSessions(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void addSession_validSession_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session newSession \u003d getTypicalSession();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        modelManager.addSession(newSession);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster expectedTaskmaster \u003d new TaskmasterBuilder().withSession(newSession).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(expectedTaskmaster, new UserPrefs());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(modelManager, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void deleteSession_sessionFound_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster actualTaskmaster \u003d new TaskmasterBuilder().withSession(getTypicalSession()).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model actualModel \u003d new ModelManager(actualTaskmaster, new UserPrefs());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster expectedTaskmaster \u003d new TaskmasterBuilder().build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Model expectedModel \u003d new ModelManager(expectedTaskmaster, new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        actualModel.deleteSession(getTypicalSession().getSessionName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_nullSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasSession((Session) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_sessionNotInSessionList_returnsFalse() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session newSession \u003d new Session("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"This session is not in the session list\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(modelManager.hasSession(newSession));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_sessionInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        modelManager.addSession(getTypicalSession());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(modelManager.hasSession(getTypicalSession()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_nullSessionName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasSession((SessionName) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_sessionNameNotInSessionList_returnsFalse() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(modelManager.hasSession(new SessionName(\"This session is not in the session list\")));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_sessionNameInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        modelManager.addSession(getTypicalSession());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(modelManager.hasSession(getTypicalSession().getSessionName()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void hasStudent_studentNotInStudentList_returnsFalse() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void hasStudent_studentInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Taskmaster taskmaster \u003d new TaskmasterBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Taskmaster differentTaskmaster \u003d new Taskmaster();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager \u003d new ModelManager(taskmaster, userPrefs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(taskmaster, userPrefs);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // different taskmaster -\u003e returns false"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTaskmaster, userPrefs)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taskmaster, userPrefs)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        differentUserPrefs.setTaskmasterFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taskmaster, differentUserPrefs)));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    Session initSessionWithAliceAndBenson() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        SessionName sName \u003d new SessionName(\"Test Session\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ArrayList\u003cStudent\u003e stds \u003d new ArrayList\u003cStudent\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        stds.add(ALICE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        stds.add(BOB);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new Session(sName,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                new SessionDateTime(LocalDateTime.now()),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                stds);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void markStudentRecord_success() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        SessionName sName \u003d new SessionName(\"Test Session\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.changeSession(sName);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.markStudentRecord(ALICE_STUDENT_RECORD, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(s.getStudentRecords().toString(),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"[e0123456|PRESENT|Class Participation Score: 0.00, \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        + \"e0456789|NO_RECORD|Class Participation Score: 0.00]\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.markStudentRecord(ALICE_STUDENT_RECORD, AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(s.getStudentRecords().toString(),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"[e0123456|ABSENT|Class Participation Score: 0.00, \""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        + \"e0456789|NO_RECORD|Class Participation Score: 0.00]\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void markStudent_noSession_failure() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NoSessionException.class, () -\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                modelManager.markStudentRecord(ALICE_STUDENT_RECORD, AttendanceType.PRESENT));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void markStudent_sessionNotSelected_failure() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.showStudentList();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NoSessionSelectedException.class, () -\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                modelManager.markStudentRecord(ALICE_STUDENT_RECORD, AttendanceType.PRESENT));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void markStudentWithNusnetId() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        SessionName sName \u003d new SessionName(\"Test Session\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.changeSession(sName);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.markStudentWithNusnetId(ALICE.getNusnetId(), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(s.getStudentRecords().toString(),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"[e0123456|PRESENT|Class Participation Score: 0.00, \""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        + \"e0456789|NO_RECORD|Class Participation Score: 0.00]\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.markStudentWithNusnetId(ALICE.getNusnetId(), AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(s.getStudentRecords().toString(),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"[e0123456|ABSENT|Class Participation Score: 0.00, \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        + \"e0456789|NO_RECORD|Class Participation Score: 0.00]\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void markStudentWithNusnetId_noSession_failure() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NoSessionException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .markStudentWithNusnetId(ALICE.getNusnetId(), AttendanceType.PRESENT));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void markStudentWithNusnetId_sessionNotSelected_failure() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.showStudentList();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NoSessionSelectedException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .markStudentWithNusnetId(ALICE.getNusnetId(), AttendanceType.PRESENT));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreStudent() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        SessionName sName \u003d new SessionName(\"Test Session\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.changeSession(sName);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.scoreStudent(ALICE_STUDENT_RECORD, VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(s.getStudentRecords().toString(),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"[e0123456|NO_RECORD|Class Participation Score: 0.00, \""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        + \"e0456789|NO_RECORD|Class Participation Score: 0.00]\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.scoreStudent(ALICE_STUDENT_RECORD, (VALID_SCORE_DOUBLE + 2));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(s.getStudentRecords().toString(),"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"[e0123456|NO_RECORD|Class Participation Score: 2.00, \""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        + \"e0456789|NO_RECORD|Class Participation Score: 0.00]\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreStudent_noSession_failure() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NoSessionException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .scoreStudent(ALICE_STUDENT_RECORD, VALID_SCORE_DOUBLE));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreStudent_sessionNotSelected_failure() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.showStudentList();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NoSessionSelectedException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .scoreStudent(ALICE_STUDENT_RECORD, VALID_SCORE_DOUBLE));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreStudentWithNusnetId() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        SessionName sName \u003d new SessionName(\"Test Session\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.changeSession(sName);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.scoreStudentWithNusnetId(ALICE.getNusnetId(), VALID_SCORE_DOUBLE);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(s.getStudentRecords().toString(),"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"[e0123456|NO_RECORD|Class Participation Score: 0.00, \""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        + \"e0456789|NO_RECORD|Class Participation Score: 0.00]\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.scoreStudentWithNusnetId(ALICE.getNusnetId(), (VALID_SCORE_DOUBLE + 1));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(s.getStudentRecords().toString(),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"[e0123456|NO_RECORD|Class Participation Score: 1.00, \""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        + \"e0456789|NO_RECORD|Class Participation Score: 0.00]\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreStudentWithNusnetId_noSession_failure() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NoSessionException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .scoreStudentWithNusnetId(ALICE.getNusnetId(), VALID_SCORE_DOUBLE));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreStudentWithNusnetId_sessionNotSelected_failure() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.showStudentList();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NoSessionSelectedException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .scoreStudentWithNusnetId(ALICE.getNusnetId(), VALID_SCORE_DOUBLE));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreAllStudents() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        SessionName sName \u003d new SessionName(\"Test Session\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.changeSession(sName);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        List\u003cStudentRecord\u003e studentRecords \u003d modelManager.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.markAllStudentRecords(studentRecords, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(\"[e0123456|PRESENT|Class Participation Score: 0.00,\""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + \" e0456789|PRESENT|Class Participation Score: 0.00]\", s.getStudentRecords().toString());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.scoreAllStudents(studentRecords, 2);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(\"[e0123456|PRESENT|Class Participation Score: 2.00,\""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + \" e0456789|PRESENT|Class Participation Score: 2.00]\", s.getStudentRecords().toString());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreAllStudents_noSession_failure() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        ArrayList\u003cStudentRecord\u003e studentRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        studentRecords.add(ALICE_STUDENT_RECORD);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        studentRecords.add(BENSON_STUDENT_RECORD);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NoSessionException.class, () -\u003e modelManager.scoreAllStudents(studentRecords, VALID_SCORE_DOUBLE));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void scoreAllStudents_sessionNotSelected_failure() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        List\u003cStudentRecord\u003e studentRecords \u003d modelManager.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.showStudentList();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NoSessionSelectedException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .scoreAllStudents(studentRecords, VALID_SCORE_DOUBLE));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void markAllStudents() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        SessionName sName \u003d new SessionName(\"Test Session\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.changeSession(sName);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        List\u003cStudentRecord\u003e studentRecords \u003d modelManager.getFilteredStudentRecordList();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.markAllStudentRecords(studentRecords, AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(\"[e0123456|PRESENT|Class Participation Score: 0.00,\""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + \" e0456789|PRESENT|Class Participation Score: 0.00]\", s.getStudentRecords().toString());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.markAllStudentRecords(studentRecords, AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(\"[e0123456|ABSENT|Class Participation Score: 0.00,\""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + \" e0456789|ABSENT|Class Participation Score: 0.00]\", s.getStudentRecords().toString());"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void markAllStudents_noSession_failure() {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ArrayList\u003cStudentRecord\u003e studentRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecords.add(ALICE_STUDENT_RECORD);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecords.add(BENSON_STUDENT_RECORD);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NoSessionException.class, () -\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                modelManager.markAllStudentRecords(studentRecords, AttendanceType.PRESENT));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void markAllStudents_sessionNotSelected_failure() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Session s \u003d initSessionWithAliceAndBenson();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ArrayList\u003cStudentRecord\u003e studentRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecords.add(ALICE_STUDENT_RECORD);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecords.add(BENSON_STUDENT_RECORD);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        modelManager.addSession(s);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modelManager.showStudentList();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NoSessionSelectedException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .markAllStudentRecords(studentRecords, AttendanceType.PRESENT));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 203,
      "sc-arecrow": 55,
      "josuaaah": 74,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/TaskmasterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalSession;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.DuplicateSessionException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionNotFoundException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.testutil.TaskmasterBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class TaskmasterTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final Taskmaster taskmaster \u003d new Taskmaster();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(Collections.emptyList(), taskmaster.getStudentList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskmaster.resetData(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void resetData_withValidReadOnlyTaskmaster_replacesData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Taskmaster newData \u003d getTypicalTaskmaster();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.resetData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(newData, taskmaster);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        TaskmasterStub newData \u003d new TaskmasterStub(newStudents);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e taskmaster.resetData(newData));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions_validSessionList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session newSession \u003d TypicalStudents.getTypicalSession();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(newSession);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        taskmaster.setSessions(sessions);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster expectedTaskmaster \u003d new TaskmasterBuilder().withSession(newSession).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(taskmaster, expectedTaskmaster);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions_nullSessionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskmaster.setSessions(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void addSession_validSession_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session newSession \u003d TypicalStudents.getTypicalSession();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        taskmaster.addSession(newSession);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster expectedTaskmaster \u003d new TaskmasterBuilder().withSession(newSession).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(taskmaster, expectedTaskmaster);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void addSession_duplicateSession_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session duplicateSession \u003d TypicalStudents.getTypicalSession();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster taskmasterWithSession \u003d new TaskmasterBuilder().withSession(duplicateSession).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(DuplicateSessionException.class, ()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e taskmasterWithSession.addSession(duplicateSession));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void deleteSession_sessionFound_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster actualTaskmaster \u003d new TaskmasterBuilder().withSession(getTypicalSession()).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster expectedTaskmaster \u003d new TaskmasterBuilder().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        actualTaskmaster.deleteSession(getTypicalSession().getSessionName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(expectedTaskmaster, actualTaskmaster);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void deleteSession_sessionNotFound_sessionNotFoundExceptionThrown() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster tmWithoutSession \u003d new Taskmaster();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(SessionNotFoundException.class, ()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e tmWithoutSession.deleteSession(getTypicalSession().getSessionName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_nullSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskmaster.hasSession((Session) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_sessionNotInSessionList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session newSession \u003d new Session("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"This session is not in the session list\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(taskmaster.hasSession(newSession));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_sessionInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        taskmaster.addSession(TypicalStudents.getTypicalSession());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(taskmaster.hasSession(TypicalStudents.getTypicalSession()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_nullSessionName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskmaster.hasSession((SessionName) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_sessionNameNotInSessionList_returnsFalse() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(taskmaster.hasSession(new SessionName(\"This session is not in the session list\")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void hasSession_sessionNameInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        taskmaster.addSession(TypicalStudents.getTypicalSession());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(taskmaster.hasSession(TypicalStudents.getTypicalSession().getSessionName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskmaster.hasStudent(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void hasStudent_studentNotInStudentList_returnsFalse() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(taskmaster.hasStudent(ALICE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void hasStudent_studentInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.addStudent(ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(taskmaster.hasStudent(ALICE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInStudentList_returnsTrue() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.addStudent(ALICE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(taskmaster.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e taskmaster.getStudentList().remove(0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * A stub ReadOnlyTaskmaster whose students list can violate interface constraints."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static class TaskmasterStub implements ReadOnlyTaskmaster {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        private final ObservableList\u003cStudentRecord\u003e studentRecords \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        private final ObservableList\u003cSession\u003e sessions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        TaskmasterStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        public ObservableList\u003cStudentRecord\u003e getStudentRecordList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            return studentRecords;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        public ObservableList\u003cSession\u003e getSessionList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            return sessions;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 8,
      "sc-arecrow": 98,
      "josuaaah": 100,
      "jayarengam": 2
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setTaskmasterFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTaskmasterFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/record/ClassParticipationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "class ClassParticipationTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    static final double CLASS_PART_SCORE \u003d 5.32;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    static final double CLASS_PART_SCORE_OVERFLOW \u003d 5.321;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private ClassParticipation emptyClassPart \u003d new ClassParticipation();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private ClassParticipation dupeClassPart \u003d new ClassParticipation(0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private ClassParticipation filledClassPart \u003d new ClassParticipation(CLASS_PART_SCORE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private ClassParticipation overflowClassPart \u003d new ClassParticipation(CLASS_PART_SCORE_OVERFLOW);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void getRawScore() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(emptyClassPart.getRawScore(), 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(filledClassPart.getRawScore(), CLASS_PART_SCORE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(emptyClassPart.toString(), \"Class Participation Score: 0.00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(filledClassPart.toString(), \"Class Participation Score: \" + CLASS_PART_SCORE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(overflowClassPart.toString(), \"Class Participation Score: \" + CLASS_PART_SCORE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(emptyClassPart, dupeClassPart);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertNotEquals(filledClassPart, emptyClassPart);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(emptyClassPart, emptyClassPart);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(overflowClassPart, overflowClassPart);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 37
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/record/StudentRecordListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentRecordListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final Student studentInList \u003d TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final Student studentNotInList \u003d TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final StudentRecord studentRecordOfStudentInList \u003d new StudentRecord("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            studentInList.getName(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            studentInList.getNusnetId(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            AttendanceType.PRESENT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            new ClassParticipation());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final StudentRecord studentRecordOfStudentNotInList \u003d new StudentRecord("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            studentNotInList.getName(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            studentNotInList.getNusnetId(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            AttendanceType.PRESENT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            new ClassParticipation());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final StudentRecordList studentRecordList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            StudentRecordListManager.of(Collections.singletonList(studentInList));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markStudentAttendance_idInList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecordList.markStudentAttendance(studentInList.getNusnetId(), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudentRecord\u003e expectedStudentRecords \u003d Collections.singletonList(studentRecordOfStudentInList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentRecordList expectedList \u003d new StudentRecordListManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedList.setStudentRecords(expectedStudentRecords);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(studentRecordList, expectedList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markStudentAttendance_idNotInList_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(StudentNotFoundException.class, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            -\u003e studentRecordList.markStudentAttendance("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                studentNotInList.getNusnetId(), AttendanceType.PRESENT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markAllStudents_idsInList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecordList.markAllStudentAttendances("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                Collections.singletonList(studentInList.getNusnetId()), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudentRecord\u003e expectedStudentRecords \u003d Collections.singletonList(studentRecordOfStudentInList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentRecordList expectedList \u003d new StudentRecordListManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedList.setStudentRecords(expectedStudentRecords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(studentRecordList, expectedList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void markAllStudents_idsNotInList_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(StudentNotFoundException.class, ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            -\u003e studentRecordList.markAllStudentAttendances("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                    Collections.singletonList(studentNotInList.getNusnetId()), AttendanceType.PRESENT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudentRecords_nullStudentRecordListManager_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            -\u003e studentRecordList.setStudentRecords((StudentRecordListManager) null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudentRecords_studentRecordList_replacesOwnListWithProvidedStudentRecordList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudentRecord\u003e expectedStudentRecords \u003d Collections.singletonList(studentRecordOfStudentNotInList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentRecordListManager expectedList \u003d new StudentRecordListManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedList.setStudentRecords(expectedStudentRecords);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecordList.setStudentRecords(expectedList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(studentRecordList, expectedList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudentRecords_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e studentRecordList.setStudentRecords((List\u003cStudentRecord\u003e) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudentRecords_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudentRecord\u003e expectedStudentRecords \u003d Collections.singletonList(studentRecordOfStudentNotInList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        StudentRecordList expectedList \u003d new StudentRecordListManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedList.setStudentRecords(expectedStudentRecords);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        studentRecordList.setStudentRecords(expectedStudentRecords);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(studentRecordList, expectedList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudentRecords_listWithDuplicateStudentRecords_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudentRecord\u003e listWithDuplicateStudentRecords \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                Arrays.asList(studentRecordOfStudentInList, studentRecordOfStudentInList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(DuplicateStudentException.class, ()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            -\u003e studentRecordList.setStudentRecords(listWithDuplicateStudentRecords));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            -\u003e studentRecordList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 115
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/record/StudentRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "class StudentRecordTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private StudentRecord testRecord \u003d new StudentRecord("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            new Name(\"Chiau Siak\"), new NusnetId(\"e0201166\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private StudentRecord testRecord2 \u003d new StudentRecord("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            new Name(\"Chiau Siak\"), new NusnetId(\"e0201166\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private StudentRecord testRecord3 \u003d new StudentRecord("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            new Name(\"Chiau Siak\"), new NusnetId(\"e0201167\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private StudentRecord testRecord4 \u003d new StudentRecord("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            new Name(\"Coh Ghiau Siak\"), new NusnetId(\"e0201166\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private StudentRecord testRecord5 \u003d new StudentRecord("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            new Name(\"Coh Ghiau Siak\"), new NusnetId(\"e0201166\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            AttendanceType.ABSENT, new ClassParticipation());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private ClassParticipation classPartTest \u003d new ClassParticipation();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private StudentRecord testRecord6 \u003d new StudentRecord("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            new Name(\"Coh Ghiau Siak\"), new NusnetId(\"e0201166\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            AttendanceType.ABSENT, classPartTest"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(new Name(\"Chiau Siak\"), testRecord.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void getNusnetId() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(new NusnetId(\"e0201166\"), testRecord.getNusnetId());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void getAttendanceType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(AttendanceType.NO_RECORD, testRecord.getAttendanceType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void getClassParticipation() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(new ClassParticipation(), testRecord.getClassParticipation());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                String.format(\"%s|%s|%s\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        testRecord.getNusnetId(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        testRecord.getAttendanceType().name(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        testRecord.getClassParticipation()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                testRecord.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(testRecord.equals(testRecord)); // same instance"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(testRecord.equals(testRecord2)); // same fields"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(testRecord.equals(\"some string\")); // not InstanceOf"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(testRecord.equals(null)); // not InstanceOf"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(testRecord.equals(testRecord3)); // different NusnetId"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(testRecord.equals(testRecord4)); // different name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(testRecord3.equals(testRecord4)); // different in both fields"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(testRecord3.equals(testRecord6)); // different attendance type"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(testRecord6.equals(testRecord5)); // different object for class part"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 72
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/session/SessionDateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class SessionDateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final LocalDateTime testLocalDateTime \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            LocalDateTime.of(2020, 11, 1, 10, 30);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionDateTime testSessionDateTime \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionDateTime(testLocalDateTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void getDateTimeString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expected \u003d \"01-11-2020 10:30\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(expected, testSessionDateTime.getDateTimeString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void getDisplayDateTimeString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String expected \u003d \"10:30 (Sun) \\n1 Nov 2020\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(expected, testSessionDateTime.getDisplayDateTimeString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 28
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/session/SessionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.DuplicateSessionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.exceptions.SessionNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class SessionListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Session typicalSession1 \u003d new Session("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionName(\"Typical session\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionDateTime(LocalDateTime.of(2020, 1, 1, 12, 0)),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Session typicalSession2 \u003d new Session("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionName(\"Typical session 2\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionDateTime(LocalDateTime.of(2020, 1, 1, 13, 0)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    // The typicalSessionList contains session1 and session2 only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionList typicalSessionList \u003d TypicalStudents.getTypicalSessionList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final SessionList emptySessionList \u003d SessionListManager.of(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void of() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(typicalSession1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(typicalSession2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList constructedSessionList \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(typicalSessionList, constructedSessionList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void get_sessionFound_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session retrievedSession1 \u003d typicalSessionList.get(typicalSession1.getSessionName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(typicalSession1, retrievedSession1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void get_sessionNotFound_exceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session missingSession \u003d new Session("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Missing Session\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2019, 1, 1, 13, 0)),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(SessionNotFoundException.class, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e typicalSessionList.get(missingSession.getSessionName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void getNumberOfSessions_twoSessions_returnTwo() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e twoSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        twoSessions.add(typicalSession1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        twoSessions.add(typicalSession2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList listWithTwoSessions \u003d SessionListManager.of(twoSessions);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(2, listWithTwoSessions.getNumberOfSessions());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void getNumberOfSessions_noSessions_returnZero() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(0, emptySessionList.getNumberOfSessions());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void contains_sessionFound_returnTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(typicalSession1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList listWithTypicalSession1 \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(listWithTypicalSession1.contains(typicalSession1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void contains_sessionNotFound_returnFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(typicalSession2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList listWithTypicalSession2 \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(listWithTypicalSession2.contains(typicalSession1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void contains_sessionNameFound_returnTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(typicalSession1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList listWithTypicalSession1 \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(listWithTypicalSession1.contains(typicalSession1.getSessionName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void contains_sessionNameNotFound_returnFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(typicalSession2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList listWithTypicalSession2 \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(listWithTypicalSession2.contains(typicalSession1.getSessionName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void isEmpty_emptySessionList_returnTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(emptySessionList.isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void isEmpty_nonEmptySessionList_returnFalse() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(typicalSessionList.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void add_sessionNotInList_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(typicalSession1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList sessionList \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessionList.add(typicalSession2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(typicalSessionList, sessionList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void add_sessionInList_exceptionThrown() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(typicalSession1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList sessionList \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(DuplicateSessionException.class, ()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e sessionList.add(typicalSession1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void deleteSession_sessionInList_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList listWithoutSession \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessions.add(typicalSession1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList listWithSession \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        listWithSession.delete(typicalSession1.getSessionName());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(listWithSession, listWithoutSession);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void deleteSession_sessionNotInList_sessionNotFoundExceptionThrown() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList listWithoutSession \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(SessionNotFoundException.class, ()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e listWithoutSession.delete(getTypicalSession().getSessionName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions_replacementSessionListManager_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList sessionList \u003d SessionListManager.of(sessions);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessionList.setSessions((SessionListManager) typicalSessionList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(typicalSessionList, sessionList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions_replacementListOfUniqueSessions_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e listOfNoSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList sessionList \u003d SessionListManager.of(listOfNoSessions);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e listOfTwoSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        listOfTwoSessions.add(typicalSession1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        listOfTwoSessions.add(typicalSession2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessionList.setSessions(listOfTwoSessions);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(typicalSessionList, sessionList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void setSessions_replacementListOfDuplicateSessions_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e listOfNoSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList sessionList \u003d SessionListManager.of(listOfNoSessions);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e listOfDuplicateSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        listOfDuplicateSessions.add(typicalSession1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        listOfDuplicateSessions.add(typicalSession1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(DuplicateSessionException.class, ()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e sessionList.setSessions(listOfDuplicateSessions));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        ObservableList\u003cSession\u003e unmodifiableObservableList \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                        FXCollections.observableArrayList(typicalSession1, typicalSession2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(typicalSessionList.asUnmodifiableObservableList(), unmodifiableObservableList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_sameSessionList_returnTrue() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(typicalSessionList.equals(typicalSessionList));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_sameInternalList_returnTrue() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cSession\u003e listOfTwoSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        listOfTwoSessions.add(typicalSession1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        listOfTwoSessions.add(typicalSession2);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        SessionList sessionList \u003d SessionListManager.of(listOfTwoSessions);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(sessionList.equals(typicalSessionList));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_differentInternalList_returnFalse() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(typicalSessionList.equals(emptySessionList));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 213
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/session/SessionNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class SessionNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SessionName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SessionName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SessionName.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(SessionName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(SessionName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(SessionName.isValidName(\" session\")); // begins with space"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(SessionName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(SessionName.isValidName(\"Session*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(SessionName.isValidName(\"new session\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(SessionName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(SessionName.isValidName(\"new session 1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(SessionName.isValidName(\"New Session\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(SessionName.isValidName(\"New Session With A Very Very Very Very Long Name\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 41
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/session/SessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "package seedu.taskmaster.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecordListManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "public class SessionTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final List\u003cStudent\u003e typicalStudents \u003d TypicalStudents.getTypicalStudents();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Student firstStudent \u003d typicalStudents.get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Student lastStudent \u003d typicalStudents.get(typicalStudents.size() - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final StudentRecordList typicalClearStudentRecordList \u003d StudentRecordListManager.of(typicalStudents);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Session typicalSessionByStudentList \u003d new Session("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            typicalStudents);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    private final Session typicalSessionByStudentRecordList \u003d new Session("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            typicalClearStudentRecordList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(typicalSessionByStudentList, typicalSessionByStudentRecordList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void getSessionName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(new SessionName(\"Typical Session\"), typicalSessionByStudentList.getSessionName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(new SessionName(\"Typical Session\"), typicalSessionByStudentRecordList.getSessionName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void getSessionDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalSessionByStudentList.getSessionDateTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalSessionByStudentRecordList.getSessionDateTime());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void getStudentRecords() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(typicalClearStudentRecordList.asUnmodifiableObservableList(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalSessionByStudentList.getStudentRecords());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(typicalClearStudentRecordList.asUnmodifiableObservableList(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalSessionByStudentRecordList.getStudentRecords());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void clearAttendance() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        StudentRecordList markedStudentRecordList \u003d StudentRecordListManager.of(typicalStudents);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        markedStudentRecordList.markStudentAttendance(firstStudent.getNusnetId(), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        markedStudentRecordList.markStudentAttendance(lastStudent.getNusnetId(), AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session sessionWithMarkedRecords \u003d new Session("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                markedStudentRecordList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessionWithMarkedRecords.clearAttendance();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(sessionWithMarkedRecords, typicalSessionByStudentRecordList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void updateStudentRecords_validRecords_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        StudentRecordList markedStudentRecordList \u003d StudentRecordListManager.of(typicalStudents);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        markedStudentRecordList.markStudentAttendance(firstStudent.getNusnetId(), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        markedStudentRecordList.markStudentAttendance(lastStudent.getNusnetId(), AttendanceType.ABSENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session sessionWithMarkedRecords \u003d new Session("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                markedStudentRecordList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session sessionToUpdate \u003d new Session("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalClearStudentRecordList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        sessionToUpdate.updateStudentRecords(markedStudentRecordList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertEquals(sessionWithMarkedRecords, sessionToUpdate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void updateStudentRecords_extraStudent_exceptionThrown() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cStudent\u003e biggerStudentList \u003d new ArrayList\u003c\u003e(typicalStudents);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        biggerStudentList.add(new StudentBuilder().withName(\"Extra student\").withNusnetId(\"e0999999\").build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        StudentRecordList biggerStudentRecordList \u003d StudentRecordListManager.of(biggerStudentList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session sessionToUpdate \u003d new Session("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalClearStudentRecordList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertThrows(StudentNotFoundException.class, ()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            -\u003e sessionToUpdate.updateStudentRecords(biggerStudentRecordList.asUnmodifiableObservableList()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_sameSession_returnTrue() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(typicalSessionByStudentList.equals(typicalSessionByStudentList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertTrue(typicalSessionByStudentRecordList.equals(typicalSessionByStudentRecordList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_differentSessionName_returnFalse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session differentSessionByStudentList \u003d new Session("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Different Session\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalStudents);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session differentSessionByStudentRecordList \u003d new Session("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Different Session\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalClearStudentRecordList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(typicalSessionByStudentList.equals(differentSessionByStudentList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(typicalSessionByStudentRecordList.equals(differentSessionByStudentRecordList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_differentSessionDateTime_returnFalse() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session differentSessionByStudentList \u003d new Session("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2019, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalStudents);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session differentSessionByStudentRecordList \u003d new Session("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2019, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                typicalClearStudentRecordList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(typicalSessionByStudentList.equals(differentSessionByStudentList));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(typicalSessionByStudentRecordList.equals(differentSessionByStudentRecordList));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public void equals_differentStudentRecords_returnFalse() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        List\u003cStudent\u003e differentStudents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        differentStudents.add(new StudentBuilder().build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        StudentRecordList differentStudentRecordList \u003d StudentRecordListManager.of(differentStudents);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session differentSessionByStudentList \u003d new Session("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2019, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                differentStudents);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session differentSessionByStudentRecordList \u003d new Session("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Typical Session\"),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2019, 11, 1, 10, 30)),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                differentStudentRecordList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(typicalSessionByStudentList.equals(differentSessionByStudentList));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        assertFalse(typicalSessionByStudentRecordList.equals(differentSessionByStudentRecordList));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "josuaaah": 169
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/student/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/student/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // Keywords match telegram, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withTelegram(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withEmail(\"alice@email.com\").withNusnetId(\"e0271188\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "sc-arecrow": 7,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/student/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/student/NusnetIdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class NusnetIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new NusnetId(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NusnetId(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NusnetId.isValidNusnetId(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"e\")); // e only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"e1123456\")); // e not followed by 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(NusnetId.isValidNusnetId(\"e01234567\")); // one extra length"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(NusnetId.isValidNusnetId(\"e0123456\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 37
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/student/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NUSNETID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // different telegram and email but same nusnetId -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                .withTelegram(VALID_TELEGRAM_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // different name but same nusnetId -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // same name, same telegram, different nusnetId -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withNusnetId(VALID_NUSNETID_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // same name, same email, different nusnetId -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTelegram(VALID_TELEGRAM_BOB).withNusnetId(VALID_NUSNETID_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // same name, same telegram, same email, different nusnetId -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withNusnetId(VALID_NUSNETID_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // different telegram -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTelegram(VALID_TELEGRAM_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withNusnetId(VALID_NUSNETID_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 18,
      "sc-arecrow": 22,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/student/TelegramTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class TelegramTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Telegram(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void constructor_invalidTelegram_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String invalidTelegram \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Telegram(invalidTelegram));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void isValidTelegram() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // null telegram account"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Telegram.isValidTelegram(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // invalid telegram accounts"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"91\")); // less than 5 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"@\")); // invalid character"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // valid telegram accounts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"91112\")); // exactly 5 characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"asd_aws\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"12429asdfadsf3842033123\")); // long account"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 38
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/student/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NUSNETID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withNusnetId(VALID_NUSNETID_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((UniqueStudentList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudents(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 10,
      "sc-arecrow": 162
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String INVALID_TELEGRAM \u003d \"@sc_arecrow\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String VALID_TELEGRAM \u003d BENSON.getTelegram().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getNusnetId().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_TELEGRAM, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                null, VALID_TELEGRAM, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void toModelType_invalidTelegram_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, INVALID_TELEGRAM, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d Telegram.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void toModelType_nullTelegram_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Telegram.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_TELEGRAM, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                VALID_NAME, VALID_TELEGRAM, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_TELEGRAM, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d NusnetId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_TELEGRAM, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, NusnetId.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_TELEGRAM, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 28,
      "sc-arecrow": 19,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/storage/JsonSerializableSessionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class JsonSerializableSessionListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            \"JsonSerializableSessionListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final Path TYPICAL_SESSION_LIST_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalSessionList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final Path INVALID_SESSION_LIST_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidSessionList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final Path DUPLICATE_SESSION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateNusnetIdSessionList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void toModelType_typicalSessionListFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        JsonSerializableSessionList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SESSION_LIST_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                JsonSerializableSessionList.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        SessionList sessionListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        SessionList typicalSessionList \u003d TypicalStudents.getTypicalSessionList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertEquals(sessionListFromFile, typicalSessionList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void toModelType_invalidSessionListFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        JsonSerializableSessionList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SESSION_LIST_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                JsonSerializableSessionList.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void toModelType_duplicateSessionName_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        JsonSerializableSessionList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_SESSION_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                JsonSerializableSessionList.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableSessionList.MESSAGE_DUPLICATE_SESSION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 48
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/storage/JsonSerializableSessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class JsonSerializableSessionTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            \"JsonSerializableSessionTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final Path TYPICAL_SESSION_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalSession.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final Path INVALID_SESSION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidSession.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_SESSION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentSession.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Session getTypicalSession() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(\"01-01-2020 1200\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                DateTimeFormatter.ofPattern(\"DD-MM-yyyy HHmm\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Session session \u003d new Session(new SessionName(\"Typical session\"), new SessionDateTime(dateTime),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                TypicalStudents.getTypicalStudents());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        session.markStudentAttendance(new NusnetId(\"e0123456\"), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        session.scoreStudentParticipation(new NusnetId(\"e0456789\"), 5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        session.markStudentAttendance(new NusnetId(\"e0946875\"), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        session.scoreStudentParticipation(new NusnetId(\"e0946875\"), 7);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void toModelType_typicalSessionFile_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        JsonSerializableSession dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SESSION_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                JsonSerializableSession.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Session sessionFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Session typicalSession \u003d getTypicalSession();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertEquals(sessionFromFile, typicalSession);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void toModelType_invalidSessionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        JsonSerializableSession dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SESSION_FILE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                JsonSerializableSession.class).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void toModelType_duplicateStudent_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        JsonSerializableSession dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_SESSION_FILE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                JsonSerializableSession.class).get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableSession.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jayarengam": 69
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/storage/JsonSerializableTaskmasterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class JsonSerializableTaskmasterTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaskmasterTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsTaskmaster.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentTaskmaster.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentTaskmaster.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonSerializableTaskmaster dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                JsonSerializableTaskmaster.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Taskmaster taskmasterFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Taskmaster typicalStudentsTaskmaster \u003d TypicalStudents.getTypicalTaskmaster();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(taskmasterFromFile, typicalStudentsTaskmaster);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonSerializableTaskmaster dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                JsonSerializableTaskmaster.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        JsonSerializableTaskmaster dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                JsonSerializableTaskmaster.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTaskmaster.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 6,
      "sc-arecrow": 41
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/storage/JsonTaskmasterStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class JsonTaskmasterStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTaskmasterStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void readTaskmaster_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTaskmaster(null,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                \"SessionList.json\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTaskmaster(\"taskmaster.json\", null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTaskmaster\u003e readTaskmaster(String taskmasterFilePath, String sessionListFilePath)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return new JsonTaskmasterStorage(Paths.get(taskmasterFilePath), Paths.get(sessionListFilePath))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                .readTaskmaster(addToTestDataPathIfNotNull(taskmasterFilePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertFalse(readTaskmaster(\"NonExistentFile.json\", \"NoFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaskmaster(\"notJsonFormatTaskmaster.json\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                \"SessionList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void readTaskmaster_invalidStudentTaskmaster_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaskmaster(\"invalidStudentTaskmaster.json\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                \"SessionList.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void readTaskmaster_invalidAndValidStudentTaskmaster_throwDataConversionException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaskmaster(\"invalidAndValidStudentTaskmaster.json\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                \"SessionList.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void readAndSaveTaskmaster_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Path taskmasterFilePath \u003d testFolder.resolve(\"TempTaskmaster.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Path sessionListFilePath \u003d testFolder.resolve(\"TempSessionList.json\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Taskmaster original \u003d getTypicalTaskmaster();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        JsonTaskmasterStorage jsonTaskmasterStorage \u003d new JsonTaskmasterStorage(taskmasterFilePath,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                sessionListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        jsonTaskmasterStorage.saveTaskmaster(original, taskmasterFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ReadOnlyTaskmaster readBack \u003d jsonTaskmasterStorage.readTaskmaster(taskmasterFilePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(original, new Taskmaster(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        jsonTaskmasterStorage.saveTaskmaster(original, taskmasterFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        readBack \u003d jsonTaskmasterStorage.readTaskmaster(taskmasterFilePath).get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(original, new Taskmaster(readBack));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        jsonTaskmasterStorage.saveTaskmaster(original); // file path not specified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        readBack \u003d jsonTaskmasterStorage.readTaskmaster().get(); // file path not specified"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(original, new Taskmaster(readBack));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void saveTaskmaster_nullTaskmaster_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskmaster(null, \"SomeFile.json\", \"SessionList.json\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private void saveTaskmaster(ReadOnlyTaskmaster taskmaster, String taskmasterFilePath, String sessionListFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            new JsonTaskmasterStorage(Paths.get(taskmasterFilePath), Paths.get(sessionListFilePath))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    .saveTaskmaster(taskmaster, addToTestDataPathIfNotNull(taskmasterFilePath));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void saveTaskmaster_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskmaster(new Taskmaster(), \"SomeFile.json\", null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskmaster(new Taskmaster(), null, \"SessionList.json\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 9,
      "sc-arecrow": 80,
      "jayarengam": 28
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        userPrefs.setTaskmasterFilePath(Paths.get(\"taskmaster.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 5,
      "sc-arecrow": 1,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.getTypicalTaskmaster;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.ReadOnlyTaskmaster;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        JsonTaskmasterStorage taskmasterStorage \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                new JsonTaskmasterStorage(getTempFilePath(\"ab\"), getTempFilePath(\"cd\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        storageManager \u003d new StorageManager(taskmasterStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void taskmasterReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         * {@link JsonTaskmasterStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTaskmasterStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Taskmaster original \u003d getTypicalTaskmaster();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        storageManager.saveTaskmaster(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        ReadOnlyTaskmaster retrieved \u003d storageManager.readTaskmaster().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertEquals(original, new Taskmaster(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public void getTaskmasterFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        assertNotNull(storageManager.getTaskmasterFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 6,
      "sc-arecrow": 10,
      "jayarengam": 3,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public EditStudentDescriptorBuilder(EditCommand.EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        descriptor.setTelegram(student.getTelegram());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        descriptor.setNusnetId(student.getNusnetId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Sets the {@code Telegram} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public EditStudentDescriptorBuilder withTelegram(String telegram) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        descriptor.setTelegram(new Telegram(telegram));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Sets the {@code Address} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public EditStudentDescriptorBuilder withAddress(String nusnetId) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        descriptor.setNusnetId(new NusnetId(nusnetId));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 16,
      "sc-arecrow": 72
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/StudentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Telegram;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static final String DEFAULT_TELEGRAM \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final String DEFAULT_NUSNETID \u003d \"e0012312\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private Telegram telegram;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private NusnetId nusnetId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Creates a {@code StudentBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        telegram \u003d new Telegram(DEFAULT_TELEGRAM);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        nusnetId \u003d new NusnetId(DEFAULT_NUSNETID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        telegram \u003d studentToCopy.getTelegram();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        nusnetId \u003d studentToCopy.getNusnetId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Sets the {@code NusnetId} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public StudentBuilder withNusnetId(String nusnetId) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.nusnetId \u003d new NusnetId(nusnetId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Sets the {@code Telegram} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public StudentBuilder withTelegram(String telegram) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.telegram \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new Student(name, telegram, email, nusnetId, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 22,
      "sc-arecrow": 74
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/StudentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_NUSNETID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        sb.append(PREFIX_TELEGRAM + student.getTelegram().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        sb.append(PREFIX_NUSNETID + student.getNusnetId().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        descriptor.getTelegram().ifPresent(telegram -\u003e sb.append(PREFIX_TELEGRAM).append(telegram.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        descriptor.getNusnetId().ifPresent(address -\u003e sb.append(PREFIX_NUSNETID).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 14,
      "sc-arecrow": 12,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/TaskmasterBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * A utility class to help with building Taskmaster objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " *     {@code Taskmaster ab \u003d new TaskmasterBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class TaskmasterBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private Taskmaster taskmaster;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public TaskmasterBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster \u003d new Taskmaster();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public TaskmasterBuilder(Taskmaster taskmaster) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        this.taskmaster \u003d taskmaster;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Adds a new {@code Student} to the {@code Taskmaster} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public TaskmasterBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        taskmaster.addStudent(student);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Adds a new {@code Session} to the {@code Taskmaster} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public TaskmasterBuilder withSession(Session session) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        taskmaster.addSession(session);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public Taskmaster build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return taskmaster;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "sc-arecrow": 31,
      "josuaaah": 9
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 4,
      "sc-arecrow": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final Index INDEX_FIRST_STUDENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final Index INDEX_SECOND_STUDENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final Index INDEX_THIRD_STUDENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 2,
      "sc-arecrow": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/TypicalStudentRecords.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import static seedu.taskmaster.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class TypicalStudentRecords {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final StudentRecord ALICE_STUDENT_RECORD \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            new StudentRecord(ALICE.getName(), ALICE.getNusnetId());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static final StudentRecord BENSON_STUDENT_RECORD \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "            new StudentRecord(BENSON.getName(), BENSON.getNusnetId());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sc-arecrow": 14
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/testutil/TypicalStudents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NUSNETID_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_NUSNETID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.Taskmaster;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.record.AttendanceType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.record.StudentRecord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.Session;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import seedu.taskmaster.model.session.SessionListManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "import seedu.taskmaster.model.session.SessionName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "import seedu.taskmaster.model.student.NusnetId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student ALICE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new StudentBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withNusnetId(\"e0123456\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            .withTelegram(\"alicepauline\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student BENSON \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new StudentBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            .withNusnetId(\"e0456789\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            .withTelegram(\"benson_m\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student CARL \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new StudentBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    .withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    .withTelegram(\"kurzzz\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    .withNusnetId(\"e0312654\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student DANIEL \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            new StudentBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    .withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    .withTelegram(\"dms_only\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    .withNusnetId(\"e0987465\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                    .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            .withTelegram(\"mellie\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withNusnetId(\"e0946875\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            .withTelegram(\"fionakunz\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withNusnetId(\"e0319843\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withName(\"George Best\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            .withTelegram(\"george_worst\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withNusnetId(\"e0731894\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withTelegram(\"8482424\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withNusnetId(\"e0134679\").build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withTelegram(\"8482131\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withNusnetId(\"e0235689\").build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withTelegram(VALID_TELEGRAM_AMY)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withNusnetId(VALID_NUSNETID_AMY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withNusnetId(VALID_NUSNETID_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns a {@code Session} with all the typical students."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    public static Session getTypicalSession() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return new Session("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionName(\"Typical session\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 1, 1, 12, 0)),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "                getTypicalStudents());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "josuaaah"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns a {@code Session} with all the typical students and modified {@code ClassParticipation} scores."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static Session getTypicalScoredSession() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Session modifiedSession \u003d new Session("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                new SessionName(\"Typical session 2\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 1, 1, 12, 0)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                getTypicalStudents());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        modifiedSession.markAllStudentAttendances(getTypicalNusnetIds(), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        modifiedSession.scoreAllParticipation("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                getTypicalStudents().stream().map(Student::getNusnetId).collect(Collectors.toList()), 5);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        modifiedSession.scoreStudentParticipation(ALICE.getNusnetId(), 4);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        modifiedSession.scoreStudentParticipation(CARL.getNusnetId(), 4);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return modifiedSession;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "     * Returns a {@code Taskmaster} with all the typical students and 1 session."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static Taskmaster getTypicalTaskmaster() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Taskmaster typicalTaskmaster \u003d new Taskmaster();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "            typicalTaskmaster.addStudent(student);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        typicalTaskmaster.addSession(getTypicalSession());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        return typicalTaskmaster;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns a {@code Taskmaster} with all the typical students and 2 sessions, one of which is scored."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static Taskmaster getScoredTaskmaster() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Taskmaster taskmaster \u003d getTypicalTaskmaster();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskmaster.setSessions(getTypicalScoredSessionList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return taskmaster;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns an {@code SessionList} with all the typical students and two unmodified {@code Sessions}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static SessionList getTypicalSessionList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        SessionList sessionList \u003d new SessionListManager();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "josuaaah"
        },
        "content": "        Session typicalSession \u003d getTypicalSession();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        sessionList.add(typicalSession);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Session typicalSession2 \u003d new Session("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                new SessionName(\"Typical session 2\"),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                new SessionDateTime(LocalDateTime.of(2020, 1, 1, 13, 0)),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                getTypicalStudents());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        sessionList.add(typicalSession2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return sessionList;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns an {@code SessionList} with all the typical students and two unmodified {@code Sessions}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static SessionList getTypicalScoredSessionList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        SessionList sessionList \u003d new SessionListManager();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        sessionList.add(getTypicalSession());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        sessionList.add(getTypicalScoredSession());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return sessionList;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns a List containing all the typical students ."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns a list containing the NUSNET IDs of the typical students."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static List\u003cNusnetId\u003e getTypicalNusnetIds() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return getTypicalStudents().stream()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .map(Student::getNusnetId)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Marks all students in a typical session as present."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static void markAllAsPresentInTypicalSession(Session typicalSession) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        typicalSession.markAllStudentAttendances(getTypicalNusnetIds(), AttendanceType.PRESENT);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * Returns a list containing the StudentRecords of all the typical students,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     * without modified ClassParticipation and Attendance fields."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static List\u003cStudentRecord\u003e getTypicalStudentRecords() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return getTypicalSession().getStudentRecords();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * Returns a list containing the StudentRecords of all the typical students marked as present,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     * without modified ClassParticipation and Attendance fields."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    public static List\u003cStudentRecord\u003e getTypicalPresentStudentRecords() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        Session typicalSession \u003d getTypicalSession();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        markAllAsPresentInTypicalSession(typicalSession);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "        return typicalSession.getStudentRecords();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sc-arecrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 14,
      "sc-arecrow": 36,
      "josuaaah": 82,
      "jayarengam": 72,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/taskmaster/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package seedu.taskmaster.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static seedu.taskmaster.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import seedu.taskmaster.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003c?import seedu.taskmaster.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "\u003cfx:root type\u003d\"seedu.taskmaster.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 5
    }
  }
]
