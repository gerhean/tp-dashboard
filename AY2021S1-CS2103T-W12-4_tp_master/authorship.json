[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003eWelcome to Serenity! ðŸ‘‹\u003c/h1\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Serenity is a one-stop software for CS2101 tutors to manage your CS2101 classes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Check out our [User Guide](docs/UserGuide.md) to get started!"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 9,
      "ryanlimjr": 1,
      "-": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "mainClassName \u003d \u0027team.serenity.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    archiveName \u003d \u0027serenity.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "# About Us "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "**Serenity** was developed by the team `W12-4`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Lim Chun Yong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/chunyongg.png\" width\u003d\"200px\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/chunyongg) |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Role: Team Leader"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Lim Jia Rui Ryan"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/ryanlimjr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/ryanlimjr) |"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Lau Xin Yee"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/xinyee20.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/xinyee20) |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Neo Rui En Maybelline"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/successs404.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/successs404) |"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Code quality"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "### Bu Wen Jin"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cimg src\u003d\"/docs/images/nijnxw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[github](https://github.com/Nijnxw) |"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "* Responsibilities: Scheduling and tracking, Integration"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 30,
      "-": 27
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the userâ€™s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()`â€‰â€”â€‰Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()`â€‰â€”â€‰Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()`â€‰â€”â€‰Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David â€¦â€‹` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the oppositeâ€‰â€”â€‰it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David â€¦â€‹` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Has a need to manage a significant number of students from various CS2101 classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Has a need to keep track of the students\u0027 attendance throughout the semester"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Has a need to keep track of the students\u0027 participation throughout the semester"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Likes to keep track of the students\u0027 unanswered questions"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Likes to handle most administrative work via one platform"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Serenity can help assist the management of a CS2101 class "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "faster than a typical mouse/GUI driven app through easy reference and editing of class data."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Serenity consolidates administrative information on a Graphical User Interface for convenient viewing. "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "* Serenity gives the tutor ability to export data which can be used in other software, e.g. Microsoft Excel."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a â€¦â€‹                                    | I want to â€¦â€‹                     | So that I canâ€¦â€‹                                                        |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "successs404"
        },
        "content": "| -------- | ------------------------------------------ | -------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *`  | Tutor | Set up classes that I am teaching at the start of every semester | Perform administrative functions more efficiently |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *`  | Tutor | Mark attendance across every lesson | Grade effectively at the end of the term |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `*` | Tutor | Flag the attendance of a student | Be reminded to check up on this student after lesson |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *` | Tutor | View the attendance sheet for each class | Identify the students who did not attend a lesson |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `*` | Tutor | Export monthly attendance of all my classes as a CSV file | Submit attendance as a softcopy to the school |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *` | Tutor | Give a participation score to a student | Grade the student\u0027s participation |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Use a participation system to keep track of participation | Grade effectively at the end of the term |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Generate the average score for each student across each session | Have an additional set of data to cross reference to |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `*` | Tutor | Export participation scores of all my classes as a CSV file | Submit it as a softcopy for marks generation |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* * *` | Tutor | Add a question to the question list | Be reminded to answer the question after the lesson ends |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Remove a question from the question list | Prevent the list from becoming too cluttered |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | View the list of questions for each class | Identify the questions that I have not answered in class |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Forgetful tutor | Mark the question that I have addressed as answered | Avoid re-addressing the same question in class |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Import data of my students | Avoid manually entering the data |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor | Access the list of commands easily on the software without referring to the user guide | Operate the software easily while teaching in class |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor who dislikes clutter | Use an app that does not take up too much screen space | Continue to teach the content effectively |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "successs404"
        },
        "content": "| `* *` | Tutor who has other important things to remember | The list of commands to be as short as possible | Be productive trying to recall more important things for the lesson |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "(For all use cases below, the **System** is `Serenity` and the **Actor** is the `User`, unless specified otherwise)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Setting Up**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC01: Set up tutorial group"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - The tutorial group is added to the tutorial group list upon successful command."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - Students are added to the student list in the respective tutorial groups upon successful command."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User chooses a csv file to upload."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User adds the csv file in the same folder as the JAR file."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. Serenity reads the csv file."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    4. Serenity adds the tutorial groups and students to the respective lists."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Attendance Taking**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC02: For a tutorial group, mark all students present for a lesson"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - Each student is marked present for a lesson upon successful command."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to mark all students from a specific tutorial group present for a lesson."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the updated attendance list for the lesson."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC03: Mark a student present or absent for a specific lesson"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - A specific student is marked present or absent for a lesson upon successful command."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to mark a student from a specific tutorial group present or absent for a lesson."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the updated attendance list for the lesson."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC04: For a tutorial group, view attendance of each student for every lesson"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - User can view the attendance list of a lesson for a specific tutorial class upon successful command."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to view the attendance list for a lesson of a specific tutorial class."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the attendance list for the lesson."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Class Participation**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC05: Add class participation marks to a student"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - For a lesson, class participation marks for a specific student is added upon successful command."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to add class participation marks to a student."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the updated class participation marks of the student."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC06: View average class participation score of all students in a tutorial group"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - User can view the average class participation score of all students in a tutorial group upon successful command."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to view the average class participation score of all students in a tutorial group."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. User receives a confirmation message."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    3. System shows the average class participation score of all students in the tutorial group"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Addressing Questions**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC07: Add a question to a tutorial groupâ€™s question list"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - Question will be added into a question list upon successful command."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to create a new question for a tutorial group."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. System shows an updated list of questions."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "UC08: View all questions of a tutorial group"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "System: Serenity"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Preconditions: Tutorial groups and students have been set up"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    - User can view the list of questions upon successful command."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1. User requests to view the list of questions for a tutorial group."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    2. System shows the attendance list for the lesson."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    1a. Incomplete details are given."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        1a1. System shows an error message."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "```"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "successs404"
        },
        "content": "2.  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 161,
      "xinyee20": 14,
      "successs404": 19,
      "-": 332
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "![Serenity Logo](images/logo.png)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "By: `Team Serenity` Since: `Aug 2020`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "[1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "[2. Quick start](#2-quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "[3. About](#3-about)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.1. Structure of this document](#31-structure-of-this-document)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2. Reading this document](#32-reading-this-document)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2.1. Terminology related to the _GUI_](#321-terminology-related-to-the-_gui_)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2.2. General symbols and syntax](#322-general-symbols-and-syntax)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "   "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2.3. Command syntax and usage](#323-command-syntax-and-usage)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "   "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2.4. Command format](#324-command-format)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "[4. Features](#4-features)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1. Setup](#41-setup)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1.1. Add a new tutorial group from CSV file: `addgrp`](#411-add-a-new-tutorial-group-from-csv-file-addgrp)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1.2. Delete-an-existing-tutorial-group: `delgrp`](#412-delete-an-existing-tutorial-group-delgrp)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1.3. Add a new tutorial lesson: `addlsn`](#413-add-a-new-tutorial-lesson-addlsn)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1.4. Delete an existing tutorial lesson: `dellsn`](#414-delete-an-existing-tutorial-lesson-dellsn)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1.5. Add a new student: `addstudent`](#415-add-a-new-student-addstudent)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1.6. Delete an existing student: `delstudent`](#416-delete-an-existing-student-delstudent)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2. Attendance taking](#42-attendance-taking)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.1. Mark a student as present: `markpresent`](#421-mark-a-student-as-present-markpresent)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.2. Mark a student as absent: `markabsent`](#422-mark-a-student-as-absent-markabsent)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.3 Mark all students as present: `markpresent all`](#423-mark-all-students-as-present-markpresent-all)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.4. Flag attendance of a student: `flagatt`](#424-flag-attendance-of-a-student-flagatt)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2.5. Export attendance as CSV file: `exportatt`](#425-export-attendance-as-csv-file-exportatt)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3. Participation marking](#43-participation-marking)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.1. Add participation score of a student: `addscore`](#431-add-participation-score-of-a-student-addscore)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.2. Subtract participation score of a student: `subscore`](#432-subtract-participation-score-of-a-student-subscore)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3.3. Export participation scores as CSV file: `exportscore`](#433-export-participation-scores-as-csv-file-exportscore)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4. Question addressing](#44-question-addressing)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.1. Add a new question: `addqn`](#441-add-a-new-question-addqn)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4.2. Delete an existing question: `delqn`](#442-delete-an-existing-question-delqn)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.5. Utility viewing](#45-utility-viewing)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.5.1. View an existing tutorial group: `viewgrp`](#451-view-an-existing-tutorial-group-viewgrp)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.5.2. View an existing tutorial lesson: `viewlsn`](#452-view-an-existing-tutorial-lesson-viewlsn)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "[5. FAQ](#5-faq)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "[6. Command summary](#6-command-summary)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[6.1. Setup commands](#61-setup-commands)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[6.2. Attendance taking commands](#62-attendance-taking-commands)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[6.3. Participation marking commands](#63-participation-marking-commands)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[6.4. Question addressing commands](#64-question-addressing-commands)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;[6.5. Utlity viewing commands](#65-utility-viewing-commands)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Welcome to the User Guide of **Serenity**!"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "Are you a tutor teaching CS2101 in NUS? Do you struggle to keep track of students\u0027 attendance and class participation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "on many different excel sheets for different lessons? Do you also tend to forget to address questions students asked"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "during lessons? Fret not, our application, **Serenity**, will help keep you sane when doing the necessary administrative"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "work."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Serenity** is a desktop application that helps CS2101 tutors manage their lessons. This application is optimized"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "for use through a _Command Line Interface (CLI)_, meaning that you operate the application by typing commands into a"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "command box. This application also has a _Graphical User Interface (GUI)_, where you can interact with the application"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "through graphical icons such as buttons."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "This user guide serves to provide you with an in-depth documentation on how to set up and use our application."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "With that said, let\u0027s get [started](#2-quick-start)!"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "## 2. Quick start"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "To get started with using **Serenity**, you can follow these steps:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "2. Download the latest `Serenity.jar` from [here]()."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your **Serenity** application."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "4. Double-click the file to start the app. The _GUI_ similar to the image below should appear in a few seconds."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": "5. Type the command in the _Command Box_ and press `Enter` to execute it. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "6. Refer to the [Features](#4-features) below for details of each command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "successs404"
        },
        "content": "## 3. About"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 3.1. Structure of this document"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "successs404"
        },
        "content": "This User Guide have been structured such that you can easily find what you need."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "successs404"
        },
        "content": "In the next subsection [Reading this document](#32-reading-this-document),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "successs404"
        },
        "content": "you can find useful tips on reading this document."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "successs404"
        },
        "content": "It is then followed by section [Features](#4-features),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "successs404"
        },
        "content": "where you can find details of the three main features of **Serenity**:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Attendance taking"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Participation marking"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Question addressing"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 3.2. Reading this document"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "successs404"
        },
        "content": "In this subsection, you can find the explanation of the technical terms, symbols and syntax that are used in this"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "successs404"
        },
        "content": "User Guide."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 3.2.1. Terminology related to the _GUI_"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "successs404"
        },
        "content": "The following figure shows the _GUI_ of **Serenity**."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "successs404"
        },
        "content": "It is annotated with the name of the _GUI_ components."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 3.2.2. General symbols and syntax"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "successs404"
        },
        "content": "The table below explains the general symbols and syntax used throughout the document."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "successs404"
        },
        "content": "Symbol/syntax | Meaning"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "successs404"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "successs404"
        },
        "content": "`command` | This indicates a technical term, which you can find out more in [Command syntax and usage](#323-command-syntax-and-usage)."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "successs404"
        },
        "content": "_GUI_ | This indicates a graphical component, such as a button, layout format and text input box."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "successs404"
        },
        "content": "â„¹ | This indicates a note."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "successs404"
        },
        "content": "ðŸ’¡ | This indicates a tip."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "successs404"
        },
        "content": "âš  | This indicates a warning."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 3.2.3. Command syntax and usage"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "successs404"
        },
        "content": "The table below explains some important technical terms."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "successs404"
        },
        "content": "Technical term | Meaning"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "successs404"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "successs404"
        },
        "content": "Command | The instruction that the user types into the command box for **Serenity** to perform a specific task."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "successs404"
        },
        "content": "Command word | The first word of the command that tells **Serenity** which task should be performed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "successs404"
        },
        "content": "Parameter | The word or phrase following the command word that provides further details of the task (if necessary)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "successs404"
        },
        "content": "Prefix | The letter that is placed at the start of each parameter to distinguish one parameter from another."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 3.2.4. Command format"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use commands to tell **Serenity** to perform a specific task."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Format**:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "successs404"
        },
        "content": "`COMMAND_WORD prefix/PARAMETER`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e â„¹ **Notes regarding the command format:**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e* Words in upper case are the parameters to be supplied by you.\u003cbr\u003ee.g. in `viewgrp grp/GROUP`, `GROUP` is a parameter which can be used as `viewgrp grp/G04`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e* Parameters have to be in the specified order.\u003cbr\u003ee.g. if the command specifies `grp/GROUP lsn/LESSON`, `lsn/LESSON grp/GROUP` is not acceptable."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "successs404"
        },
        "content": "If you need to add a new tutorial lesson, you can type the following command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "successs404"
        },
        "content": "`addlsn grp/GROUP lsn/LESSON`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "successs404"
        },
        "content": "Analysis:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Command: Add a tutorial lesson"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Command Word: `addlsn`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Parameter: `GROUP`, `LESSON`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Prefix: `grp/`, `lsn/`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "successs404"
        },
        "content": "## 4. Features"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "successs404"
        },
        "content": "This section contains all the information you need to know about the features of **Serenity**."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "successs404"
        },
        "content": "To use each feature or sub-feature, you will need to enter the command into the _Command Box_."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 4.1. Setup"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "successs404"
        },
        "content": "It is the start of the semester! Brand new classes, brand new students and a whole new experience."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "successs404"
        },
        "content": "Follow the instructions below to set up your new classes, and watch **Serenity** do the magic for you."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 4.1.1. Add a new tutorial group from CSV file: `addgrp`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to add a new tutorial group automatically from CSV data."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e â„¹ **Notes regarding the `addgrp` command:**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e * The CSV file should store a list of students."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e * The format of the CSV file is the same as the CSV file that you may download from LUMINUS."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e * To obtain PATH_TO_CSV, either:\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e    â—¦ Get the location of the CSV file in your computer.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e      e.g. `addgrp grp/G04 path/C:\\Users\\serene\\CS2101_G04.csv`\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e    â—¦ Copy and paste the CSV file into the same folder as your **Serenity** application, then type the name of the CSV file.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e      e.g. `addgrp grp/G04 path/CS2101_G04.csv`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "successs404"
        },
        "content": "`addgrp grp/GROUP path/PATH_TO_CSV`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "successs404"
        },
        "content": "You are adding a new tutorial group named `G04` to prepare for a new semester."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "successs404"
        },
        "content": "The CSV data of the tutorial group is stored at `C:\\Users\\serene\\CS2101_G04.csv`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "successs404"
        },
        "content": "Adding a new tutorial group:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `addgrp grp/G04 path/C:\\Users\\serene\\CS2101_G04.csv` into the _Command Box_."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "successs404"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. **Serenity** will switch to tutorial group `G04` page."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "successs404"
        },
        "content": "3. You can now see the list of students and a default list of tutorial lessons for tutorial group `G04`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 4.1.2. Delete an existing tutorial group: `delgrp`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to delete an existing tutorial group."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "successs404"
        },
        "content": "`delgrp grp/GROUP`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "successs404"
        },
        "content": "You accidentally added the wrong tutorial group `G04` and you decided to remove the tutorial group."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "successs404"
        },
        "content": "Deleting an existing tutorial group:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `delgrp grp/G04` into the _Command Box_."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "successs404"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. **Serenity** will exit tutorial group `G04` page."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "successs404"
        },
        "content": "3. You can now see that tutorial group `G04` no longer exists."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "#### 4.1.3. Add a new tutorial lesson: `addlsn`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "You can use this command to add a new tutorial lesson for a specified tutorial group."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "`addlsn grp/GROUP lsn/LESSON`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "successs404"
        },
        "content": "You want to create a new tutorial lesson `1-2` for tutorial group `G04`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "successs404"
        },
        "content": "Adding a tutorial lesson to a tutorial group:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `addlsn grp/G04 lsn/1-2` into the _Command Box_."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. **Serenity** will display tutorial lesson `1-2` page."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "successs404"
        },
        "content": "3. You can now see that tutorial lesson `1-2` has been added to tutorial group `G04`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "#### 4.1.4. Delete an existing tutorial lesson: `dellsn`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "You can use this command to delete an existing lesson from a specified tutorial group."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "`dellsn grp/GROUP lsn/LESSON`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "successs404"
        },
        "content": "You accidentally added the wrong tutorial lesson `1-3` for tutorial group `G04` and you decided to remove it."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "successs404"
        },
        "content": "Deleting an existing lesson from a tutorial group:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `dellsn grp/G04 lsn/1-3` into the _Command Box_."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message. "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. **Serenity** will exit tutorial lesson `1-3` page and enter tutorial group `G04` page."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "successs404"
        },
        "content": "3. You can now see that tutorial lesson `1-3` no longer exists."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "#### 4.1.5. Add a new student: `addstudent`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "You can use this command to add a new student to a tutorial group."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "`addstudent grp/GROUP name/NAME id/STUDENT_ID`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "successs404"
        },
        "content": "A new student named `Aaron Tan` with student ID `e0123456` entered your tutorial group,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "successs404"
        },
        "content": "and you want to add him to tutorial group `G04`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "successs404"
        },
        "content": "Adding a new student to a tutorial group:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `addstudent grp/G04 name/Aaron Tan id/e0123456` into the _Command Box_."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. `Aaron Tan` will be added to the list of students in tutorial group `G04`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "#### 4.1.6. Delete an existing student: `delstudent`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "You can use this command to delete an existing student from a tutorial group."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "`delstudent grp/GROUP name/NAME id/STUDENT_ID`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "successs404"
        },
        "content": "A student named `Aaron Tan` with student ID `e0123456` dropped the CS2101 module,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "successs404"
        },
        "content": "and you need to remove him from the tutorial group `G04`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "successs404"
        },
        "content": "Deleting an existing student from a tutorial group:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `delstudent grp/G04 name/Aaron Tan id/e0123456` into the _Command Box_."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. `Aaron Tan` will no longer be in the list of students in tutorial group `G04`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 4.2. Attendance taking"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "successs404"
        },
        "content": "Need to mark attendance of your students at the start of each lesson quickly?"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "successs404"
        },
        "content": "This feature allows you to mark attendance of students easily."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 4.2.1. Mark a student as present: `markpresent`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to mark a specific student as present for a tutorial lesson."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "`markpresent name/NAME id/STUDENT_ID`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "successs404"
        },
        "content": "A student named `Aaron Tan` with student ID `e0123456` is present for your tutorial lesson `1-2` of tutorial group `G04`. "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "successs404"
        },
        "content": "Marking a student as present for a tutorial lesson:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "To mark him present:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "1. Navigate to view group G04 lesson 1-2 via [`viewlsn`](#452-view-an-existing-tutorial-lesson-viewlsn) command."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "2. Type `markpresent name/Aaron Tan id/e0123456` into the *Command Box*."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "3. Press `Enter` to execute."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. You can now see that his attendance has been updated on the _Student Information Panel_."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "![Figure X. Outcome of a successful mark a student present command](images/ui/markpresent_student.png)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "_Figure X. Outcome of a successful mark a student present command_"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 4.2.2. Mark a student as absent: `markabsent`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to mark a specific student as absent for a tutorial lesson."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "`markabsent name/NAME id/STUDENT_ID`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "successs404"
        },
        "content": "A student named `Aaron Tan` with student ID `e0123456` is absent for your tutorial lesson `1-2` of tutorial group `G04`. "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "To mark him absent:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "1. Navigate to view group G04 lesson 1-2 via [`viewlsn`](#452-view-an-existing-tutorial-lesson-viewlsn) command."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "2. Type `markabsent name/Aaron Tan id/e0123456` into the *Command Box*."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "3. Press `Enter` to execute."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. You can now see that his attendance has been updated on the _Student Information Panel_."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "![Figure X. Outcome of a successful mark a student absent command](images/ui/markabsent_student.png)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "_Figure X. Outcome of a successful mark a student absent command_"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 4.2.3. Mark all students as present: `markpresent all`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to mark all students in a tutorial group as present for a tutorial lesson."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e ðŸ’¡ **Tip for the `markpresent all` command:**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e You can conveniently mark all students as present at once in the beginning of the tutorial lesson,"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e then mark some students as absent afterwards. You can then start your tutorial lesson without much hassle."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "`markpresent all`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "successs404"
        },
        "content": "All students in group `G04` are present for your tutorial lesson `1-2` of tutorial group `G04`. "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "successs404"
        },
        "content": "Marking all students in a tutorial group as present for a tutorial lesson:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "To mark all of them present at once:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "1. Navigate to view group `G04` lesson `1-2` via [`viewlsn`](#452-view-an-existing-tutorial-lesson-viewlsn) command."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "2. Type `markpresent all` into the *Command Box*."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "3. Press `Enter` to execute."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. You can now see that all the students\u0027 attendance have been updated on the _Student Information Panel_."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "![Figure X. Outcome of a successful mark attendance for all students command](images/ui/markpresent_all.png)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "_Figure X. Outcome of a successful mark attendance for all students command_"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 4.2.4. Flag attendance of a student: `flagatt`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to flag attendance of a specific student so you will be reminded to check the student\u0027s"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "successs404"
        },
        "content": "attendance at the end of class."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "successs404"
        },
        "content": "`flagatt grp/GROUP lsn/LESSON name/NAME id/STUDENT_ID`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "successs404"
        },
        "content": "A student named `Aaron Tan` with student ID `e0123456` from another tutorial group decided to join"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "successs404"
        },
        "content": "your tutorial lesson `1-2` of tutorial group `G04`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "successs404"
        },
        "content": "You want to flag his attendance and check with his tutor after your tutorial lesson. "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "successs404"
        },
        "content": "Flagging a student\u0027s attendance for a tutorial lesson:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `flagatt grp/G04 lsn/1-2 name/Aaron Tan id/e0123456` into the _Command Box_."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. His attendance will now be flagged for future follow-up actions."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 4.2.5. Export attendance as CSV file: `exportatt`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to export the attendance sheet of a specific tutorial group as a CSV file."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e ðŸ’¡ **Tip for the `exportatt` command:**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e You can conveniently obtain the soft copy version of the attendance sheet for"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e attendance list submission as part of NUS Centre for English Language Communication requirements."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e â„¹ **Note regarding the `exportatt` command:**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e The attendance sheet will be saved as a CSV file named after the tutorial group."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e The file will be saved at the same folder as your **Serenity** application."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Format**:"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "successs404"
        },
        "content": "`exportatt grp/GROUP`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Example**:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "successs404"
        },
        "content": "You want to export the attendance sheet of tutorial group `G04`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "successs404"
        },
        "content": "Exporting attendance sheet of a tutorial group:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `exportatt grp/G04` into the _Command Box_."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "successs404"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. The attendance sheet of tutorial group `G04` will be saved as `G04_attendance.csv`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can find the CSV file at the location where your **Serenity** application is located."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 4.3. Participation marking"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "Need to keep track of all your students\u0027 participation during lessons quickly? This feature allows you to key in a "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "student\u0027s participation score easily with a scale for reference."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "#### 4.3.1. Award participation score for a student: `setscore`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "You can use this command to add the participation score for a specific student in a tutorial lesson."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "With a scale from 1 to 5:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " | Score   | 1 | 2 | 3 | 4 | 5 |"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " |---------|---|---|---|---|---|"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " | **Remarks** |Very Poor|Poor|Sufficient|Good|Commendable|"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e âš  **Warning regarding the `addscore` command:**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e You cannot increase the participation score of a student such that the final score is more than 5."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e The maximum score you can add is 5."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "`setscore name/NAME id/STUDENT_ID add/SCORE`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "successs404"
        },
        "content": "In tutorial lesson `1-2` of tutorial group `G04`,"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "successs404"
        },
        "content": "you noticed that your student named `Aaron Tan` with student ID `e0123456` often participated in class discussions."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "successs404"
        },
        "content": "You decided to add `3` marks to his participation score for this tutorial lesson."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "successs404"
        },
        "content": "Adding participation score of a student in a tutorial lesson:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "1. Navigate to view group G04 lesson 1-2 via [`viewlsn`](#452-view-an-existing-tutorial-lesson-viewlsn) command."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "2. Type `setscore name/Aaron Tan id/e0123456 add/3` into the *Command Box*."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "3. Press `Enter` to execute."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. You can now see that his score has been updated on the _Student Information Panel_."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### Viewing statistics of class participation: `stats`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 4.3.2. Subtract participation score of a student: `subscore`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to decrease the participation score of a specific student for a tutorial lesson."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e âš  **Warning regarding the `subscore` command:**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e You cannot decrease the participation score of a student such that the final score is less than 0."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e The maximum score you can subtract is 5."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "`setscore name/NAME id/STUDENT_ID subtract/SCORE`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "successs404"
        },
        "content": "In tutorial lesson `1-2` of tutorial group `G04`,"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "successs404"
        },
        "content": "you felt that your student named `Aaron Tan` with student ID `e0123456` did not provide insightful responses to some questions."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "successs404"
        },
        "content": "You decided to subtract `1` mark from his participation score for this tutorial lesson."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "successs404"
        },
        "content": "Subtracting participation score of a student in a tutorial lesson:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Navigate to view tutorial lesson `1-2` of tutorial group `G04` via ![`viewlsn`](#452-view-an-existing-tutorial-lesson-viewlsn) command."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. Type `subscore name/Aaron Tan id/e0123456 score/1` into the _Command Box_."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "successs404"
        },
        "content": "3. Press `Enter` to execute."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. You can now see that his score has been updated on the _Student Information Panel_."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "successs404"
        },
        "content": "#### 4.3.3. Export participation scores as CSV file: `exportscore`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to export the participation score sheet of a specific tutorial group as a CSV file."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e â„¹ **Note regarding the `exportscore` command:**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e The participation score sheet will be saved as a CSV file named after the tutorial group."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e The file will be saved at the same folder as your **Serenity** application."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "successs404"
        },
        "content": "`exportscore grp/GROUP`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "successs404"
        },
        "content": "You want to collate the participation scores of tutorial group `GO7` into a CSV file for grading on a "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "successs404"
        },
        "content": "different platform (i.e. LumiNUS)."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "successs404"
        },
        "content": "Exporting participation score sheet of a tutorial group:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `exportscore grp/G07` into the _Command Box_."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. The participation score sheet of tutorial group `G04` will be saved as `G04_participation.csv`."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can find the CSV file at the location where your **Serenity** application is located."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 4.4. Question addressing"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "successs404"
        },
        "content": "Need to keep track of all your students\u0027 questions during lessons quickly? This feature allows you to key in questions"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "successs404"
        },
        "content": "easily for future reference."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### 4.4.1. Add a new question: `addqn`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to add a question that was asked in a tutorial lesson, so that you can address the question"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "successs404"
        },
        "content": "at the end of the tutorial lesson."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "`addqn qn/QUESTION`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "successs404"
        },
        "content": "A student asked you, \"`What is the deadline for the report?`\" in a tutorial lesson."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "successs404"
        },
        "content": "As the deadline of the report has changed, you want to note this question down, check the new deadline and"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "successs404"
        },
        "content": "address the question after the tutorial lesson. "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "successs404"
        },
        "content": "Adding a question:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `addqn qn/What is the deadline for the report?` into the _Command Box_."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. The question will be added to the list of questions."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### 4.4.2. Delete an existing question: `delqn`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to delete a question after addressing it."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "`delqn INDEX`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "successs404"
        },
        "content": "You addressed one of the questions at the end of a tutorial lesson and you want to delete the question from the"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "successs404"
        },
        "content": "list of questions."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "successs404"
        },
        "content": "Deleting a question:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `delqn 1` into the _Command Box_."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. The question will be deleted from the list of questions."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 4.5 Utility viewing"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "successs404"
        },
        "content": "The following commands allow you to navigate between different views."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "#### 4.5.1. View an existing tutorial group: `viewgrp`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to view the list of students and tutorial lessons of an existing tutorial group."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "successs404"
        },
        "content": "You will also be able to execute tutorial group-related commands."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "`viewgrp grp/GROUP`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "successs404"
        },
        "content": "You want to view the details of tutorial group `G04`."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "successs404"
        },
        "content": "Viewing a tutorial group:"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `viewgrp grp/G04` into the _Command Box_."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. The _Data Display_ will update and display the information for tutorial group `G04`."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#### 4.5.2. View an existing tutorial lesson: `viewlsn`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "successs404"
        },
        "content": "You can use this command to view the attendance and participation scores of an existing"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "successs404"
        },
        "content": "tutorial group. You will also be able to execute tutorial lesson-related commands."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "`viewlsn grp/GROUP lsn/LESSON`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "successs404"
        },
        "content": "You want to view the details of tutorial lesson `1-2` of tutorial group `G04`."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "successs404"
        },
        "content": "Viewing a tutorial lesson:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type `viewlsn grp/G04 lsn/1-2` into the _Command Box_."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "successs404"
        },
        "content": "2. The _Data Display_ will update and display the students\u0027 information for tutorial lesson `1-2` of tutorial group `G04`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "successs404"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Q:** How many tutorial groups can I manage in **Serenity**?"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "successs404"
        },
        "content": "**A:** You can manage more than 1 tutorial groups in **Serenity**."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Q:** How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "successs404"
        },
        "content": "**A:** By default, **Serenity** saves all your data in a folder named `data`. This folder can be found in the"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "successs404"
        },
        "content": "home folder for your **Serenity** application. You can copy and transfer the data folder into the home folder of"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "successs404"
        },
        "content": "your **Serenity** application on your other computer. **Serenity** will automatically load your data upon launching."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "successs404"
        },
        "content": "## 6. Command summary"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 6.1. Setup commands"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "successs404"
        },
        "content": "Command | Example"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "successs404"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Add tutorial group** \u003cbr\u003e`addgrp grp/GROUP path/PATH_TO_CSV`| `addgrp grp/G04 path/C:\\Users\\serene\\CS2101_G04.csv`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Delete tutorial group** \u003cbr\u003e `delgrp grp/GROUP`| `delgrp grp/G04`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Add tutorial lesson** \u003cbr\u003e `addlsn grp/GROUP lsn/LESSON` | `addlsn grp/G04 lsn/1-2`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Delete tutorial lesson** \u003cbr\u003e `dellsn grp/GROUP lsn/LESSON` | `dellsn grp/G04 lsn/1-3`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Add student** \u003cbr\u003e `addstudent grp/GROUP name/NAME id/STUDENT_ID` | `addstudent grp/G04 name/Aaron Tan id/e0123456`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Delete student** \u003cbr\u003e `delstudent grp/GROUP name/NAME id/STUDENT_ID` | `delstudent grp/G04 name/Aaron Tan id/e0123456`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 6.2. Attendance taking commands"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "successs404"
        },
        "content": "Command | Example"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "successs404"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Mark a student as present** \u003cbr\u003e `markpresent name/NAME id/STUDENT_ID` | `markpresent name/Aaron Tan id/e0123456`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Mark a student as absent** \u003cbr\u003e `markabsent name/NAME id/STUDENT_ID` | `markabsent name/Aaron Tan id/e0123456`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Mark all students as present** \u003cbr\u003e `markpresent all` | `markpresent all`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Flag attendance** \u003cbr\u003e `flagatt grp/GROUP lsn/LESSON name/NAME id/STUDENT_ID` | `flagatt grp/G04 lsn/1-2 name/Aaron Tan id/e0123456`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Export attendance** \u003cbr\u003e `exportatt grp/GROUP` | `exportatt grp/G04`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 6.3. Participation marking commands"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "successs404"
        },
        "content": "Command | Example"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "successs404"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Add participation score** \u003cbr\u003e `addscore name/NAME id/STUDENT_ID score/SCORE` | `addscore name/Aaron Tan id/e0123456 score/3`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Subtract participation score** \u003cbr\u003e `subscore name/NAME id/STUDENT_ID score/SCORE` | `subscore name/Aaron Tan id/e0123456 score/1`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Export participation scores** \u003cbr\u003e `exportscore grp/GROUP` | `exportscore grp/G07`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 6.4. Question addressing commands"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "successs404"
        },
        "content": "Command | Example"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "successs404"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Add question** \u003cbr\u003e `addqn qn/QUESTION` | `addqn qn/What is the deadline for the report?`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Delete question** \u003cbr\u003e `delqn INDEX` | `delqn 5`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "successs404"
        },
        "content": "### 6.5. Utility viewing commands"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "successs404"
        },
        "content": "Command | Example"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "successs404"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "successs404"
        },
        "content": "**View tutorial group** \u003cbr\u003e `viewgrp grp/GROUP` | `viewgrp grp/G04`"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "successs404"
        },
        "content": "**View tutorial lesson** \u003cbr\u003e `viewlsn grp/GROUP lsn/LESSON` | `viewlsn grp/G04 lsn/1-2`"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 53,
      "xinyee20": 50,
      "chunyongg": 20,
      "ryanlimjr": 44,
      "successs404": 436,
      "-": 165
    }
  },
  {
    "path": "src/main/java/team/serenity/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 5,
      "chunyongg": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/team/serenity/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * This is a workaround for the following error when MainApp is made the entry point of the application:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the LauncherHelper will check for the javafx.graphics"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * module to be present as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t find the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application to be the entry point of the application, we"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * avoid this issue."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 11,
      "-": 12
    }
  },
  {
    "path": "src/main/java/team/serenity/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Serenity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.JsonSerenityStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.SerenityStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.question.JsonQuestionStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.question.QuestionStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Serenity ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "        SerenityStorage serenityStorage \u003d new JsonSerenityStorage(userPrefs.getSerenityFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionStorage questionStorage \u003d new JsonQuestionStorage(userPrefs.getQuestionStorageFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        storage \u003d new StorageManager(serenityStorage, questionStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e The"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * data from the sample address book will be used instead if {@code storage}\u0027s address book is not found, or an"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ReadOnlySerenity serenity \u003d initSerenity(storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ReadOnlyQuestionManager questionManager \u003d initQuestionManager(storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new ModelManager(serenity, questionManager, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private ReadOnlySerenity initSerenity(Storage storage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ReadOnlySerenity serenity;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "        serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "            Optional\u003cReadOnlySerenity\u003e serenityOptional \u003d storage.readSerenity();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (serenityOptional.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Serenity.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "                serenityOptional.orElseGet(SampleDataUtil::getSampleSerenity);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "                + \"Serenity.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": "                + \"Serenity.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "            storage.saveSerenity(serenity);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.info(\"Saving initial data of Serenity.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.warning(\"Problem while saving to the file.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns a {@code ReadOnlyQuestionManager} with the data from {@code storage}\u0027s questions."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The data from the sample questions will be used instead if {@code storage}\u0027s questions manager is not found,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * or an empty question manager will be used instead if errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * question manager."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private ReadOnlyQuestionManager initQuestionManager(Storage storage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ReadOnlyQuestionManager questionManager;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Optional\u003cReadOnlyQuestionManager\u003e questionManagerOptional \u003d storage.readQuestionManager();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            if (questionManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample QuestionManager.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            questionManager \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    questionManagerOptional.orElseGet(SampleDataUtil::getSampleQuestionManager);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    + \"QuestionManager.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            questionManager \u003d new QuestionManager();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    + \"QuestionManager.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            questionManager \u003d new QuestionManager();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            storage.saveQuestionManager(questionManager);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            logger.info(\"Saving initial data of QuestionManager.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            logger.warning(\"Problem while saving to the file.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return questionManager;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e The default file path {@code"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Config#DEFAULT_CONFIG_FILE} will be used instead if {@code configFilePath} is null."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a new {@code UserPrefs}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty Serenity\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        logger.info(\"Starting Serenity \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.ui.start(primaryStage);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Serenity ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.storage.saveQuestionManager(model.getQuestionManager());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 74,
      "chunyongg": 11,
      "successs404": 35,
      "-": 124
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Objects.equals(this.logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 Objects.equals(this.userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Objects.hash(this.logLevel, this.userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        sb.append(\"Current log level : \" + this.logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + this.userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 8,
      "-": 55
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A Serializable class that contains the GUI settings. Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.windowWidth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.windowHeight;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.windowCoordinates !\u003d null ? new Point(this.windowCoordinates) : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 Objects.equals(this.windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Objects.hash(this.windowWidth, this.windowHeight, this.windowCoordinates);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        sb.append(\"Width : \" + this.windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        sb.append(\"Height : \" + this.windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        sb.append(\"Position : \" + this.windowCoordinates);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 15,
      "chunyongg": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s can be obtained from"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * this class\u003cbr\u003e These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained *AFTER* this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * initialization will have their logging level changed\u003cbr\u003e Logging levels for existing loggers will only be updated"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * if the logger with the same name is requested again from the LogsCenter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 13,
      "-": 97
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_GROUP_LISTED_OVERVIEW \u003d \"You are in tutorial group %1$s.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_GROUP_EMPTY \u003d \"No such group!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_LESSON_LISTED_OVERVIEW \u003d \"You are in tutorial group %1$s, lesson %2$s.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_LESSON_EMPTY \u003d \"no such lesson!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_STUDENT_EMPTY \u003d \"No such student!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Student already exists!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_NOT_VIEWING_A_GROUP \u003d \"Group not specified.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_NOT_VIEWING_A_LESSON \u003d \"Lesson not specified.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 8,
      "chunyongg": 6,
      "ryanlimjr": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", this.major, this.minor, this.patch, this.isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.major !\u003d other.major) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return this.major - other.major;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return this.minor - other.minor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return this.patch - other.patch;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.isEarlyAccess) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", this.major, this.minor, this.patch);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.isEarlyAccess) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 16,
      "chunyongg": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what base"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * the other component is using for its index. However, after receiving the {@code Index}, that component can convert it"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "chunyongg": 6,
      "-": 44
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/util/CsvUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Reads CSV file that the tutor downloads from LUMINUS and writes JSON data to a new CSV file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class CsvUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * The path of the CSV file that the tutor downloads from LUMINUS."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates a CsvUtil object that manages CSV files."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param filePath The path of the CSV file that the tutor downloads from LUMINUS."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public CsvUtil(Path filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Reads CSV file that the tutor downloads from LUMINUS. The CSV file stores a list of {@code Student} that are in a"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * tutorial group."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Set\u003cStudent\u003e readStudentsFromCsv() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cStudent\u003e students \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // create an instance of BufferedReader"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // using try with resource, Java 7 feature to close resources"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try (BufferedReader br \u003d Files.newBufferedReader(this.filePath,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            StandardCharsets.US_ASCII)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String line \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            // skip the first 4 lines"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d 4; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            // loop until all lines are read"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // use string.split to load a string array with the values from each line of"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // the file, using a comma as the delimiter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String[] attributes \u003d line.split(\",\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Student student \u003d createStudent(attributes);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // adding order into ArrayList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                students.add(student);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // read next line before looping"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                // if end of file reached, line would be null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Reads a set of the Lessons"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param studentsInfo Set of StudentInfo"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Set of Lessons"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Set\u003cLesson\u003e readLessonsFromCsv(Set\u003cStudentInfo\u003e studentsInfo) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cLesson\u003e lessons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try (BufferedReader br \u003d Files.newBufferedReader(this.filePath,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            StandardCharsets.US_ASCII)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String categories \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            // skip the first 3 lines"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d 3; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                categories \u003d br.readLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //create classes"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String[] row \u003d categories.split(\",\"); //photos, name, userid, email, ...."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            int len \u003d row.length;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            for (int i \u003d 4; i \u003c len; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                String lessonName \u003d computeLessonName(i - 3); //start from 1"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                UniqueList\u003cStudentInfo\u003e newStudentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                newStudentsInfo.setElementsWithList(new ArrayList\u003c\u003e(studentsInfo));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                lessons.add(new Lesson(lessonName, newStudentsInfo));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Given a number, find out the class name E.g. 1 will return \"1-1\", 3 will return \"2-1\", 4 will return \"2-2\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param number Number of class, e.g. lesson 1,2,3"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return Lesson name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static String computeLessonName(int number) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int weekNumber \u003d number / 2;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        double remainder \u003d number % 2;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (remainder !\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //e.g. if number \u003d 3, expected weekNumber is 2."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            // 3/2 gives 1, which we add 1 to get us our desired result"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            weekNumber++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int lessonNumber \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            remainder \u003d\u003d 0 ? 2 : 1; //e.g. if number \u003d 3, expected output is 2-1 i.e. lessonNumber \u003d 1"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%d-%d\", weekNumber, lessonNumber);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Creates a new set of StudentInfo from CSV"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @return Set of studentInfo"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Set\u003cStudentInfo\u003e readStudentsInfoFromCsv(Set\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Set\u003cStudentInfo\u003e studentsInfo \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentsInfo.add(new StudentInfo(student));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return studentsInfo;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Lesson createLesson(String name, UniqueList\u003cStudentInfo\u003e studentsInfo) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return new Lesson(name, studentsInfo);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static Student createStudent(String[] metadata) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String name \u003d metadata[1];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentNumber \u003d metadata[2];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new Student(name, studentNumber);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    //ToDo: add a method to export JSON data into CSV"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 15,
      "xinyee20": 9,
      "chunyongg": 130
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)}, otherwise"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Writes given string to a file. Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 5,
      "-": 78
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found. If any"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a new file if it"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "chunyongg": 8,
      "-": 135
    }
  },
  {
    "path": "src/main/java/team/serenity/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * \u003cbr\u003e Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                .startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "chunyongg": 8,
      "-": 59
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the user prefs\u0027 serenity file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of groups."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of students from a group."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of lesson from a group."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the list of students info from a group-lesson."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cStudentInfo\u003e getStudentInfoList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the list of questions from a group-lesson."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuestionList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 27,
      "chunyongg": 5,
      "ryanlimjr": 8,
      "successs404": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.SerenityParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final SerenityParser serenityParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.serenityParser \u003d new SerenityParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Command command \u003d this.serenityParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //Write to storage, if group exists"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean dataExists \u003d model.hasGroup();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (dataExists) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Stream\u003cGroup\u003e groups \u003d model.getGroupStream();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                storage.saveSerenity(groups);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + e, e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.model.getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Serenity \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.model.getSerenityFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.model.getFilteredGroupList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.model.getStudentList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.model.getLessonList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e getStudentInfoList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.model.getStudentsInfoList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 40,
      "chunyongg": 11,
      "ryanlimjr": 8,
      "successs404": 5,
      "-": 44
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/AddGrpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class AddGrpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addgrp\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \": Adds a new tutorial group. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"GROUP \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_PATH + \"PATH\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"G04 \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_PATH + \"LUMINUS_GROUP_A.csv\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tutorial group added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This tutorial group already exists.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final Group toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an AddGrpCommand to add the specified {@code Group}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public AddGrpCommand(Group group) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toAdd \u003d group;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (model.hasGroup(this.toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.addGroup(this.toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.toAdd),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "            false, false, false, true, true, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "            || (other instanceof AddGrpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.toAdd.equals(((AddGrpCommand) other).toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 16,
      "successs404": 40
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/AddLsnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.LessonContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class AddLsnCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addlsn\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        + \": Adds a new lesson to a specified tutorial group. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"GROUP \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        + PREFIX_PATH + \"PATH \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New lesson for tutorial group %2$s added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson for tutorial group %1$s already exists.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_GROUP_DOES_NOT_EXIST \u003d \"Specified Tutorial Group does not exist!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final GroupContainsKeywordPredicate targetGrpPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an AddLsnCommand to add the specified lesson."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public AddLsnCommand(String lesson, GroupContainsKeywordPredicate target) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.targetGrpPredicate \u003d target;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toAdd \u003d lesson;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.updateFilteredGroupList(this.targetGrpPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new CommandException(MESSAGE_GROUP_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Group targetGrp \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cStudent\u003e students \u003d targetGrp.getStudents();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cStudentInfo\u003e studentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            studentsInfo.add(new StudentInfo(student));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Lesson toAdd \u003d new Lesson(this.toAdd, studentsInfo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (targetGrp.getLessons().contains(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_LESSON, toAdd, targetGrp));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        targetGrp.getLessons().add(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        model.updateLessonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        model.updateFilteredLessonList(new LessonContainsKeywordPredicate(this.toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, targetGrp),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "            false, false, true, false, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                || (other instanceof AddLsnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.toAdd.equals(((AddLsnCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 29,
      "chunyongg": 4,
      "ryanlimjr": 45,
      "successs404": 2
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/AddQnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_NOT_VIEWING_A_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_NOT_VIEWING_A_LESSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_QN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Adds a question to the Question manager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class AddQnCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addqn\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \": Adds a new question to the specific lesson. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_QN + \"QUESTION\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_QN + \"What is the deadline for the report?\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"This question already exists.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Question toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an AddQnCommand to add the specified {@code Question}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public AddQnCommand(Question question) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toAdd \u003d question;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (model.getFilteredGroupList().size() !\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_VIEWING_A_GROUP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (model.getFilteredLessonList().size() !\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_VIEWING_A_LESSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Group uniqueGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Lesson uniqueLesson \u003d model.getFilteredLessonList().get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toAdd.setGroupAndLesson(uniqueGroup.getName(), uniqueLesson.getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (model.hasQuestion(this.toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.addQuestion(this.toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof AddQnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.toAdd.equals(((AddQnCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.toAdd.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 76
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/AddScoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_SCORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Participation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class AddScoreCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addscore\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s: \\nParticipation Score: %d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            \"%s is not found, please ensure the name \u0026 student id is correct\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_NOT_IN_LESSON \u003d \"Currently not in any lesson. Please enter a lesson.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        + \": Gives a student in the class a participation score. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \" STUDENT_NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \" STUDENT_ID \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_SCORE + \" SCORE\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \" Aaron Tan \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \" e0123456 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_SCORE + \" 2\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private Student toAddScore;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private boolean isCorrectStudent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an AddScoreCommand to award the specified {@code Student} a participation score."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public AddScoreCommand(Student student, int score) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Specified student to add participation score"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toAddScore \u003d student;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            Lesson uniqueLesson \u003d model.getFilteredLessonList().get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            UniqueList\u003cStudentInfo\u003e uniqueStudentInfoList \u003d uniqueLesson.getStudentsInfo();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            ObservableList\u003cStudentInfo\u003e studentsInfo \u003d uniqueStudentInfoList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            // Update single student participation score"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            for (int i \u003d 0; i \u003c studentsInfo.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                StudentInfo studentInfo \u003d studentsInfo.get(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                this.isCorrectStudent \u003d studentInfo.containsStudent(this.toAddScore);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                if (this.isCorrectStudent) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    Participation update \u003d studentInfo.getParticipation().setNewScore(this.score);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    StudentInfo updatedStudentInfo \u003d studentInfo.updateParticipation(update);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    uniqueStudentInfoList.setElement(studentInfo, updatedStudentInfo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    model.updateLessonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    model.updateStudentsInfoList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            if (!this.isCorrectStudent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_STUDENT_NOT_FOUND, this.toAddScore));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, this.toAddScore, this.score));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            if (e instanceof CommandException) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_IN_LESSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof AddScoreCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.toAddScore.equals(((AddScoreCommand) other).toAddScore)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.score \u003d\u003d ((AddScoreCommand) other).score"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.isCorrectStudent \u003d\u003d (((AddScoreCommand) other).isCorrectStudent));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 36,
      "xinyee20": 58,
      "chunyongg": 2
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/AddStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_DUPLICATE_STUDENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addstudent\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \": Adds a new Student to a specified tutorial group. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"GROUP \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \"STUDENT_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \"STUDENT_ID\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"G04 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \"Ryan \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \"e1234567\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You added %s (%s) to tutorial group %s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String studentName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final Predicate\u003cGroup\u003e predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an AddStudentCommand to add the specified {@code Student}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param studentName"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param studentId"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public AddStudentCommand(String studentName, String studentId, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(studentName, studentId, predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student student \u003d new Student(studentName, studentId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        model.updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //no such group exists"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new CommandException(MESSAGE_GROUP_EMPTY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Group targetGroup \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (targetGroup.getStudents().contains(student)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        model.addStudentToGroup(student, predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String.format(MESSAGE_SUCCESS, studentName, studentId, model.getFilteredGroupList().get(0).getName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!(obj instanceof AddStudentCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        AddStudentCommand other \u003d (AddStudentCommand) obj;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.studentName.equals(other.studentName)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.studentId.equals(other.studentId)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.predicate.equals(other.predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 31,
      "chunyongg": 56
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The application should toggle to lesson data screen."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final boolean isViewLsn;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The application should toggle to group data screen."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final boolean isViewGrp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * The application should add group buttons to the button bar."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final boolean isAddGrp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * The application should delete group buttons from the button bar."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final boolean isDelGrp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean viewLsn, boolean viewGrp,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        boolean addGrp, boolean delGrp) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.isViewLsn \u003d viewLsn;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.isViewGrp \u003d viewGrp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.isAddGrp \u003d addGrp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.isDelGrp \u003d delGrp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.feedbackToUser;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.showHelp;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.exit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isToggleLsnView() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.isViewLsn;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isToggleGrpView() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.isViewGrp;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean isAddGrp() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this.isAddGrp;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean isDelGrp() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return isDelGrp;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.isViewGrp \u003d\u003d otherCommandResult.isViewGrp"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 this.isViewLsn \u003d\u003d otherCommandResult.isViewLsn"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 this.isAddGrp \u003d\u003d otherCommandResult.isAddGrp"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 this.isDelGrp \u003d\u003d otherCommandResult.isDelGrp;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return Objects.hash(this.feedbackToUser, this.showHelp, this.exit, this.isViewGrp, this.isViewLsn,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": "            this.isAddGrp, this.isDelGrp);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 14,
      "chunyongg": 6,
      "ryanlimjr": 16,
      "successs404": 28,
      "-": 56
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/DelGrpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DelGrpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delgrp\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \": Deletes an existing tutorial group. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \"Parameter: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"GROUP\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"G04\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Tutorial group deleted: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final GroupContainsKeywordPredicate grpPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a DelGrpCommand to delete the specified {@code Group} in the predicate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public DelGrpCommand(GroupContainsKeywordPredicate grpPredicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.grpPredicate \u003d grpPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group toDel \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!model.getListOfGroups().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            for (Group group : model.getListOfGroups()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                if (group.getName().equals(this.grpPredicate.getKeyword())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    toDel \u003d group;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (toDel \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(MESSAGE_GROUP_EMPTY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        model.deleteGroup(toDel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.updateFilteredGroupList(this.grpPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, toDel),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "            false, false, false, false, false, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof DelGrpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.grpPredicate.equals(((DelGrpCommand) other).grpPredicate));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 23,
      "chunyongg": 2,
      "successs404": 39
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/DelLsnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DelLsnCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"dellsn\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \": Deletes a specified lesson from a specified tutorial group. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"GROUP \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_LSN + \"PATH\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"lesson for tutorial group %2$s deleted: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_LESSON_NOT_FOUND \u003d \"This lesson for tutorial group %1$s does not exists.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String MESSAGE_GROUP_DOES_NOT_EXIST \u003d \"Specified Tutorial Group does not exist!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final GroupContainsKeywordPredicate targetGrpPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String toDel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a DelLsnCommand to delete the specified lesson."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public DelLsnCommand(String lesson, GroupContainsKeywordPredicate target) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.targetGrpPredicate \u003d target;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toDel \u003d lesson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.updateFilteredGroupList(this.targetGrpPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new CommandException(MESSAGE_GROUP_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Group trgtGrp \u003d model.getFilteredGroupList().get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cStudent\u003e students \u003d trgtGrp.getStudents();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cStudentInfo\u003e studentInfos \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            studentInfos.add(new StudentInfo(student));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Lesson toDel \u003d new Lesson(this.toDel, studentInfos);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!trgtGrp.getLessons().contains(toDel)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_LESSON_NOT_FOUND, this.toDel, this.targetGrpPredicate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        trgtGrp.getLessons().remove(toDel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        model.updateLessonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.toDel, this.targetGrpPredicate),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "            false, false, false, true, false, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof DelLsnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.toDel.equals(((DelLsnCommand) other).toDel));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 26,
      "chunyongg": 7,
      "ryanlimjr": 42,
      "successs404": 1
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/DelQnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Deletes a question identified using it\u0027s displayed index from viewing the question list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DelQnCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delqn\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \": Deletes the question identified by the index number used in the displayed question list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_DELETE_QUESTION_SUCCESS \u003d \"Deleted Question: %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a DelQnCommand to delete the specified question."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DelQnCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ObservableList\u003cQuestion\u003e lastViewedQuestionList \u003d model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.targetIndex.getZeroBased() \u003e\u003d lastViewedQuestionList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question questionToDelete \u003d lastViewedQuestionList.get(this.targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.deleteQuestion(questionToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_QUESTION_SUCCESS, questionToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof DelQnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DelQnCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 57
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/DelStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_STUDENT_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DelStudentCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delstudent\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \": Removes a new Student from a specified tutorial group. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"GROUP \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \"STUDENT_NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \"STUDENT_ID\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"G04 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \"Ryan \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \"e1234567\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You removed %s (%s) from tutorial group %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String studentName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final Predicate\u003cGroup\u003e predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a DelStudentCommand to remove the specified {@code Student}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param studentName Name of Student"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param studentId Id of Student"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param predicate Group predicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public DelStudentCommand(String studentName, String studentId, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(studentName, studentId, predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Student student \u003d new Student(this.studentName, this.studentId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.updateFilteredGroupList(this.predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ObservableList\u003cGroup\u003e groups \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (groups.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //no such group"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new CommandException(MESSAGE_GROUP_EMPTY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!groups.get(0).getStudents().contains(student)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //student does not exist"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new CommandException(MESSAGE_STUDENT_EMPTY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.deleteStudentFromGroup(student, this.predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.updateFilteredGroupList(this.predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            String.format(MESSAGE_SUCCESS, this.studentName, this.studentId,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            model.getFilteredGroupList().get(0).getName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!(obj instanceof DelStudentCommand)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        DelStudentCommand other \u003d (DelStudentCommand) obj;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.studentName.equals(other.studentName)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.studentId.equals(other.studentId)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.predicate.equals(other.predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 38,
      "chunyongg": 52
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \"Exiting Serenity as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "successs404": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "        + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "successs404": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/MarkAbsentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class MarkAbsentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markabsent\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \": Marks a specific student absent from a lesson.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \" STUDENT_NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \" STUDENT_NUMBER\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \" Aaron Tan \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \" e0123456\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s: \\nAttendance:  absent\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"%s is not found, please ensure the name \u0026 student id is correct\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_NOT_IN_LESSON \u003d \"Currently not in any lesson. Please enter a lesson.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private Student markAbsent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private boolean isCorrectStudent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an MarkAbsentCommand to mark the specified {@code Student} absent."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public MarkAbsentCommand(Student student) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Specified student to mark present"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.markAbsent \u003d student;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            Lesson uniqueLesson \u003d model.getFilteredLessonList().get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            UniqueList\u003cStudentInfo\u003e uniqueStudentInfoList \u003d uniqueLesson.getStudentsInfo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            ObservableList\u003cStudentInfo\u003e studentsInfo \u003d uniqueStudentInfoList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            // Mark single student attendance"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            for (int i \u003d 0; i \u003c studentsInfo.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                StudentInfo studentInfo \u003d studentsInfo.get(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                this.isCorrectStudent \u003d studentInfo.containsStudent(this.markAbsent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                if (this.isCorrectStudent) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    Attendance update \u003d studentInfo.getAttendance().setNewAttendance(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    StudentInfo updatedStudentInfo \u003d studentInfo.updateAttendance(update);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    uniqueStudentInfoList.setElement(studentInfo, updatedStudentInfo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    model.updateLessonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    model.updateStudentsInfoList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            if (!this.isCorrectStudent) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_STUDENT_NOT_FOUND, this.markAbsent));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, this.markAbsent));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            if (e instanceof CommandException) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_IN_LESSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof MarkAbsentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.markAbsent.equals(((MarkAbsentCommand) other).markAbsent)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.isCorrectStudent \u003d\u003d ((MarkAbsentCommand) other).isCorrectStudent);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 38,
      "xinyee20": 51,
      "chunyongg": 2
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/MarkPresentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Marks the attendance of a class or a student in the class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class MarkPresentCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markpresent\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \": Marks a specific student or all students present from a lesson. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        + \"all or \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \" NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \" STUDENT_NUMBER\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + \"all\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        + \"or \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_NAME + \" Aaron Tan \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_ID + \" e0123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s: \\nAttendance: present\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_ALL_SUCCESS \u003d \"Attendance of all students marked present!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"%s is not found, please ensure the name \u0026 student id is correct\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_NOT_IN_LESSON \u003d \"Currently not in any lesson. Please enter a lesson.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private Student toMarkPresent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private boolean isWholeClass;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private boolean isCorrectStudent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an MarkPresentCommand to mark all {@code Student} present."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public MarkPresentCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Mark all students present"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.isWholeClass \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an MarkPresentCommand to mark the specified {@code Student} present."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public MarkPresentCommand(Student student) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.isWholeClass \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        // Specified student to mark present"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toMarkPresent \u003d student;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            Lesson uniqueLesson \u003d model.getFilteredLessonList().get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            UniqueList\u003cStudentInfo\u003e uniqueStudentInfoList \u003d uniqueLesson.getStudentsInfo();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            ObservableList\u003cStudentInfo\u003e studentsInfo \u003d uniqueStudentInfoList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            if (!this.isWholeClass) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                // Mark single student attendance"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                for (int i \u003d 0; i \u003c studentsInfo.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    StudentInfo studentInfo \u003d studentsInfo.get(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    this.isCorrectStudent \u003d studentInfo.containsStudent(this.toMarkPresent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    if (this.isCorrectStudent) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                        Attendance update \u003d studentInfo.getAttendance().setNewAttendance(true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                        StudentInfo updatedStudentInfo \u003d studentInfo.updateAttendance(update);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                        uniqueStudentInfoList.setElement(studentInfo, updatedStudentInfo);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                        model.updateLessonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        model.updateStudentsInfoList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                if (!this.isCorrectStudent) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_STUDENT_NOT_FOUND, this.toMarkPresent));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, this.toMarkPresent));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            // Mark whole class attendance"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            for (StudentInfo each : studentsInfo) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                Attendance update \u003d each.getAttendance().setNewAttendance(true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                StudentInfo updatedStudentInfo \u003d each.updateAttendance(update);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                uniqueStudentInfoList.setElement(each, updatedStudentInfo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                model.updateLessonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                model.updateStudentsInfoList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ALL_SUCCESS));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            if (e instanceof CommandException) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "                throw new CommandException(MESSAGE_NOT_IN_LESSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof MarkPresentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.toMarkPresent.equals(((MarkPresentCommand) other).toMarkPresent)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.isCorrectStudent \u003d\u003d ((MarkPresentCommand) other).isCorrectStudent"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.isWholeClass \u003d\u003d ((MarkPresentCommand) other).isWholeClass);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 44,
      "xinyee20": 74,
      "chunyongg": 3
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/ViewGrpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_GROUP_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Finds and lists all students and lessons in the group specifeied. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class ViewGrpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewgrp\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final Object MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \": Finds all students who are part of the specified group (case-insensitive) \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"GROUP\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \" G04\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final GroupContainsKeywordPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ViewGrpCommand(GroupContainsKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private String getMessage(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return model.getFilteredGroupList().isEmpty()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                ? MESSAGE_GROUP_EMPTY"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                : String.format(MESSAGE_GROUP_LISTED_OVERVIEW, model.getFilteredGroupList().get(0).getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.updateFilteredGroupList(this.predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new CommandResult(this.getMessage(model), false, false, false, true, false, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof ViewGrpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((ViewGrpCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 23,
      "chunyongg": 2,
      "ryanlimjr": 25,
      "successs404": 1
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/ViewLsnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_LESSON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_LESSON_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.LessonContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Finds and lists the attendance and class participation of all the students from"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * a specified group and lesson. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class ViewLsnCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewlsn\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Object MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \": Finds the attendance and class participation of all students \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"from the specified lesson of a specific group (case-insensitive) and \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \"GROUP \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_LSN + \"LESSON\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_GRP + \" G04 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        + PREFIX_LSN + \" 2-2\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static final String GROUP_DOES_NOT_EXIST_MESSAGE \u003d \"The specified group does not exist!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String LESSON_DOES_NOT_EXIST_MESSAGE \u003d \"The specified lesson does not exist!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final GroupContainsKeywordPredicate grpPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final LessonContainsKeywordPredicate lsnPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a ViewLsnCommand to view the specified {@code Lesson}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ViewLsnCommand(GroupContainsKeywordPredicate grpPredicate,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                          LessonContainsKeywordPredicate lsnPredicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.grpPredicate \u003d grpPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lsnPredicate \u003d lsnPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private String getMessage(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return model.getFilteredGroupList().isEmpty()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                ? MESSAGE_LESSON_EMPTY"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                : String.format(MESSAGE_LESSON_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                model.getFilteredGroupList().get(0).getName(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                model.getFilteredLessonList().get(0).getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.updateFilteredGroupList(this.grpPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new CommandException(GROUP_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        model.updateFilteredLessonList(this.lsnPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (model.getFilteredLessonList().isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new CommandException(LESSON_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new CommandResult(this.getMessage(model), false, false, true, false, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof ViewLsnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.grpPredicate.equals(((ViewLsnCommand) other).grpPredicate)) // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.lsnPredicate.equals(((ViewLsnCommand) other).lsnPredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 64,
      "chunyongg": 4,
      "ryanlimjr": 12,
      "successs404": 1
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "chunyongg": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/AddGrpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddGrpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new AddGrpCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class AddGrpCommandParser implements Parser\u003cAddGrpCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGrpCommand and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * returns an AddGrpCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public AddGrpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_PATH) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGrpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String grpName \u003d argMultimap.getValue(PREFIX_GRP).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Path filePath \u003d Paths.get(argMultimap.getValue(PREFIX_PATH).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Group group \u003d new Group(grpName, filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new AddGrpCommand(group);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 14,
      "chunyongg": 3,
      "successs404": 31
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/AddLsnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddLsnCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new AddLsnCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class AddLsnCommandParser implements Parser\u003cAddLsnCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddLsnCommand and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * returns an AddLsnCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public AddLsnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_LSN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_LSN) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLsnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String grpName \u003d argMultimap.getValue(PREFIX_GRP).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String lsnName \u003d argMultimap.getValue(PREFIX_LSN).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new AddLsnCommand(lsnName, new GroupContainsKeywordPredicate(grpName));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 15,
      "chunyongg": 1,
      "ryanlimjr": 28
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/AddQnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_QN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddQnCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new AddQnCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class AddQnCommandParser implements Parser\u003cAddQnCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddQnCommand and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * returns an AddQnCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public AddQnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_QN);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QN) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddQnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String questionDescription \u003d SerenityParserUtil.parseDescription(argMultimap.getValue(PREFIX_QN).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new AddQnCommand(new Question(questionDescription));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 43
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/AddScoreCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_SCORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddScoreCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new AddScoreCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class AddScoreCommandParser implements Parser\u003cAddScoreCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_GIVEN \u003d \"Please ensure student name / id is given\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_SCORE_NOT_WITHIN_RANGE \u003d \"Score should be within range of 0 to 5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddScoreCommand and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * returns a AddScoreCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public AddScoreCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_NAME, PREFIX_ID, PREFIX_SCORE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Optional\u003cStudent\u003e student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int score;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ID, PREFIX_SCORE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddScoreCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentName \u003d SerenityParserUtil.parseStudentName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        studentNumber \u003d SerenityParserUtil.parseStudentID(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        student \u003d Optional.ofNullable(new Student(studentName, studentNumber));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        score \u003d SerenityParserUtil.parseScore(argMultimap.getValue(PREFIX_SCORE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        if (score \u003c 0 || score \u003e 5) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException(MESSAGE_SCORE_NOT_WITHIN_RANGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return new AddScoreCommand(student.get(), score);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 15,
      "xinyee20": 46
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/AddStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new AddStudentCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final ParseException addStudentCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_NAME, PREFIX_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_NAME, PREFIX_ID)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw addStudentCommandParserException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] grpKeywordArray \u003d argMultimap.getValue(PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] studentNameArray \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] studentIdArray \u003d argMultimap.getValue(PREFIX_ID).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //if id or group keyword is more than 1, or if student name has more than 10 letters, throw exception"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesGrp \u003d grpKeywordArray.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesId \u003d studentIdArray.length \u003d\u003d 1 \u0026\u0026 studentIdArray[0].length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesStudentName \u003d studentNameArray.length \u003c\u003d 10;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!matchesGrp || !matchesId || !matchesStudentName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw addStudentCommandParserException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d String.join(\" \", studentNameArray);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d studentIdArray[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String grpName \u003d grpKeywordArray[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new AddStudentCommand(studentName, studentId, new GroupContainsKeywordPredicate(grpName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 17,
      "chunyongg": 36
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained. Keys are unique, but the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * of argument values may contain duplicate argument values, i.e. the same argument value can be inserted multiple times"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map previously contained a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this will return an empty"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * list. Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new ArrayList\u003c\u003e(this.argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "chunyongg": 11,
      "-": 45
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e e.g. {@code some"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * preamble text t/ 11.00 t/12.00 k/ m/ July} where prefixes are {@code t/ k/ m/}.\u003cbr\u003e 1. An argument\u0027s value can be an"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e 2. Leading and trailing whitespaces of an"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * argument value will be discarded.\u003cbr\u003e 3. An argument may be repeated and all its values will be accumulated e.g. the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * value of {@code t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting from index {@code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * fromIndex}. An occurrence is valid if there is a whitespace before {@code prefix}. Returns -1 if no such"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * occurrence can be found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0, this method returns -1"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * as there are no valid occurrences of \"p/\" with whitespace before it. However, if {@code argsString} \u003d \"e/hi"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *                        \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        prefixPositions"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}. The"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return this.startPosition;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return this.prefix;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "chunyongg": 25,
      "-": 122
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Prefix definitions for Serenity"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Prefix PREFIX_GRP \u003d new Prefix(\"grp/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Prefix PREFIX_PATH \u003d new Prefix(\"path/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Prefix PREFIX_LSN \u003d new Prefix(\"lsn/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"name/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final Prefix PREFIX_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final Prefix PREFIX_SCORE \u003d new Prefix(\"score/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Prefix PREFIX_QN \u003d new Prefix(\"qn/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 5,
      "xinyee20": 2,
      "successs404": 4,
      "-": 6
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/DelGrpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelGrpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new DelGrpCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DelGrpCommandParser implements Parser\u003cDelGrpCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final ParseException delGrpCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelGrpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public DelGrpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw this.delGrpCommandParserException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String[] grpKeyword \u003d argMultimap.getValue(PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (grpKeyword.length \u003e 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw this.delGrpCommandParserException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new DelGrpCommand(new GroupContainsKeywordPredicate(grpKeyword[0]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 9,
      "chunyongg": 1,
      "successs404": 35
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/DelLsnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddLsnCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelLsnCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new DelLsnCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DelLsnCommandParser implements Parser\u003cDelLsnCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGrpCommand and returns an AddGrpCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DelLsnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_LSN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_LSN) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLsnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String grpName \u003d argMultimap.getValue(PREFIX_GRP).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String lsnName \u003d argMultimap.getValue(PREFIX_LSN).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new DelLsnCommand(lsnName, new GroupContainsKeywordPredicate(grpName));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 15,
      "chunyongg": 1,
      "ryanlimjr": 28
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/DelQnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelQnCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new DelQnCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DelQnCommandParser implements Parser\u003cDelQnCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DelQnCommand and returns a DelQnCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DelQnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Index index \u003d SerenityParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new DelQnCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelQnCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 29
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/DelStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new DelStudentCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DelStudentCommandParser implements Parser\u003cDelStudentCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final ParseException deleteStudentCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public DelStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_NAME, PREFIX_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_NAME, PREFIX_ID)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw this.deleteStudentCommandParserException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] grpKeywordArray \u003d argMultimap.getValue(PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] studentNameArray \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] studentIdArray \u003d argMultimap.getValue(PREFIX_ID).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //if id or group keyword is more than 1, or if student name has more than 10 letters, throw exception"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesGrp \u003d grpKeywordArray.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesId \u003d studentIdArray.length \u003d\u003d 1 \u0026\u0026 studentIdArray[0].length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesStudentName \u003d studentNameArray.length \u003c\u003d 10;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!matchesGrp || !matchesId || !matchesStudentName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw this.deleteStudentCommandParserException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d String.join(\" \", studentNameArray);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d studentIdArray[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String grpName \u003d grpKeywordArray[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new DelStudentCommand(studentName, studentId, new GroupContainsKeywordPredicate(grpName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 19,
      "chunyongg": 34
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/MarkAbsentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.MarkAbsentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Parses input arguments and creates a new MarkAbsentCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Current support:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * markabsent name/NAME id/STUDENT_NUMBER"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class MarkAbsentCommandParser implements Parser\u003cMarkAbsentCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_GIVEN \u003d \"Please ensure student name / id is given\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkAbsentAttCommand and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * returns a MarkAbsentCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public MarkAbsentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ID) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAbsentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String studentName \u003d SerenityParserUtil.parseStudentName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentNumber \u003d SerenityParserUtil.parseStudentID(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Optional\u003cStudent\u003e student \u003d Optional.ofNullable(new Student(studentName, studentNumber));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return new MarkAbsentCommand(student.get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 11,
      "xinyee20": 40
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/MarkPresentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.MarkPresentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Parses input arguments and creates a new MarkPresentCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * Current support:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * markpresent name/NAME id/STUDENT_NUMBER"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " * markpresent all"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class MarkPresentCommandParser implements Parser\u003cMarkPresentCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_GIVEN \u003d \"Please ensure student name / id is given\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkPresentCommand and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * returns a MarkPresentCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public MarkPresentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String studentNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Optional\u003cStudent\u003e student;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Optional\u003cString\u003e keyToAll \u003d Optional.ofNullable(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            // If single student specified, get student"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            studentName \u003d SerenityParserUtil.parseStudentName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentNumber \u003d SerenityParserUtil.parseStudentID(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            student \u003d Optional.ofNullable(new Student(studentName, studentNumber));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new MarkPresentCommand(student.get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } else if (keyToAll.get().equals(\"all\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            // mark attendance of all students"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new MarkPresentCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkPresentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 11,
      "xinyee20": 55
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "chunyongg": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027grp/\u0027 in \u0027viewgrp grp/G04\u0027."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.prefix \u003d\u003d null ? 0 : this.prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "chunyongg": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/SerenityParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddGrpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddLsnCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddQnCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddScoreCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelGrpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelLsnCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelQnCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelStudentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.MarkAbsentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.MarkPresentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.ViewGrpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.ViewLsnCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class SerenityParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "        case AddGrpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return new AddGrpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case AddLsnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new AddLsnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case AddQnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new AddQnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        case AddScoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return new AddScoreCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        case AddStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case DelGrpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new DelGrpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case DelLsnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new DelLsnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case DelQnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new DelQnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        case DelStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return new DelStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case MarkAbsentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new MarkAbsentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case MarkPresentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new MarkPresentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case ViewGrpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new ViewGrpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case ViewLsnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new ViewLsnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 39,
      "xinyee20": 4,
      "chunyongg": 10,
      "ryanlimjr": 5,
      "successs404": 6,
      "-": 41
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/SerenityParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Participation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class SerenityParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses a {@code String studentName} into a {@code String}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the given {@code student} is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static String parseStudentName(String studentName) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(studentName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String trimmedName \u003d studentName.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!Student.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException(Student.STUDENT_NAME_ERROR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return trimmedName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses a {@code String studentId} into a {@code String}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws ParseException if the given {@code studentId} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static String parseStudentID(String studentId) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String trimmedId \u003d studentId.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!Student.isValidStudentId(trimmedId)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException(Student.STUDENT_NUMBER_ERROR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return trimmedId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Parses {@code String inputScore} into an {@code int} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @throws ParseException if the specified score is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static int parseScore(String inputScore) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String trimmedScore \u003d inputScore.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int score;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            score \u003d Integer.parseInt(trimmedScore);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            return score;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new ParseException(Participation.SCORE_ERROR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses a {@code String questionDescription} into a {@code String}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static String parseDescription(String questionDescription) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(questionDescription);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String trimmedQuestionDescription \u003d questionDescription.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!Question.isValidDescription(trimmedQuestionDescription)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return trimmedQuestionDescription;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 52,
      "xinyee20": 41
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/ViewGrpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.ViewGrpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new ViewGrpCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class ViewGrpCommandParser implements Parser\u003cViewGrpCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ParseException viewGrpCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGrpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ViewGrpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_GRP);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_GRP) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw this.viewGrpCommandParserException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] grpKeyword \u003d argMultimap.getValue(CliSyntax.PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (grpKeyword.length \u003e 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw this.viewGrpCommandParserException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new ViewGrpCommand(new GroupContainsKeywordPredicate(grpKeyword[0]));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 13,
      "chunyongg": 1,
      "ryanlimjr": 30
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/ViewLsnCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_LSN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.ViewLsnCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.LessonContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses input arguments and creates a new ViewLsnCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class ViewLsnCommandParser implements Parser\u003cViewLsnCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ParseException viewLsnCommandParserException \u003d new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewLsnCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ViewLsnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GRP, PREFIX_LSN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GRP, PREFIX_LSN) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw this.viewLsnCommandParserException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] grpKeyword \u003d argMultimap.getValue(PREFIX_GRP).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String[] lsnKeyword \u003d argMultimap.getValue(PREFIX_LSN).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (grpKeyword.length \u003e 1 || lsnKeyword.length \u003e 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw this.viewLsnCommandParserException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new ViewLsnCommand(new GroupContainsKeywordPredicate(grpKeyword[0]),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new LessonContainsKeywordPredicate(lsnKeyword[0]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 48,
      "chunyongg": 2
    }
  },
  {
    "path": "src/main/java/team/serenity/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/team/serenity/model/ArrayObservableList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ModifiableObservableListBase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A modifiable observable list to support rendering of different"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * set of information when navigating to different groups."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class ArrayObservableList\u003cE\u003e extends ModifiableObservableListBase\u003cE\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final List\u003cE\u003e delegate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a generic ArrayObservableList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ArrayObservableList(ObservableList\u003cE\u003e list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (E e : list) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.delegate.add(e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public E get(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.delegate.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.delegate.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    protected void doAdd(int index, E element) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.delegate.add(index, element);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    protected E doSet(int index, E element) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.delegate.set(index, element);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    protected E doRemove(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.delegate.remove(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 9,
      "ryanlimjr": 37
    }
  },
  {
    "path": "src/main/java/team/serenity/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Predicate\u003cGroup\u003e PREDICATE_SHOW_ALL_GROUPS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Predicate\u003cQuestion\u003e PREDICATE_SHOW_ALL_QUESTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Serenity \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GroupManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the user prefs\u0027 serenity file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the filtered group list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cGroup\u003e getListOfGroups();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in serenity."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "    boolean hasGroup(Group group);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if at least one group exists"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return whether any group exists"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean hasGroup();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Get stream of groups"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Stream of groups"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Stream\u003cGroup\u003e getGroupStream();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Deletes the given group. The group must exist in serenity."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void deleteGroup(Group target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds the given group. {@code group} must not already exist in serenity."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void addGroup(Group group);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Updates the filter of the filtered group list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LessonManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the lesson list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the filtered lesson list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Optional\u003cUniqueList\u003cLesson\u003e\u003e getListOfLessonsFromGroup(Group group);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Updates the lesson list to filter when changing to another group of interest."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void updateLessonList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * Updates the filter of the filtered lesson list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the student list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Optional\u003cUniqueList\u003cStudent\u003e\u003e getListOfStudentsFromGroup(Group group);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Removes a Student from a Group."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void deleteStudentFromGroup(Student student, Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds a Student to a Group"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void addStudentToGroup(Student student, Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Updates the student list when changing to another group of interest."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void updateStudentsList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Checks if Student exists."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return Whether student exists."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    boolean checkIfStudentExistsInGroup(Group group, Student student);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentInfoManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the student info list"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cStudentInfo\u003e getStudentsInfoList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Optional\u003cUniqueList\u003cStudentInfo\u003e\u003e getListOfStudentsInfoFromGroupAndLesson(Group group, Lesson lesson);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Updates the student info list to filter when changing to another lesson of interest."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void updateStudentsInfoList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QuestionManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the questionManager"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ReadOnlyQuestionManager getQuestionManager();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces questionManager data with the data in {@code questionManager}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void setQuestionManager(ReadOnlyQuestionManager questionManager);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if a question that is the same as {@code target} exists in the"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * QuestionManager."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param toCheck the given question."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return true if the given question already exist in the QuestionManager."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    boolean hasQuestion(Question toCheck);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Deletes the given question."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The question must exist in the QuestionManager."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param toDelete the given question."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void deleteQuestion(Question toDelete);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds the given question."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code toAdd} must not already exist in the QuestionManager."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param toAdd the given question."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void addQuestion(Question toAdd);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the given question {@code target} with {@code edited}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code target} must exist in the QuestionManager."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code edited} must not be the same as another existing question in the QuestionManager."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param target the given target question."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param edited the given edited question."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void setQuestion(Question target, Question edited);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the filtered question list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuestionList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Updates the filter of the filtered question list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param predicate the given predicate."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 139,
      "xinyee20": 1,
      "chunyongg": 23,
      "ryanlimjr": 19,
      "successs404": 23,
      "-": 34
    }
  },
  {
    "path": "src/main/java/team/serenity/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupLessonKey;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueLessonList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.GroupManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.LessonManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.StudentInfoManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.StudentManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final GroupManager groupManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final StudentManager studentManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final StudentInfoManager studentInfoManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final LessonManager lessonManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final QuestionManager questionManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ArrayObservableList\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ArrayObservableList\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final FilteredList\u003cLesson\u003e filteredLessons;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ArrayObservableList\u003cStudentInfo\u003e studentsInfo;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final FilteredList\u003cQuestion\u003e filteredQuestions;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Initializes a ModelManager with the given serenity and userPrefs."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ModelManager(ReadOnlySerenity serenity,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        ReadOnlyQuestionManager questionManager,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(serenity, questionManager, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        logger.fine(\"Initializing with serenity \" + serenity + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        //instantiate individual managers"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groupManager \u003d new GroupManager(new UniqueGroupList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentManager \u003d new StudentManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentInfoManager \u003d new StudentInfoManager();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessonManager \u003d new LessonManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager \u003d new QuestionManager(questionManager);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredGroups \u003d new FilteredList\u003c\u003e(this.groupManager.getListOfGroups());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.students \u003d new ArrayObservableList\u003c\u003e(new UniqueStudentList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessons \u003d new ArrayObservableList\u003c\u003e(new UniqueLessonList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredLessons \u003d new FilteredList\u003c\u003e(this.lessons);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentsInfo \u003d new ArrayObservableList\u003c\u003e(new UniqueStudentInfoList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredQuestions \u003d new FilteredList\u003c\u003e(this.questionManager.getListOfQuestions());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Initializes a ModelManager with the given userPrefs."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ModelManager(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        logger.fine(\"Initializing with user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        //instantiate individual managers"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groupManager \u003d new GroupManager(new UniqueGroupList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentInfoManager \u003d new StudentInfoManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentManager \u003d new StudentManager();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessonManager \u003d new LessonManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager \u003d new QuestionManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredGroups \u003d new FilteredList\u003c\u003e(this.groupManager.getListOfGroups());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.students \u003d new ArrayObservableList\u003c\u003e(new UniqueStudentList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessons \u003d new ArrayObservableList\u003c\u003e(new UniqueLessonList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredLessons \u003d new FilteredList\u003c\u003e(this.lessons);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentsInfo \u003d new ArrayObservableList\u003c\u003e(new UniqueStudentInfoList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredQuestions \u003d new FilteredList\u003c\u003e(this.questionManager.getListOfQuestions());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this(new Serenity(), new QuestionManager(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.userPrefs;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Serenity \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GroupManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.userPrefs.getSerenityFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Group} backed by the internal list of"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code versionedSerenity}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.filteredGroups;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cGroup\u003e getListOfGroups() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.groupManager.getListOfGroups();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.groupManager.hasGroup(group);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean hasGroup() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return groupManager.hasGroup();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Stream\u003cGroup\u003e getGroupStream() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return this.groupManager.getStream();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteGroup(Group group) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groupManager.deleteGroup(group);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredGroups.clear();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.students.clear();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessons.clear();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredLessons.clear();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentsInfo.clear();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cStudent\u003e studentList \u003d group.getStudents();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groupManager.addGroup(group);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentManager.addListOfStudentsToGroup(group, studentList);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredGroups.setPredicate(predicate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        updateStudentsList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        updateLessonList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LessonManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.lessons;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.filteredLessons;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cUniqueList\u003cLesson\u003e\u003e getListOfLessonsFromGroup(Group group) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.lessonManager.getListOfLessonsFromGroup(group);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void updateLessonList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.filteredGroups.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Group currentGroup \u003d this.filteredGroups.get(0);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ObservableList\u003cLesson\u003e lessons \u003d currentGroup.getLessonsAsUnmodifiableObservableList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            UniqueList\u003cLesson\u003e lessonList \u003d currentGroup.getLessons();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.lessons.setAll(lessons);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.lessonManager.setListOfLessonsToGroup(currentGroup, lessonList);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredLessons.setPredicate(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        updateStudentsInfoList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.students;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cUniqueList\u003cStudent\u003e\u003e getListOfStudentsFromGroup(Group group) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.studentManager.getListOfStudentsFromGroup(group);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteStudentFromGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(student, predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cStudent\u003e students \u003d this.filteredGroups.get(0).getStudents();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.filteredGroups.isEmpty() \u0026\u0026 students.contains(student)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            students.remove(student);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Group currentGroup \u003d this.filteredGroups.get(0);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            currentGroup.deleteStudentFromGroup(student);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addStudentToGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(student, predicate);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        updateFilteredGroupList(predicate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.filteredGroups.isEmpty() \u0026\u0026 !this.students.contains(student)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.students.add(student);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Group currentGroup \u003d this.filteredGroups.get(0);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            currentGroup.addStudentToGroup(student);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateStudentsList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.filteredGroups.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ObservableList\u003cStudent\u003e studentList \u003d this.filteredGroups.get(0).getStudentsAsUnmodifiableObservableList();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.students.setAll(studentList);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.studentManager.setListOfStudentsToGroup(this.filteredGroups.get(0),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                this.filteredGroups.get(0).getStudents());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean checkIfStudentExistsInGroup(Group group, Student student) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.studentManager.checkIfStudentExistsInGroup(group, student);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentInfoManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e getStudentsInfoList() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.studentsInfo;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cUniqueList\u003cStudentInfo\u003e\u003e getListOfStudentsInfoFromGroupAndLesson(Group group, Lesson lesson) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        GroupLessonKey key \u003d new GroupLessonKey(group, lesson);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.studentInfoManager.getListOfStudentsInfoFromGroupLessonKey(key);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateStudentsInfoList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.filteredGroups.isEmpty() \u0026\u0026 !this.filteredLessons.isEmpty()) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Group currentGroup \u003d this.filteredGroups.get(0);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Lesson currentLesson \u003d this.filteredLessons.get(0);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            GroupLessonKey key \u003d new GroupLessonKey(currentGroup, currentLesson);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ObservableList\u003cStudentInfo\u003e studentInfos \u003d currentLesson.getStudentsInfoAsUnmodifiableObservableList();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            UniqueList\u003cStudentInfo\u003e uniqueStudentInfoList \u003d currentLesson.getStudentsInfo();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.studentsInfo.setAll(studentInfos);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.studentInfoManager.setListOfStudentsInfoToGroupLessonKey(key, uniqueStudentInfoList);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QuestionManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ReadOnlyQuestionManager getQuestionManager() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.questionManager;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestionManager(ReadOnlyQuestionManager questionManager) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(questionManager);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager.resetData(questionManager);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean hasQuestion(Question toCheck) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.questionManager.hasQuestion(toCheck);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteQuestion(Question toDelete) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager.deleteQuestion(toDelete);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addQuestion(Question toAdd) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager.addQuestion(toAdd);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion(Question target, Question edited) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager.setQuestion(target, edited);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.filteredQuestions;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filteredQuestions.setPredicate(predicate);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utils \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.questionManager.equals(other.questionManager)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.filteredGroups.equals(other.filteredGroups)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.students.equals(other.students)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.lessons.equals(other.lessons)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.filteredLessons.equals(other.filteredLessons)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.studentsInfo.equals(other.studentsInfo)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.filteredQuestions.equals(other.filteredQuestions);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 252,
      "chunyongg": 18,
      "ryanlimjr": 19,
      "successs404": 35,
      "-": 65
    }
  },
  {
    "path": "src/main/java/team/serenity/model/ReadOnlySerenity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Unmodifiable view of a Serenity object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "public interface ReadOnlySerenity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an unmodifiable view of the group list. This list will not contain any duplicate groups."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    List\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "chunyongg": 1,
      "successs404": 14
    }
  },
  {
    "path": "src/main/java/team/serenity/model/Serenity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Wraps all data at the serenity level Duplicates are not allowed (by .isSameGroup comparison)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Serenity implements ReadOnlySerenity {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final UniqueList\u003cGroup\u003e groups;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Serenity() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a Serenity object using the Groups in the {@code toBeCopied}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Serenity(ReadOnlySerenity toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the contents of the group list with {@code groups}. {@code groups} must not contain duplicate groups."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.groups.setElementsWithList(groups);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Resets the existing data of this {@code Serenity} with {@code newData}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void resetData(ReadOnlySerenity newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setGroups(newData.getGroupList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    //// group-level operations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if a group with the same identity as {@code group} exists in serenity."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.groups.contains(group);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a group to the serenity. The group must not already exist in the serenity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void addGroup(Group g) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groups.add(g);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the given group {@code group} in the list with {@code editedGroup}. {@code target} must exist in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * serenity. The group identity of {@code editedGroup} must not be the same as another existing group in serenity."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(editedGroup);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groups.setElement(target, editedGroup);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes {@code key} from this {@code Serenity}. {@code key} must exist in serenity."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteGroup(Group key) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groups.remove(key);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.groups.asUnmodifiableObservableList().size() + \" groups\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "            || (other instanceof Serenity // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.groups.equals(((Serenity) other).groups));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.groups.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 16,
      "chunyongg": 10,
      "successs404": 81
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/Attendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a {@code Student} attendance in a Lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private final boolean isPresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private final boolean isFlagged;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a default Attendance object that is not flagged and not present."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Attendance() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.isFlagged \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.isPresent \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an Attendance object that is not flagged and with presence marked accordingly."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param isPresent True if student is present and false if student is absent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Attendance(boolean isPresent) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        this.isPresent \u003d isPresent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        this.isFlagged \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an Attendance object that isPresent and with flag marked accordingly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param isPresent True if student is present and false if student is absent"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param isFlagged True to flag student and false to unflag student"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Attendance(boolean isPresent, boolean isFlagged) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        if (isPresent) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            this.isPresent \u003d isPresent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            this.isFlagged \u003d isFlagged;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new IllegalArgumentException(\"Student should be present to be flagged\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Boolean.toString(this.isPresent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean getAttendance() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.isPresent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Attendance setNewAttendance(boolean isPresent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance updatedAttendance \u003d new Attendance(isPresent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return updatedAttendance;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean getFlagged() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.isFlagged;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Attendance other \u003d (Attendance) obj;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return other.getAttendance() \u003d\u003d getAttendance() \u0026\u0026 other.getFlagged() \u003d\u003d getFlagged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 8,
      "xinyee20": 28,
      "chunyongg": 29
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/Group.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.CsvUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a tutorial Group in Serenity."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final UniqueList\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final UniqueList\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code Group}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name     A valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param filePath A valid filePath."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Group(String name, Path filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireAllNonNull(name, filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        CsvUtil util \u003d new CsvUtil(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.students.setElementsWithList(new ArrayList\u003c\u003e(util.readStudentsFromCsv()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: implement scores data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Set\u003cStudentInfo\u003e studentsInfo \u003d util.readStudentsInfoFromCsv(util.readStudentsFromCsv());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessons.setElementsWithList(new ArrayList\u003c\u003e(util.readLessonsFromCsv(studentsInfo)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code Group}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name     A valid name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param students A list of students."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Group(String name, UniqueList\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireAllNonNull(name, students);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code Group}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name     A valid name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param students A list of students."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param lessons  A list of tutorial lessons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Group(String name, UniqueList\u003cStudent\u003e students, UniqueList\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(name, students, lessons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.lessons \u003d lessons;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public UniqueList\u003cStudent\u003e getStudents() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.students;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentsAsUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonsAsUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.lessons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public UniqueList\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.lessons;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public UniqueList\u003cLesson\u003e getSortedLessons() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessons.sort(Comparator.comparing(Lesson::getName));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.lessons;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a Student to a Group"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student Student to be added"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void addStudentToGroup(Student student) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        addToStudentList(student);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        addToStudentListInLessons(student);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes a Student from the Group."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student Student to be added"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteStudentFromGroup(Student student) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        deleteStudentFromStudentListInLessons(student);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private void addToStudentList(Student student) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.students.add(student);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private void addToStudentListInLessons(Student student) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (Lesson lesson : this.lessons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            StudentInfo newStudent \u003d new StudentInfo(student);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            UniqueList\u003cStudentInfo\u003e studentInfos \u003d lesson.getStudentsInfo();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            studentInfos.add(newStudent);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Lesson updatedLesson \u003d new Lesson(lesson.getName(), studentInfos);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.lessons.setElement(lesson, updatedLesson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private void deleteStudentFromStudentListInLessons(Student student) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (Lesson lesson : this.lessons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            StudentInfo newStudent \u003d new StudentInfo(student);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            UniqueList\u003cStudentInfo\u003e studentInfos \u003d lesson.getStudentsInfo();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            studentInfos.remove(newStudent);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Lesson updatedLesson \u003d new Lesson(lesson.getName(), studentInfos);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.lessons.setElement(lesson, updatedLesson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if both groups of the same name have at least one other identity field that is the same. This"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * defines a weaker notion of equality between two groups."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean isSameGroup(Group otherGroup) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (otherGroup \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return otherGroup !\u003d null"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 otherGroup.getName().equals(getName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 otherGroup.getStudents().equals(getStudents())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \u0026\u0026 otherGroup.getLessons().equals(getLessons());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if both groups have the same identity and data fields. This defines a stronger notion of equality"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * between two groups."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!(other instanceof Group)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group otherGroup \u003d (Group) other;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return otherGroup.getName().equals(getName())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u0026\u0026 otherGroup.getStudents().equals(getStudents())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \u0026\u0026 otherGroup.getLessons().equals(getLessons());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return this.name.hashCode();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"Group %s\", this.name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 27,
      "xinyee20": 1,
      "chunyongg": 59,
      "ryanlimjr": 9,
      "successs404": 92
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/GroupContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Tests that a {@code Group} matches the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class GroupContainsKeywordPredicate implements Predicate\u003cGroup\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public GroupContainsKeywordPredicate(String string) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.keyword \u003d string;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean test(Group group) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return StringUtil.containsWordIgnoreCase(group.getName(), this.keyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                || (other instanceof GroupContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.keyword.equals(((GroupContainsKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 10,
      "chunyongg": 3,
      "ryanlimjr": 17,
      "successs404": 3
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/GroupLessonKey.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Wraps a Group and a Lesson to form a key for a Hashmap."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class GroupLessonKey {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final Group group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final Lesson lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Instantiates a GroupLessonKey object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param lesson"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public GroupLessonKey(Group group, Lesson lesson) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Generates a hashcode for the object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Since Groups and Lessons are unique,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * concatenating the group and lesson, then hashing it would give a good hash function."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return hash code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String groupName \u003d this.group.getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String lessonName \u003d this.lesson.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String cocatenated \u003d groupName + lessonName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return cocatenated.hashCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 5,
      "chunyongg": 28
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a tutorial class in Serenity."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String NAME_CONSTRAINT \u003d \"Class name cannot be empty\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String STUDENTS_INFO_CONSTRAINT \u003d \"Students information cannot be empty\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final UniqueList\u003cStudentInfo\u003e studentsInfo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a {@code Lesson}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param studentsInfo A valid list of studentInfo."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Lesson(String name, UniqueList\u003cStudentInfo\u003e studentsInfo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        requireAllNonNull(name, studentsInfo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        checkArgument(isValidName(name), NAME_CONSTRAINT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        checkArgument(isValidStudentInfo(studentsInfo), STUDENTS_INFO_CONSTRAINT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        this.studentsInfo \u003d studentsInfo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a {@code Lesson}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param studentsInfo A valid list of studentInfo."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param questionList A list of questions."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Lesson(String name, UniqueList\u003cStudentInfo\u003e studentsInfo, UniqueList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(name, studentsInfo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        checkArgument(isValidName(name), NAME_CONSTRAINT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        checkArgument(isValidStudentInfo(studentsInfo), STUDENTS_INFO_CONSTRAINT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentsInfo \u003d studentsInfo;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private UniqueList\u003cStudentInfo\u003e generateStudentInfo(ObservableList\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cStudentInfo\u003e studentInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (Student s : students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            studentInfo.add(new StudentInfo(s, new Participation(), new Attendance()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return studentInfo;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean isValidName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return name.length() \u003e 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean isValidStudentInfo(UniqueList\u003cStudentInfo\u003e studentsInfo) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return studentsInfo.size() \u003e 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public UniqueList\u003cStudentInfo\u003e getStudentsInfo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.studentsInfo;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e getStudentsInfoAsUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.studentsInfo.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isSame(Lesson otherLsn) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return otherLsn.getName().equals(getName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!(obj instanceof Lesson)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Lesson otherClass \u003d (Lesson) obj;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return otherClass.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 otherClass.getStudentsInfo().equals(getStudentsInfo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"Lesson %s\", this.name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 36,
      "xinyee20": 5,
      "chunyongg": 49,
      "ryanlimjr": 10
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/LessonContainsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Tests that a {@code Lesson} matches the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class LessonContainsKeywordPredicate implements Predicate\u003cLesson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public LessonContainsKeywordPredicate(String string) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.keyword \u003d string;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean test(Lesson lesson) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return StringUtil.containsWordIgnoreCase(lesson.getName(), this.keyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                || (other instanceof LessonContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.keyword.equals(((LessonContainsKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 26,
      "chunyongg": 3
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/Participation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Participation {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static final String SCORE_ERROR \u003d \"Score must be a number\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final int score;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Participation() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.score \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a Participation object containing the score of a student."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param score Score of Student"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Participation(int score) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        if (score \u003e\u003d 0 \u0026\u0026 score \u003c\u003d 5) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            this.score \u003d score;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            throw new IllegalArgumentException(\"Score must be within the range of 0 to 5\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Integer.toString(this.score);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public int getScore() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public Participation setNewScore(int score) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation updatedScore \u003d new Participation(score);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return updatedScore;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Participation other \u003d (Participation) obj;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return other.getScore() \u003d\u003d getScore();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "xinyee20": 17,
      "chunyongg": 22
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a Lesson\u0027s question in Serenity."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Questions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The first character of the question must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private String group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private String lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs an {@code Question}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        checkArgument(isValidDescription(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.group \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lesson \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.description \u003d question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs an {@code Question}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param lesson"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Question(String group, String lesson, String question) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(group, lesson, question);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        checkArgument(isValidDescription(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.description \u003d question;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setGroupAndLesson(String group, String lesson) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getGroup() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.group;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getLesson() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.lesson;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"[Group %s Lesson %s] %s\", this.group, this.lesson, this.description);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.group.equals(((Question) other).getGroup()) // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.lesson.equals(((Question) other).getLesson())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.description.equals(((Question) other).getDescription())); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Objects.hash(this.group, this.lesson, this.description);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 99
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a tutorial Group in Serenity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String STUDENT_NAME_ERROR \u003d \"Name cannot be empty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final String STUDENT_NUMBER_ERROR \u003d \"Student number cannot be empty \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"and must follow the format \u0027eXXXXXXX\u0027 \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        + \"where X is a digit from 0 to 9\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private String studentId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code Student}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name          A valid name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param studentId A valid student number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Student(String name, String studentId) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(name, studentId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        checkArgument(isValidName(name), STUDENT_NAME_ERROR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        checkArgument(isValidStudentId(studentId), STUDENT_NUMBER_ERROR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static boolean isValidName(String s) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return s.length() \u003e 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Checks whether String s is a valid Student ID."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param s Student ID"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Whether String is valid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static boolean isValidStudentId(String s) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //8 digits long"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        s \u003d s.toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesLength \u003d s.length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesChar \u003d s.charAt(0) \u003d\u003d \u0027e\u0027;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!matchesChar || !matchesLength) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println(s);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return s.length() \u003d\u003d 8 \u0026\u0026 s.charAt(0) \u003d\u003d \u0027e\u0027;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getStudentId() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.studentId;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.name + \" \" + this.studentId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (obj instanceof Student) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Student other \u003d (Student) obj;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return other.getName().equals(getName()) \u0026\u0026 other.getStudentId().equals(getStudentId());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 21,
      "chunyongg": 33,
      "successs404": 22
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/StudentInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a {@code Student} interaction with a Lesson."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Stores {@code Student}, {@code Participation} and {@code Attendance}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class StudentInfo {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final Student student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private final Participation participation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a {@code StudentInfo} from a {@code Student}, {@code Participation} and {@code Attendance}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param participation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param attendance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public StudentInfo(Student student, Participation participation, Attendance attendance) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(student, participation, attendance);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates an empty {@code StudentInfo} from a {@code Student}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public StudentInfo(Student student) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.participation \u003d new Participation();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Student getStudent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.student;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Participation getParticipation() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.participation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.attendance;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Check whether the student in Student Info matches the specific student given in the input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param student Student to be checked"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @return Yes if student is correct, No if student is wrong"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public boolean containsStudent(Student student) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        boolean isCorrectStudent \u003d this.student.equals(student);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return isCorrectStudent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Marks the student present or absent for the class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param updatedAttendance The attendance of the student for the lesson"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @return The updated Attendance"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public StudentInfo updateAttendance(Attendance updatedAttendance) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo updatedStudentInfo \u003d new StudentInfo(this.student, this.participation, updatedAttendance);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return updatedStudentInfo;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Updates the student participation score for the class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @param updatedScore The participation score of the student for the lesson"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     * @return The updated Participation object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public StudentInfo updateParticipation(Participation updatedScore) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo updatedStudentInfo \u003d new StudentInfo(this.student, updatedScore, this.attendance);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return updatedStudentInfo;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo other \u003d (StudentInfo) obj;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.student.equals(other.getStudent())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.participation.equals(other.getParticipation())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.attendance.equals(other.getAttendance());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            .format(\"Name: %s, participation: %s, attendance: %s\", this.student, this.participation, this.attendance);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 17,
      "xinyee20": 33,
      "chunyongg": 44
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/UniqueGroupList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A list of groups that enforces uniqueness between its elements and does not allow nulls. A group is considered unique"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * by comparing using {@code Group#isSameGroup(Group)}. As such, adding and updating of groups uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Group#isSameGroup(Group) for equality so as to ensure that the group being added or updated is unique in terms of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * identity in the UniqueGroupList. However, the removal of a group uses Group#equals(Object) so as to ensure that the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * group with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": " * @see Group#isSameGroup(Group)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class UniqueGroupList implements UniqueList\u003cGroup\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if the list contains an equivalent group as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.stream().anyMatch(toCheck::isSameGroup);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Converts to stream"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Stream\u003cGroup\u003e stream() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return internalList.stream();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cGroup\u003e getList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a group to the list. The group must not already exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add(Group toAdd) throws DuplicateException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.add(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the group {@code target} in the list with {@code editedGroup}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * The group identity of {@code editedGroup} must not be the same as another existing group in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElement(Group target, Group editedGroup) throws NotFoundException, DuplicateException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireAllNonNull(target, editedGroup);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        int index \u003d this.internalList.indexOf(target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!target.isSameGroup(editedGroup) \u0026\u0026 contains(editedGroup)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.set(index, editedGroup);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes the equivalent group from the list. The group must exist in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void remove(Group toRemove) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void sort(Comparator\u003cGroup\u003e comparator) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.sort(comparator);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithUniqueList(UniqueList\u003cGroup\u003e replacement) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(replacement.getList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the contents of this list with {@code groups}. {@code groups} must not contain duplicate groups."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithList(List\u003cGroup\u003e groups) throws DuplicateException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireAllNonNull(groups);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!elementsAreUnique(groups)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(groups);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.iterator();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "successs404"
        },
        "content": "            || (other instanceof UniqueGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.internalList.equals(((UniqueGroupList) other).internalList));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.hashCode();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns true if {@code groups} contains only unique groups."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean elementsAreUnique(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size() - 1; i++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "successs404"
        },
        "content": "            for (int j \u003d i + 1; j \u003c groups.size(); j++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "successs404"
        },
        "content": "                if (groups.get(i).isSameGroup(groups.get(j))) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "successs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 25,
      "chunyongg": 45,
      "successs404": 102
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/UniqueLessonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A list of Lessons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A Lesson is considered unique by comparing using {@code Lesson#equal(Object)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class UniqueLessonList implements UniqueList\u003cLesson\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cLesson\u003e getList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Stream\u003cLesson\u003e stream() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return this.internalList.stream();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if the list contains an equivalent lesson as the given argument."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean contains(Lesson toCheck) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Adds a lesson to the list. The lesson must not already exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add(Lesson toAdd) throws DuplicateException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces the lesson {@code target} in the list with {@code lesson}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * The lesson identity of {@code lesson} must not be the same as another existing lesson in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElement(Lesson target, Lesson editedLesson) throws NotFoundException, DuplicateException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        int index \u003d this.internalList.indexOf(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!target.equals(editedLesson) \u0026\u0026 contains(editedLesson)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.set(index, editedLesson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Removes the equivalent lesson from the list. The lesson must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void remove(Lesson toRemove) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (int i \u003d 0; i \u003c this.internalList.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            if (this.internalList.get(i).isSame(toRemove)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                this.internalList.remove(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces all the lessons from the list with a new list of lessons"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithUniqueList(UniqueList\u003cLesson\u003e replacement) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(replacement.getList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}. {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithList(List\u003cLesson\u003e lessons) throws DuplicateException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireAllNonNull(lessons);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!elementsAreUnique(lessons)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(lessons);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cLesson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void sort(Comparator\u003cLesson\u003e comparator) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.sort(comparator);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Iterator\u003cLesson\u003e iterator() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.iterator();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                || (other instanceof UniqueLessonList // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueLessonList) other).internalList));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.hashCode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if {@code lessons} contains only unique lessons."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean elementsAreUnique(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            for (int j \u003d i + 1; j \u003c lessons.size(); j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                if (lessons.get(i).equals(lessons.get(j))) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 27,
      "chunyongg": 26,
      "ryanlimjr": 113
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/UniqueQuestionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A list of Questions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A Question is considered unique by comparing using {@code Question#equal(Object)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class UniqueQuestionList implements UniqueList\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Stream\u003cQuestion\u003e stream() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return this.internalList.stream();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void sort(Comparator\u003cQuestion\u003e comparator) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.sort(comparator);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if the list contains an equivalent question as the given argument."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean contains(Question toCheck) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds a question to the list. The question must not already exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add(Question toAdd) throws DuplicateException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the question {@code target} in the list with {@code question}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The question identity of {@code question} must not be the same as another existing question in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElement(Question target, Question editedQuestion) throws NotFoundException, DuplicateException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        int index \u003d this.internalList.indexOf(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!target.equals(editedQuestion) \u0026\u0026 contains(editedQuestion)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.set(index, editedQuestion);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Removes the equivalent question from the list. The question must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove(Question toRemove) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces all the lessons from the list with a new list of lessons"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param replacement"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithUniqueList(UniqueList\u003cQuestion\u003e replacement) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(replacement.getList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the contents of this list with {@code questionList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code questionList} must not contain duplicate questions."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithList(List\u003cQuestion\u003e questionList) throws DuplicateException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(questionList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!elementsAreUnique(questionList)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(questionList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cQuestion\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Iterator\u003cQuestion\u003e iterator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof UniqueQuestionList // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueQuestionList) other).internalList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if {@code questionList} contains only unique questions."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean elementsAreUnique(List\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (int i \u003d 0; i \u003c questionList.size() - 1; i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c questionList.size(); j++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                if (questionList.get(i).equals(questionList.get(j))) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 132,
      "chunyongg": 32
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/UniqueStudentInfoList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateStudentInfoException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.StudentInfoNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A list of Students Info that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A Student Info is considered unique by comparing using {@code StudentInfo#equal(Object)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class UniqueStudentInfoList implements UniqueList\u003cStudentInfo\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ObservableList\u003cStudentInfo\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final ObservableList\u003cStudentInfo\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e getList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Stream\u003cStudentInfo\u003e stream() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return this.internalList.stream();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void sort(Comparator\u003cStudentInfo\u003e comparator) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.sort(comparator);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if the list contains an equivalent student info as the given argument."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean contains(StudentInfo toCheck) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds a student info to the list. The student info must not already exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add(StudentInfo toAdd) throws DuplicateException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateStudentInfoException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Removes the equivalent student info from the list. The student info must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove(StudentInfo toRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new StudentInfoNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the student info {@code target} in the list with {@code editedStudentInfo}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The identity of {@code editedStudentInfo} must not be the same as another existing student info in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElement(StudentInfo target, StudentInfo editedStudentInfo)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        throws NotFoundException, DuplicateException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(target, editedStudentInfo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        int index \u003d this.internalList.indexOf(target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new StudentInfoNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!target.equals(editedStudentInfo) \u0026\u0026 contains(editedStudentInfo)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateStudentInfoException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.set(index, editedStudentInfo);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithUniqueList(UniqueList\u003cStudentInfo\u003e replacement) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(replacement.getList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the contents of this list with {@code studentsInfo}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code studentsInfo} must not contain duplicate students info."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithList(List\u003cStudentInfo\u003e studentsInfo) throws DuplicateException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(studentsInfo);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!elementsAreUnique(studentsInfo)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new DuplicateStudentInfoException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(studentsInfo);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Iterator\u003cStudentInfo\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (other instanceof UniqueStudentInfoList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueStudentInfoList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if {@code studentsInfo} contains only unique students info."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean elementsAreUnique(List\u003cStudentInfo\u003e studentsInfo) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (int i \u003d 0; i \u003c studentsInfo.size() - 1; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c studentsInfo.size(); j++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                if (studentsInfo.get(i).equals(studentsInfo.get(j))) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 135,
      "chunyongg": 25
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A list of Students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * A Student is considered unique by comparing using {@code Student#equal(Object)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class UniqueStudentList implements UniqueList\u003cStudent\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cStudent\u003e getList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void sort(Comparator\u003cStudent\u003e comparator) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.sort(comparator);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Adds a student to the list. The student must not already exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add(Student toAdd) throws DuplicateException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code student}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * The student identity of {@code student} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElement(Student target, Student editedStudent) throws NotFoundException, DuplicateException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        int index \u003d this.internalList.indexOf(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!target.equals(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Removes the equivalent student from the list. The student must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces all the students from the list with a new list of students"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithUniqueList(UniqueList\u003cStudent\u003e replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(replacement.getList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Replaces the contents of this list with {@code students}. {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithList(List\u003cStudent\u003e students) throws DuplicateException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireNonNull(students);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!elementsAreUnique(students)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.internalList.setAll(students);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Stream\u003cStudent\u003e stream() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return this.internalList.stream();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.internalList.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean elementsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                if (students.get(i).equals(students.get(j))) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 25,
      "chunyongg": 30,
      "ryanlimjr": 105
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/DuplicateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DuplicateException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public DuplicateException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(\"Operation would result in duplicate elements\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 6
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/DuplicateGroupException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Signals that the operation will result in duplicate Groups (Groups are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DuplicateGroupException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public DuplicateGroupException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(\"Operation would result in duplicate groups\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 1,
      "successs404": 10
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/DuplicateLessonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Signals that the operation will result in duplicate Lesson (Lessons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(\"Operation would result in duplicate Lesson!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "ryanlimjr": 10
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/DuplicateQuestionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation will result in duplicate Questions (Questions are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * if they have the same values)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DuplicateQuestionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DuplicateQuestionException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(\"Operation would result in duplicate Question!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 13
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/DuplicateStudentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(\"Operation would result in duplicate Student!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "ryanlimjr": 11
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/DuplicateStudentInfoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation will result in duplicate Student Info"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * (Student Info are considered duplicates if they have the same student identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DuplicateStudentInfoException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DuplicateStudentInfoException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(\"Operation would result in duplicate Student Info!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 13
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/GroupNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Signals that the operation is unable to find the specified group."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class GroupNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 3,
      "successs404": 4
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Signals that the operation is unable to find the specified lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class LessonNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "ryanlimjr": 6
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/NotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class NotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public NotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(\"Item not found\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 7
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/QuestionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation is unable to find the specified question."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class QuestionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 8
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/StudentInfoNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation is unable to find the specified student info."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class StudentInfoNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 8
    }
  },
  {
    "path": "src/main/java/team/serenity/model/group/exceptions/StudentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "ryanlimjr": 6
    }
  },
  {
    "path": "src/main/java/team/serenity/model/managers/GroupManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Manages tutorial groups."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class GroupManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final UniqueList\u003cGroup\u003e listOfGroups;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Instantiates a GroupManager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param listOfGroups List of tutorial groups"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public GroupManager(UniqueList\u003cGroup\u003e listOfGroups) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(listOfGroups);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.listOfGroups \u003d listOfGroups;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Checks whether group exists."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param group Group to check for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Whether given group exists"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.listOfGroups.contains(group);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean hasGroup() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return this.listOfGroups.size() \u003e 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Stream\u003cGroup\u003e getStream() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return this.listOfGroups.stream();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds given group to the list, if it doesn\u0027t exist yet."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param group Group to be added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!hasGroup(group)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.listOfGroups.add(group);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Deletes a specified {@code Group} from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void deleteGroup(Group group) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (hasGroup(group)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.listOfGroups.remove(group);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cGroup\u003e getListOfGroups() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.listOfGroups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 19,
      "chunyongg": 56
    }
  },
  {
    "path": "src/main/java/team/serenity/model/managers/LessonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class LessonManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final HashMap\u003cGroup, UniqueList\u003cLesson\u003e\u003e mapToListOfLessons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public LessonManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.mapToListOfLessons \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds a specified {@code Lesson} to a {@code Group}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param lesson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addLessonToGroup(Group group, Lesson lesson) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(group, lesson);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cLesson\u003e lessonList \u003d this.mapToListOfLessons.get(group);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (lessonList !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (!lessonList.contains(lesson)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                lessonList.add(lesson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces listOfLessons stored in {@code Group} with {@code newListOfLessons}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param newListOfLessons"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setListOfLessonsToGroup(Group group, UniqueList\u003cLesson\u003e newListOfLessons) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(group, newListOfLessons);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.mapToListOfLessons.put(group, newListOfLessons);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cUniqueList\u003cLesson\u003e\u003e getListOfLessonsFromGroup(Group group) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Optional.ofNullable(this.mapToListOfLessons.get(group));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 46,
      "chunyongg": 2
    }
  },
  {
    "path": "src/main/java/team/serenity/model/managers/QuestionManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueQuestionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Wraps all data at the QuestionManager level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class QuestionManager implements ReadOnlyQuestionManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final UniqueList\u003cQuestion\u003e listOfQuestions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Instantiates a new QuestionManager."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public QuestionManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.listOfQuestions \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a QuestionManager using the Questions in the {@code} toBeCopied}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public QuestionManager(ReadOnlyQuestionManager toBeCopied) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.listOfQuestions \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Methods that overrides the whole question list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the contents of the question list with {@code newListOfQuestions}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code newListOfQuestions} must not contain duplicate questions."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e newListOfQuestions) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.listOfQuestions.setElementsWithList(newListOfQuestions);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Resets the existing data of this {@code QuestionManager} with {@code newData}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void resetData(ReadOnlyQuestionManager newData) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        setQuestions(newData.getListOfQuestions());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getListOfQuestions() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.listOfQuestions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Question-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if a question with the same identity as {@code toCheck} exists in the QuestionManager."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean hasQuestion(Question toCheck) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.listOfQuestions.contains(toCheck);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds a question {@code toAdd} to the QuestionManager."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The question must not already exist in the QuestionManager."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addQuestion(Question toAdd) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (hasQuestion(toAdd)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DuplicateException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.listOfQuestions.add(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces the given question {@code target} in the list with {@code editedQuestion}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code target} must exist in the QuestionManager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * The question identity of {@code editedQuestion} must not be the same as"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * another existing question in the QuestionManager."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(editedQuestion);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.listOfQuestions.setElement(target, editedQuestion);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Deletes the given question {@code toDelete} from this {@code QuestionManager}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * {@code toDelete} must exist in the QuestionManager."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteQuestion(Question toDelete) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.listOfQuestions.remove(toDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Util Methods"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.listOfQuestions.hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                || (obj instanceof QuestionManager // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u0026\u0026 this.listOfQuestions.equals(((QuestionManager) obj).listOfQuestions));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return \"QuestionManager:\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                + this.listOfQuestions.getList().stream().map(Question::toString).collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                + \"\\n Total number of questions: \" + this.listOfQuestions.size();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 121
    }
  },
  {
    "path": "src/main/java/team/serenity/model/managers/ReadOnlyQuestionManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Unmodifiable view of a QuestionManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public interface ReadOnlyQuestionManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an unmodifiable view of the question list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * This list will not contain any duplicate question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    ObservableList\u003cQuestion\u003e getListOfQuestions();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 15
    }
  },
  {
    "path": "src/main/java/team/serenity/model/managers/StudentInfoManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupLessonKey;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class StudentInfoManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final HashMap\u003cGroupLessonKey, UniqueList\u003cStudentInfo\u003e\u003e mapToListOfStudentsInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public StudentInfoManager() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.mapToListOfStudentsInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cUniqueList\u003cStudentInfo\u003e\u003e getListOfStudentsInfoFromGroupLessonKey(GroupLessonKey key) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Optional.ofNullable(this.mapToListOfStudentsInfo.get(key));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces listOfStudentsInfo stored at {@code key} with {@code newListOfStudentsInfo}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param key"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param newListOfStudentsInfo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setListOfStudentsInfoToGroupLessonKey(GroupLessonKey key,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                                                      UniqueList\u003cStudentInfo\u003e newListOfStudentsInfo) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.mapToListOfStudentsInfo.put(key, newListOfStudentsInfo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 30
    }
  },
  {
    "path": "src/main/java/team/serenity/model/managers/StudentManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class StudentManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final HashMap\u003cGroup, UniqueList\u003cStudent\u003e\u003e mapToListOfStudents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public StudentManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.mapToListOfStudents \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Adds the specified {@code Student} to the specified {@code Group}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addStudentToGroup(Group group, Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(group, student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Optional\u003cUniqueList\u003cStudent\u003e\u003e studentsOptional \u003d Optional.ofNullable(this.mapToListOfStudents.get(group));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (studentsOptional.isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            UniqueList\u003cStudent\u003e students \u003d studentsOptional.get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (!students.contains(student)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                students.add(student);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addListOfStudentsToGroup(Group group, UniqueList\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.mapToListOfStudents.put(group, students);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Checks if the specified {@code Student} exists in the {@code Group}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return whether Student exists in the Group"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean checkIfStudentExistsInGroup(Group group, Student student) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireAllNonNull(group, student);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Optional\u003cUniqueList\u003cStudent\u003e\u003e studentsOptional \u003d Optional.ofNullable(this.mapToListOfStudents.get(group));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (studentsOptional.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return studentsOptional.get().contains(student);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Gets listOfStudents from a particular {@code Group}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param group Group to check for"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return All students from a particular group"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cUniqueList\u003cStudent\u003e\u003e getListOfStudentsFromGroup(Group group) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Optional.ofNullable(this.mapToListOfStudents.get(group));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Replaces listOfStudents stored in {@code Group} with {@code newListOfStudents}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param newListOfStudents"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setListOfStudentsToGroup(Group group, UniqueList\u003cStudent\u003e newListOfStudents) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireAllNonNull(group, newListOfStudents);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.mapToListOfStudents.put(group, newListOfStudents);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 25,
      "chunyongg": 51
    }
  },
  {
    "path": "src/main/java/team/serenity/model/userprefs/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Path getQuestionStorageFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "successs404": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/team/serenity/model/userprefs/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Path DEFAULT_FOLDER_PATH \u003d Path.of(\"data\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Path serenityFilePath \u003d DEFAULT_FOLDER_PATH.resolve(\"serenity.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Path questionStorageFilePath \u003d DEFAULT_FOLDER_PATH.resolve(\"question.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Serenity"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.serenityFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setSerenityFilePath(Path serenityFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(serenityFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.serenityFilePath \u003d serenityFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Question Manager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Path getQuestionStorageFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.questionStorageFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestionStorageFilePath(Path questionStorageFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(questionStorageFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionStorageFilePath \u003d questionStorageFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.serenityFilePath.equals(o.serenityFilePath)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.questionStorageFilePath.equals(o.questionStorageFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Objects.hash(this.guiSettings, this.serenityFilePath, this.questionStorageFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        sb.append(\"Gui Settings : \" + this.guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + this.serenityFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        sb.append(\"\\nLocal question data file location : \" + this.questionStorageFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 27,
      "chunyongg": 2,
      "successs404": 9,
      "-": 65
    }
  },
  {
    "path": "src/main/java/team/serenity/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Serenity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueLessonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static Group[] getSampleGroups() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Set\u003cStudentInfo\u003e studentsInfo \u003d getStudentInfoSet(new Student(\"John\", \"E0123456\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Student(\"James\", \"E02030303\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cStudentInfo\u003e studentsInfoList \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentsInfoList.setElementsWithList(new ArrayList\u003c\u003e(studentsInfo));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cStudent\u003e students \u003d getStudentSet(new Student(\"John\", \"E0123456\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Student(\"James\", \"E02030303\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cStudent\u003e studentsList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        studentsList.setElementsWithList(new ArrayList\u003c\u003e(students));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cLesson\u003e lessonsList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cLesson\u003e lessons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        lessons.add(new Lesson(\"1-1\", studentsInfoList));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Group[] {new Group(\"G04\", studentsList, lessonsList)};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static ReadOnlySerenity getSampleSerenity() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Serenity samples \u003d new Serenity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (Group sampleGroup : getSampleGroups()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            samples.addGroup(sampleGroup);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return samples;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public static Set\u003cStudentInfo\u003e getStudentInfoSet(Student... students) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Set\u003cStudentInfo\u003e studentsInfo \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentsInfo.add(new StudentInfo(student));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        return studentsInfo;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns a student set containing the list of strings given."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static Set\u003cStudent\u003e getStudentSet(Student... students) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return Arrays.stream(students)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns a lesson set containing the list of strings given."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static Set\u003cLesson\u003e getLessonSet(Lesson... lessons) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Arrays.stream(lessons)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static Question[] getSampleQuestion() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Question[]{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            new Question(\"G04\", \"2-2\", \"What is the deadline for the report?\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            new Question(\"G05\", \"3-1\", \"When is the consultation held?\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static ReadOnlyQuestionManager getSampleQuestionManager() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionManager sampleQuestionManager \u003d new QuestionManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (Question sampleQuestion : getSampleQuestion()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            sampleQuestionManager.addQuestion(sampleQuestion);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return sampleQuestionManager;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 44,
      "xinyee20": 5,
      "chunyongg": 10,
      "ryanlimjr": 1,
      "successs404": 20,
      "-": 11
    }
  },
  {
    "path": "src/main/java/team/serenity/model/util/UniqueList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.NotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public interface UniqueList\u003cT\u003e extends Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if the list contains an equivalent element as the given argument."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean contains(T toCheck);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    ObservableList\u003cT\u003e getList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void sort(Comparator\u003cT\u003e comparator);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Stream\u003cT\u003e stream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public int size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds an element to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * The element must not already exist in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add(T toAdd) throws DuplicateException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the element {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * The element identity of {@code edited} must not be the same as another existing element in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElement(T target, T edited) throws NotFoundException, DuplicateException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes the equivalent element from the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * The element must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void remove(T toRemove);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithUniqueList(UniqueList\u003cT\u003e replacement);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Replaces the contents of this list with {@code elements}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * {@code elements} must not contain duplicate elements."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setElementsWithList(List\u003cT\u003e elements) throws DuplicateException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Iterator\u003cT\u003e iterator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public int hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns true if {@code elements} contains only unique elements."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean elementsAreUnique(List\u003cT\u003e elements);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "chunyongg": 67
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/JsonAdaptedGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueLessonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Jackson-friendly version of {@link Group}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedGroup {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts a given {@code Group} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonAdaptedGroup(Group source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.students.addAll(source.getStudents().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .map(JsonAdaptedStudent::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessons.addAll(source.getSortedLessons().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            .map(JsonAdaptedLesson::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts this Jackson-friendly adapted group object into the model\u0027s {@code Group} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted group."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Group toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String modelName \u003d this.name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        final List\u003cStudent\u003e groupStudents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (JsonAdaptedStudent groupStudent : this.students) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "            groupStudents.add(groupStudent.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        final UniqueList\u003cStudent\u003e modelStudents \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        modelStudents.setElementsWithList(new ArrayList\u003c\u003e(groupStudents));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        final UniqueList\u003cStudentInfo\u003e studentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final List\u003cLesson\u003e groupLessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (JsonAdaptedLesson groupLesson : this.lessons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Lesson lessonItem \u003d new Lesson(groupLesson.getName(), studentsInfo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            groupLessons.add(lessonItem);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        final UniqueList\u003cLesson\u003e modelLessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        modelLessons.setElementsWithList(new ArrayList\u003c\u003e(groupLessons));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Group(modelName, modelStudents, modelLessons);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 23,
      "chunyongg": 6,
      "successs404": 41
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/JsonAdaptedLesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Jackson-friendly version of {@link Lesson}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given {@code name}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public JsonAdaptedLesson(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Converts a given {@code Lesson} into this Lesson for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 10,
      "successs404": 24
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final String studentNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given {@code name} and {@ocde studentNumber}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonAdaptedStudent(String name, String studentNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.studentNumber \u003d studentNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentNumber \u003d source.getStudentId();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // add some validation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Student(this.name, this.studentNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "successs404": 42
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/JsonSerenityStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A class to access Serenity data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class JsonSerenityStorage implements SerenityStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSerenityStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonSerenityStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Optional\u003cReadOnlySerenity\u003e readSerenity() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return readSerenity(this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Similar to {@link #readSerenity()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Optional\u003cReadOnlySerenity\u003e readSerenity(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Optional\u003cJsonSerializableSerenity\u003e jsonSerenity \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "            filePath, JsonSerializableSerenity.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (jsonSerenity.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return Optional.of(jsonSerenity.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void saveSerenity(ReadOnlySerenity serenity) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        saveSerenity(serenity, this.filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void saveSerenity(Stream\u003cGroup\u003e groups) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.saveSerenity(groups, this.filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Similar to {@link #saveSerenity(ReadOnlySerenity)}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void saveSerenity(ReadOnlySerenity serenity, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(serenity);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSerenity(serenity), filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Saves group to storage"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param groups"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void saveSerenity(Stream\u003cGroup\u003e groups, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireNonNull(groups);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSerenity(groups), filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 10,
      "chunyongg": 23,
      "successs404": 69
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/JsonSerializableSerenity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Serenity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": " * An Immutable Serenity that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "@JsonRootName(value \u003d \"serenity\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonSerializableSerenity {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \"Group list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private final List\u003cJsonAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Constructs a {@code JsonSerializableSerenity} with the given groups."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonSerializableSerenity(@JsonProperty(\"groups\") List\u003cJsonAdaptedGroup\u003e groups) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.groups.addAll(groups);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts a given {@code ReadOnlySerenity} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSerenity}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public JsonSerializableSerenity(ReadOnlySerenity source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groups.addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            source.getGroupList().stream().map(JsonAdaptedGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public JsonSerializableSerenity(Stream\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.groups.addAll(groups.map(JsonAdaptedGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Converts this serenity object into the model\u0027s {@code Serenity} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Serenity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Serenity serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (JsonAdaptedGroup jsonAdaptedGroup : this.groups) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "            Group group \u003d jsonAdaptedGroup.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (serenity.hasGroup(group)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity.addGroup(group);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "chunyongg": 6,
      "successs404": 53
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/SerenityStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Serenity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a storage for {@link Serenity}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "public interface SerenityStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns Serenity data as a {@link ReadOnlySerenity}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Optional\u003cReadOnlySerenity\u003e readSerenity() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @see #getSerenityFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Optional\u003cReadOnlySerenity\u003e readSerenity(Path filePath)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Saves the given {@link ReadOnlySerenity} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param serenity cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void saveSerenity(ReadOnlySerenity serenity) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void saveSerenity(Stream\u003cGroup\u003e groups) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @see #saveSerenity(ReadOnlySerenity)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void saveSerenity(ReadOnlySerenity serenity, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "chunyongg": 8,
      "successs404": 38
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.question.QuestionStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public interface Storage extends UserPrefsStorage, SerenityStorage, QuestionStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // ---- Serenity ----//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Path getSerenityFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    Optional\u003cReadOnlySerenity\u003e readSerenity() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void saveSerenity(ReadOnlySerenity serenity) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 9,
      "successs404": 11,
      "-": 16
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ReadOnlySerenity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.question.QuestionStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private SerenityStorage serenityStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private QuestionStorage questionStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Instantiates a new Storage manager."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param serenityStorage   the serenity manager storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param questionStorage   the question manager storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param userPrefsStorage  the user pref storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public StorageManager(SerenityStorage serenityStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                          QuestionStorage questionStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.serenityStorage \u003d serenityStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionStorage \u003d questionStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Serenity methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.serenityStorage.getSerenityFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Optional\u003cReadOnlySerenity\u003e readSerenity() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return readSerenity(this.serenityStorage.getSerenityFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Optional\u003cReadOnlySerenity\u003e readSerenity(Path filePath)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.serenityStorage.readSerenity(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void saveSerenity(ReadOnlySerenity serenity) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        saveSerenity(serenity, this.serenityStorage.getSerenityFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void saveSerenity(Stream\u003cGroup\u003e groups) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.serenityStorage.saveSerenity(groups);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void saveSerenity(ReadOnlySerenity serenity, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.serenityStorage.saveSerenity(serenity, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Question Manager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Path getQuestionManagerStorageFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.questionStorage.getQuestionManagerStorageFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cReadOnlyQuestionManager\u003e readQuestionManager() throws DataConversionException,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return readQuestionManager(this.questionStorage.getQuestionManagerStorageFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cReadOnlyQuestionManager\u003e readQuestionManager("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.questionStorage.readQuestionManager(filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void saveQuestionManager(ReadOnlyQuestionManager questionManager) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        saveQuestionManager(questionManager, this.questionStorage.getQuestionManagerStorageFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void saveQuestionManager("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ReadOnlyQuestionManager questionManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        logger.fine(\"Attempting to write to question data file: \" + filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionStorage.saveQuestionManager(questionManager, filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 64,
      "chunyongg": 8,
      "successs404": 22,
      "-": 34
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/question/JsonAdaptedQuestion.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Jackson-friendly version of {@link Question}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class JsonAdaptedQuestion {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Question\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final String group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final String lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuestion} with the given trip details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public JsonAdaptedQuestion(@JsonProperty(\"group\") String group,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                               @JsonProperty(\"lesson\") String lesson,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                               @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Converts a given {@code Question} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public JsonAdaptedQuestion(Question source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.group \u003d source.getGroup();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lesson \u003d source.getLesson();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.description \u003d source.getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Converts this Jackson-friendly adapted trip object into the model\u0027s {@code Question} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted trip."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Question toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.group \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Group\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Lesson\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (this.description \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Description\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!Question.isValidDescription(this.description)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Question(this.group, this.lesson, this.description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 65
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/question/JsonQuestionStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A class to access QuestionManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class JsonQuestionStorage implements QuestionStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonQuestionStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public JsonQuestionStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Path getQuestionManagerStorageFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cReadOnlyQuestionManager\u003e readQuestionManager() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return readQuestionManager(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Similar to {@link #readQuestionManager()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cReadOnlyQuestionManager\u003e readQuestionManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Optional\u003cJsonSerializableQuestionManager\u003e jsonQuestionManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                filePath, JsonSerializableQuestionManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (jsonQuestionManager.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return Optional.of(jsonQuestionManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void saveQuestionManager(ReadOnlyQuestionManager questionManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        saveQuestionManager(questionManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Similar to {@link #saveQuestionManager(ReadOnlyQuestionManager)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void saveQuestionManager(ReadOnlyQuestionManager questionManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(questionManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableQuestionManager(questionManager), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 80
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/question/JsonSerializableQuestionManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * An Immutable QuestionManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "@JsonRootName(value \u003d \"questionManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class JsonSerializableQuestionManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"Question list contains duplicate question(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final List\u003cJsonAdaptedQuestion\u003e globalQuestionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a {@code JsonSerializableQuestionManager} with the given questions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public JsonSerializableQuestionManager("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            @JsonProperty(\"globalQuestionList\") List\u003cJsonAdaptedQuestion\u003e questions) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.globalQuestionList.addAll(questions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Converts a given {@code ReadOnlyQuestionManager} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTransportBookingManager}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public JsonSerializableQuestionManager(ReadOnlyQuestionManager source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        globalQuestionList.addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                source.getListOfQuestions()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        .map(JsonAdaptedQuestion::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Converts this JsonSerializableTransportBookingManager into the model\u0027s {@code TransportBookingManager} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public QuestionManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionManager questionManager \u003d new QuestionManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (JsonAdaptedQuestion jsonAdaptedQuestion : this.globalQuestionList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Question question \u003d jsonAdaptedQuestion.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            if (questionManager.hasQuestion(question)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            questionManager.addQuestion(question);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return questionManager;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 67
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/question/QuestionStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a storage for {@link QuestionManager}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public interface QuestionStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Path getQuestionManagerStorageFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns QuestionManager data as a {@link ReadOnlyQuestionManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Optional\u003cReadOnlyQuestionManager\u003e readQuestionManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @see #readQuestionManager()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    Optional\u003cReadOnlyQuestionManager\u003e readQuestionManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Saves the given {@link ReadOnlyQuestionManager} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param activityManager cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void saveQuestionManager(ReadOnlyQuestionManager activityManager) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @see #saveQuestionManager(ReadOnlyQuestionManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void saveQuestionManager(ReadOnlyQuestionManager activityManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 48
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/userprefs/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return readUserPrefs(this.filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Similar to {@link #readUserPrefs()}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, this.filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 10,
      "chunyongg": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/team/serenity/storage/userprefs/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "chunyongg": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/ButtonBar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class ButtonBar extends VBox {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ButtonBar() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setFillWidth(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void addGroupButton(Button groupButton) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.getChildren().add(groupButton);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void deleteGroupButton(Node groupButtonNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.getChildren().remove(groupButtonNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 21
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.commandExecutor.execute(this.commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d this.commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 11,
      "chunyongg": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/DataPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DataPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DataPanel(String name) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "ryanlimjr": 8
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w12-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 5,
      "chunyongg": 2,
      "-": 95
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.control.ContentDisplay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.groupdata.GroupDataPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.lessondata.LessonDataPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where other JavaFX elements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * can be placed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private ButtonBar buttonBar;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Ui parts relating to serenity"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private DataPanel groupDataPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private DataPanel lessonDataPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private StackPane dataDisplayPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private VBox buttonPanelPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        setAccelerator(this.helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.resultDisplayPlaceholder.getChildren().add(this.resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.buttonBar \u003d new ButtonBar();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.buttonPanelPlaceholder.getChildren().add(this.buttonBar);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(this.primaryStage.getWidth(), this.primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            (int) this.primaryStage.getX(), (int) this.primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Switch to group data view if in lesson data view."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private void toggleLsnView() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessonDataPanel \u003d new LessonDataPanel(this.logic.getStudentInfoList(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                this.logic.getFilteredQuestionList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.dataDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.dataDisplayPlaceholder.getChildren().add(this.lessonDataPanel.getRoot());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Switch to lesson data view if in group data view."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private void toggleGrpView() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.groupDataPanel \u003d new GroupDataPanel(this.logic.getLessonList(), this.logic.getStudentList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.dataDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.dataDisplayPlaceholder.getChildren().add(this.groupDataPanel.getRoot());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Adds a new group button."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private void handleAddGrp(String groupName) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Button groupButton \u003d new Button(groupName);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setUpButton(groupButton);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "successs404"
        },
        "content": "        buttonBar.addGroupButton(groupButton);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Sets up the newly created group button."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setUpButton(Button groupButton) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groupButton.setId(groupButton.getText());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groupButton.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groupButton.setContentDisplay(ContentDisplay.CENTER);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groupButton.setMnemonicParsing(false);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groupButton.setPrefWidth(50);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groupButton.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "successs404"
        },
        "content": "        groupButton.setOnAction(event -\u003e {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "successs404"
        },
        "content": "            String commandText \u003d \"viewgrp grp/\" + groupButton.getText();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "successs404"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "successs404"
        },
        "content": "                executeCommand(commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "successs404"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "successs404"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "successs404"
        },
        "content": "        });"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Deletes an existing group button."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private void handleDelGrp(String groupName) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (Node groupButton : buttonBar.getChildren()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (groupButton.getId().equals(groupName)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "successs404"
        },
        "content": "                buttonBar.deleteGroupButton(groupButton);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "successs404"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            CommandResult commandResult \u003d this.logic.execute(commandText);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (commandResult.isToggleGrpView()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                toggleGrpView();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (commandResult.isToggleLsnView()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                toggleLsnView();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (commandResult.isAddGrp()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "successs404"
        },
        "content": "                // commandText would be in AddGrpCommand format correctly by the time it reaches here"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "successs404"
        },
        "content": "                String groupName \u003d commandText.split(\" \")[1].split(\"/\")[1];"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "successs404"
        },
        "content": "                handleAddGrp(groupName);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (commandResult.isDelGrp()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "successs404"
        },
        "content": "                // commandText would be in DelGrpCommand format correctly by the time it reaches here"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "successs404"
        },
        "content": "                String groupName \u003d commandText.split(\" \")[1].split(\"/\")[1];"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "successs404"
        },
        "content": "                handleDelGrp(groupName);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 44,
      "chunyongg": 3,
      "ryanlimjr": 24,
      "successs404": 68,
      "-": 150
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "chunyongg": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/serenity_logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.mainWindow \u003d new MainWindow(primaryStage, this.logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        showAlertDialogAndWait(this.mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns after the user has"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * closed the alert dialog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String headerText,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String contentText) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the application after the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * user has closed the alert dialog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 10,
      "chunyongg": 8,
      "-": 73
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It contains a scene graph with"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the {@code fx:controller}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not specify the {@code"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "chunyongg": 12,
      "-": 74
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/groupdata/GroupDataPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui.groupdata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.DataPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class GroupDataPanel extends DataPanel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"GroupDataPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GroupDataPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private ListView\u003cLesson\u003e lessonListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructor for panel to display tutorial group data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public GroupDataPanel(ObservableList\u003cLesson\u003e lessonList, ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessonListView.setItems(lessonList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lessonListView.setCellFactory(listView -\u003e new LessonListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    class LessonListViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(new LessonCard(lesson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 10,
      "ryanlimjr": 58
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/groupdata/LessonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui.groupdata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * An UI component that displays information of a {@code Lesson}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class LessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"LessonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a {@code LessonCard} with the given {@code Lesson} and index to display."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public LessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.name.setText(\"tutorial \" + lesson.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!(other instanceof LessonCard)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        LessonCard card \u003d (LessonCard) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 10,
      "ryanlimjr": 43
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/groupdata/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui.groupdata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label studentNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Creates a {@code StudentCard} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.name.setText(student.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentNumber.setText(student.getStudentId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.student.equals(card.student);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 9,
      "ryanlimjr": 48
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/lessondata/LessonDataPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui.lessondata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.DataPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.groupdata.GroupDataPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class LessonDataPanel extends DataPanel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"LessonDataPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GroupDataPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private ListView\u003cStudentInfo\u003e studentInfoListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private ListView\u003cQuestion\u003e questionListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructor for panel to display tutorial lesson data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public LessonDataPanel(ObservableList\u003cStudentInfo\u003e studentInfoList, ObservableList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentInfoListView.setItems(studentInfoList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentInfoListView.setCellFactory(listView -\u003e new StudentInfoListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionListView.setItems(questionList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionListView.setCellFactory(listView -\u003e new QuestionListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.tabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    class StudentInfoListViewCell extends ListCell\u003cStudentInfo\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        protected void updateItem(StudentInfo studentInfo, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            super.updateItem(studentInfo, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            if (empty || studentInfo \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                setGraphic(new StudentInfoCard(studentInfo, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    class QuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (empty || question \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                setGraphic(new QuestionCard(question, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 44,
      "ryanlimjr": 27
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/lessondata/QuestionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui.lessondata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * An UI component that displays information of a {@code Question}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class QuestionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final String FXML \u003d \"QuestionListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a consequence, UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * elements\u0027 variable names cannot be set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public final Question question;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label questionDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a {@code QuestionCard} with the given {@code Question} and index to display."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public QuestionCard(Question question, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionDescription.setText(question.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!(other instanceof QuestionCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        QuestionCard card \u003d (QuestionCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.question.equals(card.question);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 9,
      "ryanlimjr": 52
    }
  },
  {
    "path": "src/main/java/team/serenity/ui/lessondata/StudentInfoCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui.lessondata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * An UI component that displays information of a {@code StudentInfo}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class StudentInfoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String FXML \u003d \"StudentInfoListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public final StudentInfo studentInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label studentNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Label participation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates a {@code StudentInfoCard} with the given {@code StudentInfo} and index to display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public StudentInfoCard(StudentInfo studentInfo, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentInfo \u003d studentInfo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.name.setText(studentInfo.getStudent().getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.studentNumber.setText(studentInfo.getStudent().getStudentId());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.attendance.setText(studentInfo.getAttendance().getAttendance() ? \"Present\" : \"Absent\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.participation.setText(String.valueOf(studentInfo.getParticipation().getScore()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!(other instanceof StudentInfoCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        StudentInfoCard card \u003d (StudentInfoCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u0026\u0026 this.studentInfo.equals(card.studentInfo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 63
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DataDisplayWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cStackPane fx:id\u003d\"dataPanelPlaceholder\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 8
    }
  },
  {
    "path": "src/main/resources/view/GroupDataPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cSplitPane dividerPositions\u003d\"0.5\" minWidth\u003d\"680.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "   \u003citems\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "      \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "         \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "      \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "         \u003cListView fx:id\u003d\"lessonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "   \u003c/items\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/LessonDataPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cVBox fx:id\u003d\"lessonList\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "   \u003cTabPane fx:id\u003d\"tabPane\" minHeight\u003d\"-Infinity\" minWidth\u003d\"680.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@DarkTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     \u003ctabs\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "       \u003cTab text\u003d\"Lesson\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cListView fx:id\u003d\"studentInfoListView\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "       \u003c/Tab\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "       \u003cTab text\u003d\"Questions\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "               \u003cListView fx:id\u003d\"questionListView\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "       \u003c/Tab\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     \u003c/tabs\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "   \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 27
    }
  },
  {
    "path": "src/main/resources/view/LessonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "ryanlimjr": 31
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"700\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Serenity\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    \u003cImage url\u003d\"@/images/serenity_logo.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \u003cURL value\u003d\"@SerenityTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "         \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cStackPane fx:id\u003d\"dataDisplayPlaceholder\" minWidth\u003d\"680.0\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "                     \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "                     \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003c/center\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003ctop\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "           \u003cMenuBar fx:id\u003d\"menuBar\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "             \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "               \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "             \u003c/Menu\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "             \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "               \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "             \u003c/Menu\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "           \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003c/top\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003cleft\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "               \u003cScrollPane prefWidth\u003d\"80.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "                     \u003cVBox fx:id\u003d\"buttonPanelPlaceholder\" alignment\u003d\"CENTER\" fillWidth\u003d\"false\" prefWidth\u003d\"80.0\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "                        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "                           \u003cInsets /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "                        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "                 \u003c/content\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "               \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003c/left\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "         \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 12,
      "successs404": 37,
      "-": 25
    }
  },
  {
    "path": "src/main/resources/view/QuestionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003cLabel fx:id\u003d\"questionDescription\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StudentInfoListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentNumber\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendance\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                \u003cLabel fx:id\u003d\"participation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$participation\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 35,
      "xinyee20": 1
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentNumber\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xinyee20": 1,
      "ryanlimjr": 31
    }
  },
  {
    "path": "src/test/java/team/serenity/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/serenity_logo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException} if {@code"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException} if {@code"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "chunyongg": 5,
      "-": 101
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/util/CsvUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class CsvUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void computeClassNameTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] expectedResults \u003d new String[] {\"1-1\", \"1-2\", \"2-1\", \"2-2\", \"3-1\", \"3-2\", \"4-1\", \"4-2\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"5-1\", \"5-2\", \"6-1\", \"6-2\", \"7-1\", \"7-2\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \"8-1\", \"8-2\", \"9-1\", \"9-2\", \"10-1\", \"10-2\", \"11-1\", \"11-2\", \"12-1\", \"12-2\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int input \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (String expectedResult : expectedResults) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            assertTrue(CsvUtil.computeLessonName(input)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                .equals(expectedResults[input - 1]));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            input++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "chunyongg": 20
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/team/serenity/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "-": 140
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.JsonSerenityStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.StorageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.question.JsonQuestionStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonSerenityStorage serenityStorage \u003d new JsonSerenityStorage(temporaryFolder.resolve(\"serenity.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonQuestionStorage questionStorage \u003d new JsonQuestionStorage(temporaryFolder.resolve(\"question.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        StorageManager storage \u003d new StorageManager(serenityStorage, questionStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        FOR REFERENCE (AB3):"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        FOR REFERENCE (AB3):"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonSerenityStorage serenityStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new JsonSerenityStorage(temporaryFolder.resolve(\"ioExceptionSerenity.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, serenityStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void getFilteredGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: FOR REFERENCE (AB3)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e - the feedback message is equal to {@code"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * expectedMessage} \u003cbr\u003e - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e - the resulting error"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * message is equal to {@code expectedMessage} \u003cbr\u003e - the internal model manager state is the same as that in {@code"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 31,
      "chunyongg": 11,
      "successs404": 3,
      "-": 110
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/AddGrpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.ModelStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "class AddGrpCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddGrpCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute_groupAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ModelStubAcceptingGroupAdded modelStub \u003d new ModelStubAcceptingGroupAdded();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        CommandResult commandResult \u003d new AddGrpCommand(validGroup).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(String.format(AddGrpCommand.MESSAGE_SUCCESS, validGroup), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(Arrays.asList(validGroup), modelStub.groupsAdded);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute_duplicateGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "        AddGrpCommand addGrpCommand \u003d new AddGrpCommand(validGroup);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithGroup(validGroup);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "            AddGrpCommand.MESSAGE_DUPLICATE_GROUP, () -\u003e addGrpCommand.execute(modelStub));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group groupA \u003d new GroupBuilder().withName(\"G04\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Group groupB \u003d new GroupBuilder().withName(\"G05\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "        AddGrpCommand addGroupACommand \u003d new AddGrpCommand(groupA);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        AddGrpCommand addGroupBCommand \u003d new AddGrpCommand(groupB);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertTrue(addGroupACommand.equals(addGroupACommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "        AddGrpCommand addG04CommandCopy \u003d new AddGrpCommand(groupA);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertTrue(addGroupACommand.equals(addG04CommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertFalse(addGroupACommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertFalse(addGroupACommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // different group -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertFalse(addGroupACommand.equals(addGroupBCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * A Model stub that contains a single group."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private class ModelStubWithGroup extends ModelStub {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "        private final Group group;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ModelStubWithGroup(Group group) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return this.group.isSameGroup(group);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * A Model stub that always accept the group being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private class ModelStubAcceptingGroupAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "        final ArrayList\u003cGroup\u003e groupsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return groupsAdded.stream().anyMatch(group::isSameGroup);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "        public void addGroup(Group group) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "            groupsAdded.add(group);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 6,
      "chunyongg": 4,
      "successs404": 99
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/AddLsnCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "class AddLsnCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "ryanlimjr": 13
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/AddQnCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.ModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class AddQnCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void constructor_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddQnCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void execute_questionAcceptedByModel_addQnSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: Complete after LessonBuilder is implemented"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "             ModelStubAcceptingQuestionAdded modelStub \u003d new ModelStubAcceptingQuestionAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "             Question validQuestion \u003d new QuestionBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "             CommandResult commandResult \u003d new AddQnCommand(validQuestion).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "             assertEquals(String.format(AddQnCommand.MESSAGE_SUCCESS, validQuestion),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                     commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "             assertEquals(Arrays.asList(validQuestion), modelStub.questionAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void execute_duplicateQuestion_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: Complete after LessonBuilder is implemented"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Question validQuestion \u003d new QuestionBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            AddQnCommand addQnCommand \u003d new AddQnCommand(validQuestion);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ModelStub modelStub \u003d new ModelStubWithQuestion(validQuestion);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Assertions.assertThrows(CommandException.class, () -\u003e addQnCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        AddQnCommand addQnACommand \u003d new AddQnCommand(QUESTION_A);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        AddQnCommand addQnBCommand \u003d new AddQnCommand(QUESTION_B);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(addQnACommand.equals(addQnACommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        AddQnCommand addQnACommandCopy \u003d new AddQnCommand(QUESTION_A);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(addQnACommandCopy.equals(addQnACommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(addQnACommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(addQnACommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // different group -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(addQnACommand.equals(addQnBCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * A Model stub that contains a single question from default group and default lesson."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private class ModelStubWithQuestion extends ModelStub {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        private final Question question;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ModelStubWithQuestion(Question question) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            requireNonNull(question);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            requireNonNull(question);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return this.question.equals(question);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * A Model stub that always accept the question being added."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private class ModelStubAcceptingQuestionAdded extends ModelStub {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final ArrayList\u003cQuestion\u003e questionAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            List\u003cGroup\u003e grpList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            grpList.add(new GroupBuilder().build());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            UniqueList\u003cGroup\u003e groupUniqueList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            groupUniqueList.setElementsWithList(grpList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return groupUniqueList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: Complete after LessonBuilder is implemented"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            List\u003cLesson\u003e lsnList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            lsnList.add(new LessonBuilder().build());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            UniqueList\u003cLesson\u003e lessonUniqueList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            lessonUniqueList.setElementsWithList(lsnList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return lessonUniqueList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            requireNonNull(question);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return this.questionAdded.stream().anyMatch(question::equals);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            requireNonNull(question);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.questionAdded.add(question);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public ReadOnlyQuestionManager getQuestionManager() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new QuestionManager();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 145
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/AddScoreCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "class AddScoreCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddScoreCommand(null, 2));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_addScoreOutOfRange_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_addScore_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_wrongName_throwsCommandException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_wrongStudentId_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "xinyee20": 32
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/AddStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_DUPLICATE_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.GroupPredicateStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.ModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AddStudentCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(\"\", \"\", null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null, \"\", new GroupPredicateStub()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(\"\", null, new GroupPredicateStub()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null, null, null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void execute_missingGroup() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ModelStubWithoutGroup modelStub \u003d new ModelStubWithoutGroup();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Predicate\u003cGroup\u003e pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand command \u003d new AddStudentCommand(\"Jon\", \"e1234567\", pred);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            MESSAGE_GROUP_EMPTY, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void execute_duplicateStudent() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Group stubGroup \u003d new GroupBuilder().withName(\"G07\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .withStudents("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new Student(\"Freddie\", \"e0000000\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new Student(\"June\", \"e0101011\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ).withClasses(\"4-2\", \"5-1\", \"5-2\", \"6-1\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cGroup\u003e groupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        groupList.add(stubGroup);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        FilteredList\u003cGroup\u003e filteredList \u003d new FilteredList\u003c\u003e(groupList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ModelStubWithGroup modelStub \u003d new ModelStubWithGroup(filteredList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Predicate\u003cGroup\u003e pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand command \u003d new AddStudentCommand(\"Freddie\", \"e0000000\", pred);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            MESSAGE_DUPLICATE_STUDENT, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"e1234567\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Predicate\u003cGroup\u003e pred \u003d new GroupPredicateStubWithGroupName(\"G04\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand first \u003d new AddStudentCommand(studentName, studentId, pred);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand second \u003d new AddStudentCommand(studentName,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            studentId, pred);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand differentStudentName \u003d new AddStudentCommand(\"J\", studentId, pred);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand differentStudentId \u003d new AddStudentCommand(studentName, \"e111\", pred);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand differentPredicate \u003d new AddStudentCommand(studentName, studentId,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new GroupPredicateStubWithGroupName(\"G05\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //same values -\u003e return true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //different values -\u003e return false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentStudentName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentStudentId));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentPredicate));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A Model stub with a group"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class ModelStubWithGroup extends ModelStub {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    ModelStubWithGroup(FilteredList\u003cGroup\u003e filteredList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.filteredGroups \u003d filteredList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return filteredGroups;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A Model stub that does not contain any group"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class ModelStubWithoutGroup extends ModelStub {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new UniqueGroupList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A GroupContainsKeywordPredicate stub"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class GroupPredicateStubWithGroupName implements Predicate\u003cGroup\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    GroupPredicateStubWithGroupName(String keyword) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean test(Group group) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            || (obj instanceof GroupContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            \u0026\u0026 keyword.equals(((GroupPredicateStubWithGroupName) obj).keyword)); // state check"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 15,
      "chunyongg": 139
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false, false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, true, false, false, false)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, true, false, false, false)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new CommandResult(\"feedback\", true, false, true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new CommandResult(\"feedback\", false, true, true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "chunyongg": 1,
      "successs404": 7,
      "-": 48
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_QN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Valid descriptions for Serenity"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_GRP_GROUP_A \u003d \"G04\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_GRP_GROUP_B \u003d \"G05\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Path VALID_PATH_GROUP_A \u003d Paths.get(\"LUMINUS_GROUP_A.csv\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Path VALID_PATH_GROUP_B \u003d Paths.get(\"LUMINUS_GROUP_B.csv\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_LSN_A \u003d \"2-2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_LSN_B \u003d \"3-1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_QN_DESC_A \u003d \"What is the deadline for the report?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_QN_DESC_B \u003d \"When is the consultation held?\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String GRP_DESC_GROUP_A \u003d \" \" + PREFIX_GRP + VALID_GRP_GROUP_A;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String GRP_DESC_GROUP_B \u003d \" \" + PREFIX_GRP + VALID_GRP_GROUP_B;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String PATH_DESC_GROUP_A \u003d \" \" + PREFIX_PATH + VALID_PATH_GROUP_A;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String PATH_DESC_GROUP_B \u003d \" \" + PREFIX_PATH + VALID_PATH_GROUP_B;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String QN_DESC_GROUP_A \u003d \" \" + PREFIX_QN + VALID_QN_DESC_A;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String QN_DESC_GROUP_B \u003d \" \" + PREFIX_QN + VALID_QN_DESC_B;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Invalid descriptions for Serenity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String INVALID_QN_DESC \u003d \" \" + PREFIX_QN; // empty string not allowed in questions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - the returned {@link CommandResult} matches {@code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * expectedCommandResult} \u003cbr\u003e - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that takes a string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * {@code expectedMessage}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - a {@code CommandException} is thrown \u003cbr\u003e - the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * CommandException message matches {@code expectedMessage} \u003cbr\u003e - the address book, filtered person list and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        FOR REFERENCE (AB3)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Updates {@code model}\u0027s filtered question list to show only the question at the given {@code targetIndex}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * in the {@code model}\u0027s question list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static void showQuestionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: Wen Jin to complete when implementing view/find question"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        FOR REFERENCE (AB3)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 38,
      "chunyongg": 8,
      "successs404": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/DelLsnCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class DelLsnCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "ryanlimjr": 13
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/DelQnCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Serenity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.question.QuestionBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class DelQnCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private QuestionManager questionManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question newQuestion \u003d new QuestionBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager \u003d new QuestionManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager.addQuestion(newQuestion);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.model \u003d new ModelManager(new Serenity(), this.questionManager, new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question questionToDelete \u003d model.getFilteredQuestionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        DelQnCommand delQnCommand \u003d new DelQnCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String expectedMessage \u003d String.format(DelQnCommand.MESSAGE_DELETE_QUESTION_SUCCESS, questionToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new Serenity(), this.questionManager, new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        expectedModel.deleteQuestion(questionToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertCommandSuccess(delQnCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredQuestionList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        DelQnCommand delQnCommand \u003d new DelQnCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertCommandFailure(delQnCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        DelQnCommand delQnFirstCommand \u003d new DelQnCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        DelQnCommand delQnSecondCommand \u003d new DelQnCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(delQnFirstCommand, delQnFirstCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        DelQnCommand delQnFirstCommandCopy \u003d new DelQnCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(delQnFirstCommand, delQnFirstCommandCopy);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertNotEquals(1, delQnFirstCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertNotEquals(null, delQnFirstCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertNotEquals(delQnFirstCommand, delQnSecondCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 80
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/DelStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_GROUP_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_STUDENT_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.GroupPredicateStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.ModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DelStudentCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DelStudentCommand(\"\", \"\", null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DelStudentCommand(null, \"\", new GroupPredicateStub()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DelStudentCommand(\"\", null, new GroupPredicateStub()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DelStudentCommand(null, null, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void execute_missingGroup() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ModelStubWithoutGroup modelStub \u003d new ModelStubWithoutGroup();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Predicate\u003cGroup\u003e pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand command \u003d new DelStudentCommand(\"Jon\", \"e1234567\", pred);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            MESSAGE_GROUP_EMPTY, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void execute_missingStudent() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Group stubGroup \u003d new GroupBuilder().withName(\"G07\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .withStudents("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                new Student(\"Freddie\", \"e0000000\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ).withClasses(\"4-2\", \"5-1\", \"5-2\", \"6-1\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cGroup\u003e groupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        groupList.add(stubGroup);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        FilteredList\u003cGroup\u003e filteredList \u003d new FilteredList\u003c\u003e(groupList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ModelStubGroup modelStub \u003d new ModelStubGroup(filteredList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        GroupPredicateStub pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand command \u003d new DelStudentCommand(\"June\", \"e1234567\", pred);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            MESSAGE_STUDENT_EMPTY, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"e1234567\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        GroupPredicateStub pred \u003d new GroupPredicateStub();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand first \u003d new DelStudentCommand(studentName, studentId, pred);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand second \u003d new DelStudentCommand(studentName, studentId, pred);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand differentName \u003d new DelStudentCommand(\"James\", studentId, pred);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand differentId \u003d new DelStudentCommand(studentName, \"e7654321\", pred);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand differentPred \u003d new DelStudentCommand(studentName, studentId, new GroupPredicateStub());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //same values -\u003e return true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //different values -\u003e return false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentName));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentId));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentPred));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A Model stub with a group"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "class ModelStubGroup extends ModelStub {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    ModelStubGroup(FilteredList\u003cGroup\u003e filteredList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.filteredGroups \u003d filteredList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return filteredGroups;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 14,
      "chunyongg": 99
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 6,
      "chunyongg": 1,
      "successs404": 2,
      "-": 13
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 5,
      "chunyongg": 1,
      "successs404": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/MarkAbsentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class MarkAbsentCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MarkAbsentCommand(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_unmarkStudent_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_wrongName_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_wrongStudentId_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_missingStudentName_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_missingStudentId_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 5,
      "xinyee20": 38
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/MarkPresentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class MarkPresentCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_markStudent_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_wrongName_throwsCommandException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_wrongStudentId_throwsCommandException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_markAllStudent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "xinyee20": 28
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/commands/ViewGrpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "class ViewGrpCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "ryanlimjr": 9
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/AddGrpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddGrpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class AddGrpCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private AddGrpCommandParser parser \u003d new AddGrpCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGrpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // missing grp prefix"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.VALID_GRP_GROUP_B"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + CommandTestUtil.PATH_DESC_GROUP_B, expectedMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // missing path prefix"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.PATH_DESC_GROUP_B"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + CommandTestUtil.VALID_PATH_GROUP_B, expectedMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: add invalid grp and path codes here"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 33
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/AddQnCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.commands.CommandTestUtil.INVALID_QN_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.commands.CommandTestUtil.QN_DESC_GROUP_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.commands.CommandTestUtil.VALID_QN_DESC_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddQnCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.question.QuestionBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class AddQnCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private AddQnCommandParser parser \u003d new AddQnCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question expectedQuestion \u003d new QuestionBuilder().withDescription(VALID_QN_DESC_A).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QN_DESC_GROUP_A,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                new AddQnCommand(expectedQuestion));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddQnCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertParseFailure(parser, VALID_QN_DESC_A, expectedMessage); // missing prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertParseFailure(parser, INVALID_QN_DESC, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 41
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/AddScoreCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "class AddScoreCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_missingStudentName_throwsCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         * Enter lesson"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         * Get UniqueStudentInfo List"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         * Missing student id prefix"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         * Throw Exception"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_missingStudentId_throwsCommandException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         * Enter lesson"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         * Get UniqueStudentInfo List"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         * Missing student id prefix"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         * Throw Exception"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "xinyee20": 25
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/AddStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private AddStudentCommandParser parser \u003d new AddStudentCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void parse_missingArguments() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String missingGroup \u003d PREFIX_NAME + \"John\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String missingStudent \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String missingId \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_NAME + \"John\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String doubleGroup \u003d PREFIX_GRP + \"G04 G05\" + \" \" + PREFIX_NAME + \"John\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String doubleId \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_NAME + \"John\" + \" \" + PREFIX_ID + \"e1234567 e7654321\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, missingGroup, expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, missingStudent, expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, missingId, expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, doubleGroup, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseFailure(parser, doubleId, expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void parse_successfulArguments() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"e1234567\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String groupName \u003d \"G04\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String args \u003d \" \" + PREFIX_GRP + groupName + \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            + studentName + \" \" + PREFIX_ID + studentId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        AddStudentCommand result \u003d new AddStudentCommand(studentName, studentId,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new GroupContainsKeywordPredicate(groupName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertParseSuccess(parser, args, result);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 15,
      "chunyongg": 31
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues} and only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 2,
      "-": 147
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created equals to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message equals to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "chunyongg": 4,
      "-": 31
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/DelLsnCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class DelLsnCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "ryanlimjr": 9
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/DelQnCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelQnCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * outside of the DelQnCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * same path through the DelQnCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class DelQnCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private DelQnCommandParser parser \u003d new DelQnCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_validArgs_returnsDeleteActivityCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DelQnCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelQnCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertParseFailure(parser, \"a\", expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 33
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/DelStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.DelStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.GroupContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DelStudentCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private DelStudentCommandParser parser \u003d new DelStudentCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void parse_missingArguments() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String missingGroup \u003d PREFIX_NAME + \"John\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String missingStudent \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String missingId \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_NAME + \"John\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String doubleGroup \u003d PREFIX_GRP + \"G04 G05\" + \" \" + PREFIX_NAME + \"John\" + \" \" + PREFIX_ID + \"e1234567\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String doubleId \u003d PREFIX_GRP + \"G04\" + \" \" + PREFIX_NAME + \"John\" + \" \" + PREFIX_ID + \"e1234567 e7654321\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DelStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, missingGroup, expectedMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, missingStudent, expectedMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, missingId, expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, doubleGroup, expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, doubleId, expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void parse_successfulArguments() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"e1234567\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String groupName \u003d \"G04\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String args \u003d \" \" + PREFIX_GRP + groupName + \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            + studentName + \" \" + PREFIX_ID + studentId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DelStudentCommand result \u003d new DelStudentCommand(studentName, studentId,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            new GroupContainsKeywordPredicate(groupName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertParseSuccess(parser, args, result);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 21,
      "chunyongg": 22
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/MarkAbsentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "class MarkAbsentCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_missingStudentName_throwsCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_missingStudentId_throwsCommandException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "xinyee20": 13
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/MarkPresentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "class MarkPresentCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    private MarkPresentCommandParser parser \u003d new MarkPresentCommandParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_missingStudentName_throwsParseException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_missingStudentId_throwsCommandException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void execute_invalidParameter_throwsCommandException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void parse_validArgs_returnsMarkPresentCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "xinyee20": 32
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/SerenityParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class SerenityParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final SerenityParser parser \u003d new SerenityParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void parseCommand_addGrp() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // ToDo: test add grp parsing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 9,
      "successs404": 5,
      "-": 31
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/SerenityParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.SerenityParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class SerenityParserUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // Serenity"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"What is the deadline for the report?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SerenityParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            -\u003e SerenityParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(INDEX_FIRST, SerenityParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(INDEX_FIRST, SerenityParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // For Serenity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SerenityParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SerenityParserUtil.parseDescription(INVALID_QUESTION));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String expectedQuestion \u003d new Question(VALID_QUESTION).getDescription();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedQuestion, SerenityParserUtil.parseDescription(VALID_QUESTION));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedQuestion() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String expectedQuestion \u003d new Question(VALID_QUESTION).getDescription();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedQuestion, SerenityParserUtil.parseDescription(questionWithWhitespace));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 41,
      "chunyongg": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/team/serenity/logic/parser/ViewGrpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "class ViewGrpCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "ryanlimjr": 9
    }
  },
  {
    "path": "src/test/java/team/serenity/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        userPrefs.setSerenityFilePath(Paths.get(\"data/serenity.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        userPrefs.setSerenityFilePath(Paths.get(\"new/serenity/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void hasGroup_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasGroup(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void hasGroup_groupNotInSerenity_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void hasGroup_groupInSerenity_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void getFilteredGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredGroupList().remove(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QuestionManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void hasQuestionManagerModelManager() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasQuestion(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(modelManager.hasQuestion(QUESTION_A));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteQuestionManagerModelManager() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteQuestion(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question newQuestion \u003d QUESTION_A;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e modelManager.deleteQuestion(newQuestion));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        modelManager.addQuestion(newQuestion);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        modelManager.deleteQuestion(newQuestion);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(modelManager.getFilteredQuestionList().contains(newQuestion));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(modelManager.getFilteredQuestionList()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                .contains(newQuestion));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addQuestionManagerModelManager() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.addQuestion(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question newQuestion \u003d QUESTION_A;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        modelManager.addQuestion(newQuestion);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(modelManager.getFilteredQuestionList().contains(newQuestion));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(modelManager.getFilteredQuestionList().contains(QUESTION_B));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestionManagerModelManager() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setQuestion(null, null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question newQuestionA \u003d QUESTION_A;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question newQuestionB \u003d QUESTION_B;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                .setQuestion(newQuestionA, newQuestionB)); // Event where tries to set non-existent activity."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        modelManager.addQuestion(newQuestionA);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        modelManager.setQuestion(newQuestionA, newQuestionB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(modelManager.getFilteredQuestionList().contains(newQuestionB));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(modelManager.getFilteredQuestionList().contains(newQuestionA));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateFilteredQuestionManagerModelManager() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.updateFilteredQuestionList(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        modelManager \u003d new ModelManager(userPrefs);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(userPrefs);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: different serenity -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: different filteredGroupList -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        FOR REFERENCE (AB3)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(userPrefs)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        modelManager.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        FOR REFERENCE (AB3)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        differentUserPrefs.setAddressbookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentUserPrefs)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 84,
      "-": 86
    }
  },
  {
    "path": "src/test/java/team/serenity/model/SerenityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class SerenityTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setGroups() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void resetData() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void hasGroup() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void addGroup() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setGroup() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void removeGroup() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getGroupList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "successs404": 41
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/AttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void testGetAttendance() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance test \u003d new Attendance(true, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertTrue(test.getAttendance());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void testGetFlagged() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance test \u003d new Attendance(true, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertTrue(test.getFlagged());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void nullConstructor_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance test \u003d new Attendance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertFalse(test.getAttendance());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertFalse(test.getFlagged());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_markPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance test \u003d new Attendance(true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertTrue(test.getAttendance());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_markPresentAbsent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance test \u003d new Attendance(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertFalse(test.getAttendance());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_flagAttendanceWithStudentPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance test \u003d new Attendance(true, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertTrue(test.getFlagged());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_flagAttendanceWithStudentAbsent_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(false, true));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    void setNewAttendance() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance newAttendance \u003d new Attendance(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance originalAttendance \u003d new Attendance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(newAttendance, originalAttendance.setNewAttendance(true));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance testOne \u003d new Attendance(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance testTwo \u003d new Attendance(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Attendance testThree \u003d new Attendance(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertTrue(testOne.equals(testTwo));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertFalse(testOne.equals(testThree));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String expectedString \u003d \"true\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(expectedString, new Attendance(true).toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "xinyee20": 71,
      "chunyongg": 3
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/GroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class GroupTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getStudents() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getClasses() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void isSameGroup() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "successs404": 29
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.TypicalStudent.JAMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.TypicalStudent.JOHN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Lesson(null, (UniqueStudentInfoList) null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cStudentInfo\u003e studentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo studentInfo \u003d new StudentInfo(JOHN, new Participation(), new Attendance());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        studentsInfo.add(studentInfo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Lesson(invalidName, studentsInfo));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_emptyClass_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String name \u003d \"1-1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Set\u003cStudent\u003e students \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Lesson(name, new UniqueStudentInfoList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cStudentInfo\u003e studentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        StudentInfo studentInfo \u003d new StudentInfo(JOHN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        studentsInfo.add(studentInfo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson oneOne \u003d new Lesson(\"1-1\", studentsInfo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson oneOneClone \u003d new Lesson(\"1-1\", studentsInfo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson classTwoOne \u003d new Lesson(\"2-1\", studentsInfo); //same students, different name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cStudentInfo\u003e newStudentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        newStudentsInfo.add(new StudentInfo(JOHN));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        newStudentsInfo.add(new StudentInfo(JAMES));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson oneOneWithTwoStudents \u003d new Lesson(\"1-1\", newStudentsInfo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Lesson twoOneWithTwoStudents \u003d new Lesson(\"2-1\", newStudentsInfo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(oneOneClone.equals(oneOne)); //same"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(oneOneWithTwoStudents.equals(oneOne)); //same class name, different students"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(classTwoOne.equals(oneOne)); //different class name, same students"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(twoOneWithTwoStudents.equals(oneOne)); //different class name, different students"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 6,
      "xinyee20": 12,
      "chunyongg": 38,
      "ryanlimjr": 1
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/ParticipationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class ParticipationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void testGetScore() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation testOne \u003d new Participation();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(0, testOne.getScore());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int score \u003d 4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation testTwo \u003d new Participation(4);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(score, testTwo.getScore());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_scoreBelowRange_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int scoreBelowRange \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Participation(scoreBelowRange));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_scoreWithinRange_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int scoreZero \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(scoreZero, new Participation(scoreZero).getScore());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int scoreThree \u003d 3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(scoreThree, new Participation(scoreThree).getScore());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int scoreFive \u003d 5;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(scoreFive, new Participation(scoreFive).getScore());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void constructor_scoreAboveRange_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        int scoreAboveRange \u003d 6;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Participation(scoreAboveRange));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void nullConstructor_scoreSetToZero_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(0, new Participation().getScore());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void testSetNewScore() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation newPartipation \u003d new Participation(3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation originalPartipation \u003d new Participation();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(newPartipation, originalPartipation.setNewScore(3));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation currentPartipation \u003d new Participation(2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(newPartipation, currentPartipation.setNewScore(3));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation scoreOne \u003d new Participation(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation scoreTwo \u003d new Participation(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        Participation scoreThree \u003d new Participation(3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertTrue(scoreOne.equals(scoreTwo));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertFalse(scoreOne.equals(scoreThree));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        String expectedString \u003d \"5\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertEquals(expectedString, new Participation(5).toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinyee20"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "xinyee20": 72,
      "chunyongg": 3
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/QuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.question.QuestionBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class QuestionTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null, null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(\" \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_isValidDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidDescription(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // invalid questions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(Question.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(Question.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(Question.isValidDescription(\"When is the consultation held?\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(Question.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(Question.isValidDescription(\"What is the deadline for the report? \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                + \"Do we submit it in Luminus folders?\")); // long question"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_setGroupAndLesson() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question toSet \u003d new QuestionBuilder(QUESTION_A).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        toSet.setGroupAndLesson(\"G10\", \"3-2\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question expectedQuestion \u003d new QuestionBuilder().withDescription(QUESTION_A.getDescription())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                .withGroup(\"G10\").withLesson(\"3-2\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedQuestion, toSet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_getGroup() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_A.getGroup(), \"G04\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_B.getGroup(), \"G05\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_getLesson() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_A.getLesson(), \"2-2\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_B.getLesson(), \"3-1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_getDescription() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_A.getDescription(), \"What is the deadline for the report?\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_B.getDescription(), \"What do we need to prepare for tomorrow\u0027s lesson?\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // Same case"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question editedQuestion \u003d new Question(\"G04\", \"2-2\", \"What is the deadline for the report?\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_A, editedQuestion);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // Different case"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertNotEquals(QUESTION_A, QUESTION_B);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // Same case"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question editedQuestion \u003d new Question(\"G04\", \"2-2\", \"What is the deadline for the report?\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_A.hashCode(), editedQuestion.hashCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // Different case"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertNotEquals(QUESTION_A.hashCode(), QUESTION_B.hashCode());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // Same case"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question editedQuestion \u003d new Question(\"G04\", \"2-2\", \"What is the deadline for the report?\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_A.toString(), editedQuestion.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // Different case"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertNotEquals(QUESTION_A.toString(), QUESTION_B.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 102
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/StudentInfoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "public class StudentInfoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StudentInfo(null, null, null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "xinyee20": 2,
      "chunyongg": 9
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "class StudentTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Student(null, null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Student(\"\", \"E1234567\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void constructor_invalidStudentNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Student(\"John\", \"A012334444333\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void test_getStudentName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(new Student(\"John\", \"E1234567\").getName().equals(\"John\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void test_getStudentNumber() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(new Student(\"John\", \"E1234567\").getStudentId().equals(\"E1234567\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void test_toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(new Student(\"John\", \"E1234567\").toString().equals(\"John E1234567\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void test_equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentName \u003d \"John\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String studentId \u003d \"E1234567\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student first \u003d new Student(studentName, studentId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student second \u003d new Student(studentName, studentId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student differentName \u003d new Student(\"James\", studentId);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Student differentId \u003d new Student(studentName, \"E7654321\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //same value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //different values"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(differentId));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //compare with null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertFalse(first.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "chunyongg": 58,
      "successs404": 4
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/UniqueGroupListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class UniqueGroupListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void contains() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setGroup() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void setGroups() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testSetGroups() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void iterator() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "successs404": 45
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/UniqueQuestionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class UniqueQuestionListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private final UniqueList\u003cQuestion\u003e uniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void contains_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void contains_questionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(uniqueQuestionList.contains(QUESTION_A));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void contains_questionInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(uniqueQuestionList.contains(QUESTION_A));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.add(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add_duplicateQuestion_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        uniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e uniqueQuestionList.add(QUESTION_A));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_nullTargetQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setElement(null, QUESTION_A));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_nullEditedQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setElement(QUESTION_A, null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_targetQuestionNotInList_throwsQuestionNotFoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e uniqueQuestionList.setElement(QUESTION_A, QUESTION_A));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_editedQuestionIsSameQuestion_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.setElement(QUESTION_A, QUESTION_A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cQuestion\u003e expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        expectedUniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion_editedQuestionHasNonUniqueIdentity_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.add(QUESTION_B);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e uniqueQuestionList.setElement(QUESTION_A, QUESTION_B));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.remove(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove_personDoesNotExist_throwsQuestionNotFoundException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e uniqueQuestionList.remove(QUESTION_A));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove_existingQuestion_removesQuestion() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.remove(QUESTION_A);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cQuestion\u003e expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_nullUniqueQuestionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                .setElementsWithUniqueList((UniqueQuestionList) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_uniqueQuestionList_replacesOwnListWithProvidedUniqueQuestionList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cQuestion\u003e expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        expectedUniqueQuestionList.add(QUESTION_B);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.setElementsWithUniqueList(expectedUniqueQuestionList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, this.uniqueQuestionList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e this.uniqueQuestionList"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .setElementsWithList((List\u003cQuestion\u003e) null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        List\u003cQuestion\u003e questionList \u003d Collections.singletonList(QUESTION_B);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.uniqueQuestionList.setElementsWithList(questionList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cQuestion\u003e expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        expectedUniqueQuestionList.add(QUESTION_B);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestions_listWithDuplicateQuestions_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        List\u003cQuestion\u003e listWithDuplicateQuestions \u003d Arrays.asList(QUESTION_A, QUESTION_A);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            this.uniqueQuestionList.setElementsWithList(listWithDuplicateQuestions));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            this.uniqueQuestionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_qquals() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cQuestion\u003e expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        expectedUniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(uniqueQuestionList, expectedUniqueQuestionList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void test_hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        //Same Hash Code"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.uniqueQuestionList.add(QUESTION_A);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cQuestion\u003e list \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        list.add(QUESTION_A);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(list.hashCode(), this.uniqueQuestionList.hashCode());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        //Different Hash code"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UniqueList\u003cQuestion\u003e diffPl \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        diffPl.add(QUESTION_B);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertNotEquals(diffPl.hashCode(), this.uniqueQuestionList.hashCode());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 157,
      "chunyongg": 11
    }
  },
  {
    "path": "src/test/java/team/serenity/model/group/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.TypicalStudent.JAMES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.TypicalStudent.JOHN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "class UniqueStudentListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void contains_nullSudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertFalse(uniqueStudentList.contains(JAMES));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void contains_studentNotInList_returnsFalse2() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JOHN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertFalse(uniqueStudentList.contains(JAMES));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JAMES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertTrue(uniqueStudentList.contains(JAMES));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void contains_studentInList_returnsTrue2() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JOHN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertTrue(uniqueStudentList.contains(JOHN));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void add_testCorrectness() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JOHN);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertTrue(uniqueStudentList.contains(JOHN));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void add_testCorrectness2() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JAMES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertTrue(uniqueStudentList.contains(JAMES));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JAMES);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(JAMES));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException2() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JOHN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(JOHN));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void setStudent_nullEditedQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setElement(JAMES, null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFound() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setElement(JAMES, JAMES));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JOHN);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        uniqueStudentList.setElement(JOHN, JOHN);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        UniqueStudentList expected \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        expected.add(JOHN);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertEquals(expected, uniqueStudentList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JOHN);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JAMES);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setElement(JAMES, JOHN));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void remove_nullStudent_throwsStudentNotFound() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(JOHN));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void remove_existingQuestion() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.add(JOHN);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        uniqueStudentList.remove(JOHN);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        UniqueStudentList expected \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertEquals(expected, uniqueStudentList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setElementsWithList(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void setStudents_testCorrectness() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        List\u003cStudent\u003e listOfStudents \u003d Arrays.asList(JOHN, JAMES);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        uniqueStudentList.setElementsWithList(listOfStudents);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        UniqueStudentList expected \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        expected.add(JOHN);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        expected.add(JAMES);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertEquals(expected, uniqueStudentList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(JOHN, JOHN);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            .setElementsWithList(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "chunyongg": 7,
      "ryanlimjr": 127
    }
  },
  {
    "path": "src/test/java/team/serenity/model/managers/QuestionManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.managers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.getTypicalQuestionManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class QuestionManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final QuestionManager questionManager \u003d new QuestionManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(Collections.emptyList(), this.questionManager.getListOfQuestions());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void resetDataNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e this.questionManager.resetData(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void resetDataWithValidReadOnlyActivityManagerReplacesData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionManager newData \u003d getTypicalQuestionManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager.resetData(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(newData, this.questionManager);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void resetDataWithDuplicateQuestionThrowsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        List\u003cQuestion\u003e newQuestions \u003d Arrays.asList(QUESTION_A, QUESTION_A);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionManagerStub newData \u003d new QuestionManagerStub(newQuestions);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e this.questionManager.resetData(newData));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void hasQuestionNullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e this.questionManager.hasQuestion(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void hasQuestionNotInQuestionManagerReturnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(this.questionManager.hasQuestion(QUESTION_A));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void hasQuestionManagerInQuestionManagerReturnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.questionManager.addQuestion(QUESTION_A);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(this.questionManager.hasQuestion(QUESTION_A));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void getQuestionModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e this.questionManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                .getListOfQuestions().remove(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * A stub ReadOnlyQuestionManager whose question list can violate interface constraints."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static class QuestionManagerStub implements ReadOnlyQuestionManager {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        private final ObservableList\u003cQuestion\u003e questionList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionManagerStub(Collection\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.questionList.setAll(questions);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getListOfQuestions() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return this.questionList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 88
    }
  },
  {
    "path": "src/test/java/team/serenity/model/userprefs/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Path DEFAULT_FOLDER_PATH \u003d Path.of(\"data\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Path QUESTION_STORAGE_FILE_PATH \u003d DEFAULT_FOLDER_PATH.resolve(\"question.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setSerenityFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setSerenityFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestionStorageFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setQuestionStorageFilePath(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void getQuestionStorageFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertTrue(userPrefs.getQuestionStorageFilePath().equals(QUESTION_STORAGE_FILE_PATH));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 22,
      "-": 17
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/JsonAdaptedClassTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedClassTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "successs404": 9
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/JsonAdaptedGroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.TypicalGroups.GROUP_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedGroupTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static final String VALID_NAME \u003d GROUP_A.getName();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private static final List\u003cJsonAdaptedStudent\u003e VALID_STUDENTS \u003d GROUP_A.getStudents().asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .map(JsonAdaptedStudent::new)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final List\u003cJsonAdaptedLesson\u003e VALID_CLASSES \u003d GROUP_A.getLessons().asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        .map(JsonAdaptedLesson::new)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "   The following testcases failed because the order of the students\u0027 names (in the Set) was not the same."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void toModelType_validGroupDetails_returnsGroup() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(GROUP_A);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(GROUP_A, group.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(null, VALID_STUDENTS, VALID_CLASSES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void toModelType_nullStudents_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(VALID_NAME, null, VALID_CLASSES);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"students\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void toModelType_nullClasses_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonAdaptedGroup group \u003d new JsonAdaptedGroup(VALID_NAME, VALID_STUDENTS, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"classes\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "chunyongg": 1,
      "ryanlimjr": 3,
      "successs404": 45
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "successs404": 9
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/JsonSerenityStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonSerenityStorageTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void getSerenityFilePath() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void readSerenity() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testReadSerenity() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void saveSerenity() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void testSaveSerenity() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "successs404": 25
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/JsonSerializableSerenityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "class JsonSerializableSerenityTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    void toModelType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "successs404": 9
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        userPrefs.setSerenityFilePath(Paths.get(\"serenity.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 7,
      "-": 116
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.question.JsonQuestionStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        JsonSerenityStorage serenityStorage \u003d new JsonSerenityStorage(getTempFilePath(\"serenity\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonQuestionStorage questionStorage \u003d new JsonQuestionStorage(getTempFilePath(\"question\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        storageManager \u003d new StorageManager(serenityStorage, questionStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void serenityReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         * {@link JsonSerenityStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonSerenityStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: saving serenity after each command is executed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // Now it is not working, CY and RE looking into it"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Serenity original \u003d getTypicalSerenity();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        storageManager.saveSerenity(original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ReadOnlySerenity retrieved \u003d storageManager.readSerenity().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(original, new Serenity(retrieved));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void getSerenityFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertNotNull(storageManager.getSerenityFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 20,
      "successs404": 1,
      "-": 51
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/question/JsonAdaptedQuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.storage.question.JsonAdaptedQuestion.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class JsonAdaptedQuestionTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_GROUP \u003d QUESTION_A.getGroup();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_LESSON \u003d QUESTION_A.getLesson();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String VALID_DESCRIPTION \u003d QUESTION_A.getDescription();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void toModelType_validQuestion_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonAdaptedQuestion question \u003d new JsonAdaptedQuestion(QUESTION_A);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(QUESTION_A, question.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void toModelType_nullGroup_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonAdaptedQuestion question \u003d new JsonAdaptedQuestion(null, VALID_LESSON, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String exceptedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Group\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalValueException.class, exceptedMessage, question::toModelType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void toModelType_nullLesson_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonAdaptedQuestion question \u003d new JsonAdaptedQuestion(VALID_GROUP, null, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String exceptedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Lesson\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalValueException.class, exceptedMessage, question::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonAdaptedQuestion question \u003d new JsonAdaptedQuestion(VALID_GROUP, VALID_LESSON, INVALID_DESCRIPTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String exceptedMessage \u003d Question.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalValueException.class, exceptedMessage, question::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonAdaptedQuestion question \u003d new JsonAdaptedQuestion(VALID_GROUP, VALID_LESSON, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String exceptedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Description\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalValueException.class, exceptedMessage, question::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 56
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/question/JsonQuestionStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.QUESTION_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.getTypicalQuestionManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.testutil.question.QuestionBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class JsonQuestionStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonQuestionStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void readQuestionManager_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readQuestionManager(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Optional\u003cReadOnlyQuestionManager\u003e readQuestionManager(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new JsonQuestionStorage(Paths.get(filePath)).readQuestionManager(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertFalse(readQuestionManager(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            readQuestionManager(\"notJsonFormatQuestionManager.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void readQuestionManager_invalidQuestionQuestionManager_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readQuestionManager(\"invalidQuestionManager.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void readQuestionManager_invalidAndValidQuestionQuestionManager_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            readQuestionManager(\"invalidAndValidQuestionManager.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void readAndSaveQuestionManager_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempQuestionManager.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionManager original \u003d getTypicalQuestionManager();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonQuestionStorage jsonQuestionStorage \u003d new JsonQuestionStorage(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        jsonQuestionStorage.saveQuestionManager(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ReadOnlyQuestionManager readBack \u003d jsonQuestionStorage.readQuestionManager(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(original, new QuestionManager(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        //Modify data, overwrite exiting file and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question newQuestion \u003d new QuestionBuilder(QUESTION_B).withGroup(\"G10\").withLesson(\"1-1\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        original.addQuestion(newQuestion);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        original.deleteQuestion(QUESTION_A);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        jsonQuestionStorage.saveQuestionManager(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        readBack \u003d jsonQuestionStorage.readQuestionManager(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(original, new QuestionManager(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Question newQuestion1 \u003d new QuestionBuilder(QUESTION_C).withGroup(\"G10\").withLesson(\"1-1\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        original.addQuestion(newQuestion1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        jsonQuestionStorage.saveQuestionManager(original);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        readBack \u003d jsonQuestionStorage.readQuestionManager().get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(original, new QuestionManager(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void saveQuestionManager_nullQuestionManager_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveQuestionManager(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Saves {@code questionManager} at specified {@code filePath}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private void saveQuestionManager(ReadOnlyQuestionManager questionManager, String filePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            new JsonQuestionStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    .saveQuestionManager(questionManager, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file \", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void saveQuestionManager_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveQuestionManager(new QuestionManager(), null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 118
    }
  },
  {
    "path": "src/test/java/team/serenity/storage/question/JsonSerializableQuestionManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.storage.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.question.TypicalQuestion.getTypicalQuestionManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class JsonSerializableQuestionManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"JsonSerializableQuestionManagerTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Path TYPICAL_QUESTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalQuestionManager.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Path INVALID_QUESTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidQuestionManager.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Path DUPLICATE_QUESTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateQuestionManager.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void toModelType_typicalQuestionFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonSerializableQuestionManager dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_QUESTION_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            JsonSerializableQuestionManager.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionManager questionManagerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionManager typicalQuestionManager \u003d getTypicalQuestionManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(questionManagerFromFile, typicalQuestionManager);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void toModelType_invalidQuestionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonSerializableQuestionManager dataFromFile \u003d JsonUtil.readJsonFile(INVALID_QUESTION_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            JsonSerializableQuestionManager.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void toModelType_duplicateQuestions_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        JsonSerializableQuestionManager dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_QUESTION_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            JsonSerializableQuestionManager.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableQuestionManager.MESSAGE_DUPLICATE_QUESTION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 48
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception. This is a wrapper method that"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency with our custom {@link"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * #assertThrows(Class, String, Executable)} method. To standardize API calls in this project, users should use this"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * method instead of {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call {@link #assertThrows(Class,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Executable)} instead."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Executable executable) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/GroupBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.util.CsvUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueLessonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentInfoList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.UniqueStudentList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A utility class to help with building Group objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class GroupBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"G04\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Set\u003cStudent\u003e DEFAULT_STUDENTS \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Aaron Tan\", \"e0123456\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Baron Wong\", \"e0654321\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Cherry Lee\", \"e0135791\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Dickson Low\", \"e0246810\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        new Student(\"Eng Wee Kiat\", \"e0101010\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final Set\u003cLesson\u003e DEFAULT_CLASSES \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private UniqueList\u003cStudent\u003e students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private UniqueList\u003cLesson\u003e lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Creates a {@code GroupBuilder} with the default details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        students.setElementsWithList(new ArrayList\u003c\u003e(DEFAULT_STUDENTS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        lessons.setElementsWithList(new ArrayList\u003c\u003e(DEFAULT_CLASSES));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Initializes the GroupBuilder with the data of {@code groupToCopy}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder(Group groupToCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "        name \u003d groupToCopy.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        students \u003d groupToCopy.getStudents();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        lessons \u003d groupToCopy.getLessons();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Initializes the GroupBuilder from the data inside the CSV file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder(String name, Path filePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        students.setElementsWithList(new ArrayList\u003c\u003e(new CsvUtil(filePath).readStudentsFromCsv()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        lessons.setElementsWithList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Sets the {@code Name} of the {@code Group} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder withName(String name) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Parses the {@code students} into a {@code Set\u003cStudent\u003e} and set it to the {@code Group} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder withStudents(Student... students) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.students.setElementsWithList(Arrays.asList(students));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Parses the {@code filePath} into a {@code Set\u003cStudent\u003e} and set it to the {@code Group} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public GroupBuilder withFilePath(Path filePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        students.setElementsWithList(new ArrayList\u003c\u003e(new CsvUtil(filePath).readStudentsFromCsv()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Creates and parses the {@code classes} into a {@code Set\u003cClass\u003e} and set it to the {@code Group} that we are"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public GroupBuilder withClasses(String... classes) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        UniqueList\u003cStudentInfo\u003e studentsInfo \u003d new UniqueStudentInfoList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xinyee20"
        },
        "content": "            studentsInfo.add(new StudentInfo(student));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (String className : classes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            this.lessons.add(new Lesson(className, studentsInfo));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Group build() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new Group(this.name, this.students, this.lessons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 10,
      "xinyee20": 1,
      "chunyongg": 20,
      "ryanlimjr": 2,
      "successs404": 77
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/GroupPredicateStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class GroupPredicateStub implements Predicate\u003cGroup\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean test(Group group) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "chunyongg": 12
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/GroupUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.logic.parser.CliSyntax.PREFIX_GRP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.AddGrpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A utility class for Group."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class GroupUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns an add command string for adding the {@code group}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static String getAddGrpCommand(Group group) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return AddGrpCommand.COMMAND_WORD + \" \" + getGroupDetails(group);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns the part of command string for the given {@code group}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static String getGroupDetails(Group group) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "        sb.append(PREFIX_GRP + group.getName() + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // need more modifications"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 4,
      "successs404": 26
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.StudentInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.ReadOnlyQuestionManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.util.UniqueList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean hasGroup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Stream\u003cGroup\u003e getGroupStream() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Path getSerenityFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cGroup\u003e getListOfGroups() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cUniqueList\u003cLesson\u003e\u003e getListOfLessonsFromGroup(Group group) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateLessonList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cUniqueList\u003cStudent\u003e\u003e getListOfStudentsFromGroup(Group group) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteStudentFromGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addStudentToGroup(Student student, Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateStudentsList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean checkIfStudentExistsInGroup(Group group, Student student) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cStudentInfo\u003e getStudentsInfoList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cUniqueList\u003cStudentInfo\u003e\u003e getListOfStudentsInfoFromGroupAndLesson(Group group, Lesson lesson) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateStudentsInfoList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ReadOnlyQuestionManager getQuestionManager() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestionManager(ReadOnlyQuestionManager questionManager) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public boolean hasQuestion(Question toCheck) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void deleteQuestion(Question toDelete) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void addQuestion(Question toAdd) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setQuestion(Question target, Question edited) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 64,
      "chunyongg": 138
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/SerenityBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Serenity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A utility class to help with building Serenity objects. Example usage: \u003cbr\u003e {@code Serenity serenity \u003d new"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * SerenityBuilder().withGroup(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class SerenityBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Serenity serenity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public SerenityBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "        serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public SerenityBuilder(Serenity serenity) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.serenity \u003d serenity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Adds a new {@code Group} to the {@code Serenity} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public SerenityBuilder withGroup(Group group) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        serenity.addGroup(group);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Serenity build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "chunyongg": 2,
      "successs404": 28
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path. Creates the sandbox folder if"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the middle index of the question in the {@code model}\u0027s question list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: Wen Jin to complete when implementing view/find question"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Index.fromOneBased(model.getFilteredQuestionList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the last index of the question in the {@code model}\u0027s question list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: Wen Jin to complete when implementing view/find question"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Index.fromOneBased(model.getFilteredQuestionList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the question in the {@code model}\u0027s question list at {@code index}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static Question geQuestion(Model model, Index index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // TODO: Wen Jin to complete when implementing view/find question"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return model.getFilteredQuestionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 14,
      "chunyongg": 2,
      "-": 42
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/TypicalGroups.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.Serenity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A utility class containing a list of {@code Group} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class TypicalGroups {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Group GROUP_C \u003d new GroupBuilder().withName(\"G06\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .withStudents("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new Student(\"Jeffery\", \"e0000000\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new Student(\"Luna\", \"e0111111\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Student(\"Queenie\", \"e0222222\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ).withClasses(\"4-2\", \"5-1\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final Group GROUP_D \u003d new GroupBuilder().withName(\"G07\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        .withStudents("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "            new Student(\"Freddie\", \"e0000000\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            new Student(\"June\", \"e0101011\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ).withClasses(\"4-2\", \"5-1\", \"5-2\", \"6-1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    // Manually added - Group\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Group GROUP_A \u003d new GroupBuilder().withName(CommandTestUtil.VALID_GRP_GROUP_A)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        .withFilePath(CommandTestUtil.VALID_PATH_GROUP_A).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Group GROUP_B \u003d new GroupBuilder().withName(CommandTestUtil.VALID_GRP_GROUP_B)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        .withFilePath(CommandTestUtil.VALID_PATH_GROUP_B).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private TypicalGroups() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Returns an {@code Serenity} with all the typical groups."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static Serenity getTypicalSerenity() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Serenity serenity \u003d new Serenity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (Group group : getTypicalGroups()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "            serenity.addGroup(group);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return serenity;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static List\u003cGroup\u003e getTypicalGroups() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GROUP_A, GROUP_B, GROUP_C, GROUP_D));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 14,
      "chunyongg": 4,
      "successs404": 37
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 5,
      "chunyongg": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/TypicalStudent.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Student;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class TypicalStudent {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final Student JOHN \u003d new Student(\"John\", \"E1234567\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public static final Student JAMES \u003d new Student(\"James\", \"E7654321\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 2,
      "chunyongg": 7
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/question/QuestionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * A utility class to help with building Question objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class QuestionBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String DEFAULT_GROUP \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String DEFAULT_LESSON \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"How is the grading criteria like?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private String group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private String lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Initializes the QuestionBuilder with the default data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public QuestionBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.group \u003d DEFAULT_GROUP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lesson \u003d DEFAULT_LESSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Initializes the QuestionBuilder with the data of {@code question}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public QuestionBuilder(Question question) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.group \u003d question.getGroup();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lesson \u003d question.getLesson();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.description \u003d question.getDescription();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Sets the {@code group} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public QuestionBuilder withGroup(String group) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Sets the {@code lesson} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public QuestionBuilder withLesson(String lesson) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Sets the {@code description} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public QuestionBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Question build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Question(this.group, this.lesson, this.description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 64
    }
  },
  {
    "path": "src/test/java/team/serenity/testutil/question/TypicalQuestion.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.testutil.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.group.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.model.managers.QuestionManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class TypicalQuestion {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Question QUESTION_A \u003d new Question(\"G04\", \"2-2\", \"What is the deadline for the report?\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Question QUESTION_B \u003d new Question(\"G05\", \"3-1\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        \"What do we need to prepare for tomorrow\u0027s lesson?\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Question QUESTION_C \u003d new Question(\"G05\", \"1-2\", \"How is the grading criteria like?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private TypicalQuestion() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns a {@code QuestionManager} with all the typical questions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static QuestionManager getTypicalQuestionManager() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        QuestionManager questionManager \u003d new QuestionManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (Question question : getTypicalQuestion()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            questionManager.addQuestion(question);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return questionManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static List\u003cQuestion\u003e getTypicalQuestion() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(QUESTION_A, QUESTION_B, QUESTION_C));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 38
    }
  },
  {
    "path": "src/test/java/team/serenity/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * A test object which can be constructed via an FXML file. Unlike other JavaFX classes, this class can be constructed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "chunyongg": 4,
      "-": 31
    }
  },
  {
    "path": "src/test/java/team/serenity/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package team.serenity.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static team.serenity.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import team.serenity.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * UiPart used for testing. It should only be used with invalid FXML files or the valid file located at {@link"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 3,
      "chunyongg": 2,
      "-": 109
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003c?import team.serenity.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "\u003cfx:root type\u003d\"team.serenity.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "-": 5
    }
  }
]
