[
  {
    "path": ".github/pull_request_template.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "### What this does"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "This PR \u003c!-- your WCT essay here --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c!-- Delete accordingly --\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Fixes|Closes|Part of #1337."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "### How to test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c!-- Write an essay here if it\u0027s more suitable --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "1. Launch the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "2. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "### Notes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c!-- Anything else we should take note of, e.g. how this affects future PRs,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "issues faced, etc. --\u003e"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 14
    }
  },
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "[![Java CI](https://github.com/AY2021S1-CS2103-T16-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T16-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "**ResiReg** (**Res**idential **Reg**ulation) is a productivity app designed to help admin staff at Residential Colleges (RCs)* in NUS with their daily tasks. ResiReg allows admin to allocate rooms to students, manage students records, generate billing and OHS reports, and export CSVs for easy reference and sharing."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "**ResiReg** has the following main features:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Manage records of students."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Manage allocations of students to rooms in the College"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Export records of students, rooms or transactions to CSV files for easy reference and sharing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Our application is geared towards users who prefer typing over mouse actions, so interactions with our application is mainly keyboard based."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * [Developer Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * [About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * [Contact Us](docs/ContactUs.md)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * This project is a based off the AddressBook-Level3 project, created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## License : [MIT](LICENSE)"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 3,
      "mkeoliya": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    id \"com.star-zero.gradle.githook\" version \"1.2.1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "mainClassName \u003d \u0027seedu.resireg.Main\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    archiveName \u003d \u0027resireg.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "githook {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    failOnMissingHooksDir \u003d true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    createHooksDirIfNotExist \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    hooks {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"pre-push\" {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            task \u003d \"test clean checkstyleMain checkStyleTest\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "run {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "Lysire": 1,
      "-": 72,
      "mkeoliya": 11,
      "chloelee767": 2
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### Mayank Keoliya"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003cimg src\u003d\"images/mkeoliya.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "[[github](http://github.com/mkeoliya)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "[[portfolio](team/mkeoliya.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Responsibilities: Scheduling \u0026 Tracking, Maintaining Code Quality"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "### Loh Jing Yen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cimg src\u003d\"images/jingyenloh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "[[github](https://github.com/jingyenloh)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "[[portfolio](team/jingyenloh.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "### Bec Kyung Huhn (Kevin)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "\u003cimg src\u003d\"images/lysire.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "[[github](http://github.com/lysire)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "[[portfolio](team/lysire.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* Role: Developer, IntelliJ Expert"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "### New Jun Jie (Jet)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "\u003cimg src\u003d\"images/jetnew.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "[[github](http://github.com/jetnew)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "[[portfolio](team/jetnew.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* Role: Developer, Intellij"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "### Chloe Lee Ke Er"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003cimg src\u003d\"images/chloelee767.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "[[github](http://github.com/chloelee767)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "* Role: Developer, Git Expert"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "* Responsibilities: Testing"
      }
    ],
    "authorContributionMap": {
      "jetnew": 6,
      "JingYenLoh": 4,
      "Lysire": 6,
      "-": 32,
      "mkeoliya": 6,
      "chloelee767": 5
    }
  },
  {
    "path": "docs/ContactUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "title: Contact Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* *Bug reports, Suggestions* : Post in our [issue tracker](https://github.com/AY2021S1-CS2103-T16-3/tp) if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described [here](https://github.com/oss-generic/process)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* *Email us* : You can also reach us at `ljy@u.nus.edu`, `mayank@u.nus.edu`, `bec.kyung.huhn@u.nus.edu`, `jnew@u.nus.edu` or `chloe.lee@u.nus.edu`."
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 8
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "**ResiReg** is a productivity app designed to help OHS* admin at Residential Colleges (RCs)* in NUS with their daily tasks. **ResiReg** allows admin to allocate rooms to students, manage students records, generate billing and OHS reports, and export CSVs for easy reference and sharing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "**ResiReg** has the following main features:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "1. Manage records of students."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "2. Manage allocations of students to rooms in the College"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "3. Generate bills and log payments for RC-related services."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "4. Export records of students, rooms or transactions to CSV files for easy reference and sharing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## Purpose and Audience for this Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "This Developer Guide specifies the architecture, design, implementation and user cases for **ResiReg**, as well as our considerations behind key design decisions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "It is intended for developers, software testers, open-source contrubitors and any like-minded persons who wish to contribute this project or gain deeper insights about **ResiReg**."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## Setting Up"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Refer to the guide [here](./SettingUp.md)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "The **_Architecture Diagram_** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "1. `Logic` uses the `ResiRegParser` class to parse the user command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "- stores the residence regulation data."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- does not depend on any of the other three components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `ResiReg`, which `Person` references. This allows `ResiReg` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "- can save the residence regulation data in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Classes used by multiple components are in the `seedu.resireg.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedResiReg`. It extends `ResiReg` with an undo/redo history, stored internally as an `resiRegStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "- `VersionedResiReg#commit()` — Saves the current residence regulation state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "- `VersionedResiReg#undo()` — Restores the previous residence regulation state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "- `VersionedResiReg#redo()` — Restores a previously undone residence regulation state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitResiReg()`, `Model#undoResiReg()` and `Model#redoResiReg()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedResiReg` will be initialized with the initial residence regulation state, and the `currentStatePointer` pointing to that single residence regulation state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the residence regulation. The `delete` command calls `Model#commitResiReg()`, causing the modified state of the residence regulation after the `delete 5` command executes to be saved in the `resiRegStateList`, and the `currentStatePointer` is shifted to the newly inserted residence regulation state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitResiReg()`, causing another modified residence regulation state to be saved into the `resiRegStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitResiReg()`, so the residence regulation state will not be saved into the `resiRegStateList`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoResiReg()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous residence regulation state, and restores the residence regulation to that state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial ResiReg state, then there are no previous ResiReg states to restore. The `undo` command uses `Model#canUndoResiReg()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoResiReg()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the residence regulation to that state."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `resiRegStateList.size() - 1`, pointing to the latest residence regulation state, then there are no undone ResiReg states to restore. The `redo` command uses `Model#canRedoResiReg()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the residence regulation, such as `list`, will usually not call `Model#commitResiReg()`, `Model#undoResiReg()` or `Model#redoResiReg()`. Thus, the `resiRegStateList` remains unchanged."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitResiReg()`. Since the `currentStatePointer` is not pointing at the end of the `resiRegStateList`, all residence regulation states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "- **Alternative 1 (current choice):** Saves the entire ResiReg."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  - Pros: Easy to implement."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  - Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  - Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  - Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- an OHS admin at a Residential College\\* (in NUS)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- has a need to manage a large number of students and rooms (\u003e800)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- dissatisfied with current MS Excel and paper-based workflow"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- prefer desktop apps over other types"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- can type fast"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- prefers typing to mouse interactions"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "**Value proposition**: manage students, room allocations and billing faster than a typical GUI app."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Priorities: High (must have) - `☆ ☆ ☆`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| Priority | As a…                    | I can…                                                   | So that I can…                                                                                            |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| -------- | ------------------------ | -------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | Meticulous OHS admin     | have automatic backups of my data                        | rest knowing my data will not be accidentally erased.                                                     |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | generate audit reports for financial data                | comply with internal audits of the Residential College.                                                   |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | export records to csv files                              | easily create mailing lists or send relevant data to other admin.                                         |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | New/Confused User        | check the syntax for a command                           | do a task even if I am unsure of the command usage.                                                       |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | First Time User          | ask for help                                             | quickly and easily learn how to use the application in one place.                                         |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS Admin                | view a list of all students                              | check which students are in the system and access their particulars.                                      |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | As as skeptical GUI user | create aliases to other commands                         | perform my common actions while typing less.                                                              |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\*       | OHS admin                | find a room by searching for the room number             | get the details of a specific room, without getting cluttered by other information.                       |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS Admin                | view a list of rooms filtered by a particular type       | select the rooms that needs to be upgraded, for example.                                                  |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | delete a bill                                            | remove a erroneously added bill.                                                                          |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | mark a bill as paid                                      | easily keep track of the remaining amount a student has to pay to OHS.                                    |"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | view a list of all students with outstanding bills       | remind students of outstanding payments.                                                                  |"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | skeptical GUI user       | have autocompletions for a command                       | quickly and efficiently complete an operation.                                                            |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | skeptical GUI user       | redo the previous command using a keyboard shortcut      | do the same task without typing again, e.g. if two students wish to pay the same bill.                    |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | Busy OHS Admin           | find a student by partial searching for their first name | type quickly without worrying about typos.                                                                |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | Skeptical GUI user       | undo my last command                                     | fix any change that I made erroneously.                                                                   |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | skeptical GUI user       | view previous commands using a keyboard shortcut         | check if I made an error in adding or deleting records.                                                   |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | edit the bill amount                                     | ensure that changes in the billing amounts due to changes in university policies can be reflected.        |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | view all outstanding bills for a student                 | inform the student of his/her due bills.                                                                  |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | update a Semester name                                   | correct typos in the semester name.                                                                       |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | add a bill for a student                                 | keep track of a student\u0027s bills and finances.                                                             |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS admin                | view a list of vacant rooms                              | start assigning rooms to students before the semester starts.                                             |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | archive the current Semester\u0027s data                      | keep the data for auditing purposes, but not hvae it distract me while dealing with the current semester. |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS admin                | view a room allocation for a student                     | check and inform a student of their room allocation during check in.                                      |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS admin                | allocate a room to a student                             | allocate a student to a room before the semester starts.                                                  |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS admin                | delete a room allocation for a student                   | update vacancies when a student applies to leave their room.                                              |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | add a remark to a bill                                   | record any exceptional details about the bill (e.g. cash-only payment).                                   |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | add a new semester                                       | make sure all new bills and allocations are made in the context of the semester.                          |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS admin                | view a list of all allocated rooms                       | check which students stay in which rooms.                                                                 |"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS admin                | edit a room allocation for a student                     | change a student\u0027s room allocation and update the room vacancies.                                         |"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\*       | OHS admin                | edit a room\u0027s type                                       | log upgrades like the installation of an aircon.                                                          |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | export all of the current data to a data-file            | hand over my duties to another admin.                                                                     |"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\*       | OHS admin                | edit a room\u0027s semesterly fees                            | update room charges when costs increase (e.g. from $1000 to $1500)                                        |"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\*    | OHS admin                | import data from a data file                             | continue work from where my predecessor left off.                                                         |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS admin                | add a student to ResiReg                                 | perform admin duties related to the student.                                                              |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS admin                | edit the details of an existing student                  | easily correct any typos and update the student details in response to changes (e.g. faculty).            |"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| \\* \\* \\* | OHS admin                | delete a student                                         | so that I can remove an erroneously added student.                                                        |"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "(For all use cases below, the **System** is `ResiReg` and the **Actor** an `OHS admin`, unless specified otherwise)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "#### Use case: UC01 - Add a student"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to add a student and supplies student details."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg adds the student and saves the changes."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 1a. Student details are missing or invalid, or there is already a student with the same matriculation number."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    - ResiReg shows an error message."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "      Use case starts over."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "#### Use case: UC02 - Delete a student"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to list students."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg shows a list of students."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to delete a specified student from the list."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg deletes the specified student and saves the changes."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 1a. The list of students is empty."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "  "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 3a. The specified student does not exist."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "  - ResiReg shows an error message."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "#### Use case: UC03 - Edit a student"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to list students."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg shows a list of students."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to edit a specific student from the list and supplies details to edit."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg edits the student and saves the changes."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 1a. The list of students is empty."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "  "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 3a. The specified student does not exist or the supplied details are invalid."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "  - ResiReg shows an error message."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "  "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "#### Use case: UC04 - Allocate a room to a student"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to list students without a room allocation and list vacant rooms."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg shows a list of students without a room allocation and a list of vacant rooms."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to allocate a particular student to a particular room."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg adds the room allocation and saves the changes."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 3a. Student belongs to an existing room allocation, room belongs to an existing room allocation, room does not exist or student does not exist."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    - ResiReg shows an error message."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "#### Use case: UC05 - Delete a room allocation for a student"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to list room allocations."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg shows a list of room allocations."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to delete a specific room allocation."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg removes the room allocation and saves the changes. The room and student are not modified."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 1a. The list of room allocations is empty."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 3a. Room allocation does not exist."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    - ResiReg shows an error message."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "      "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "#### Use case: UC06 - Edit an existing room allocation"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to list room allocations."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg shows a list of room allocations."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. OHS admin requests to edit a specific room allocation from the list and supplies details to update."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. ResiReg updates the room allocation and saves the changes."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 1a. The list of room allocations is empty."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- 3a. Room allocation does not exist or details supplied are invalid."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    - ResiReg shows an error message."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "2. Should be simple to pick up for OHS admin (to incentivize them to migrate from Excel+paper-based workflow)."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "3. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "4. Should automatically backup frequently to avoid loss of sensitive data."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "5. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "6. The codebase should be maintainable so that developers can easily add new features to the project"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- **OHS**: Office of Housing Services"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- **OHS Admin**: An employee of the OHS who works at a Residential College"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- **Residential College**: A university residence for students that offers a 2-year program."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- **Check-in**: Exercise conducted at the beginning of the semester (in Week 0), where a student is informed of his room allocation."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- **Outstanding bill**: A bill due to be paid by a student."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 60,
      "-": 282,
      "mkeoliya": 78,
      "chloelee767": 92
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "   1. Run the `seedu.resireg.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "   e.g. `seedu.resireg.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "   e.g. `seedu.resireg.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "   e.g. `seedu.resireg.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "**ResiReg** (**Res**idential **Reg**ulation) is a productivity app designed to help admin staff at Residential Colleges (RCs)* in NUS with their daily tasks. ResiReg allows admin to allocate rooms to students, manage students records, generate billing and OHS reports, and export CSVs for easy reference and sharing."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " **ResiReg** has the following main features:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Manage records of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Manage allocations of students to rooms in the College"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Export records of students, rooms or transactions to CSV files for easy reference and sharing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "__ResiReg__ is optimised for OHS who are fast typists who are used to MS Excel, and prefer typing over other means of input. It comes with:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- A Command Line Interface (CLI) which allows you to access all __ResiReg__ features by typing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "- A Graphical User Interface (GUI) that displays the information you need in a grid format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "\u003e __ResiReg__ is currently a work in progress. Here is a mockup of its skeleton. Stay tuned for our progress!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "![](images/Ui.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "## About this Guide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "### Basic Information"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "This User Guide explains how you (as an OHS admin) can use __ResiReg__ to manage tasks at Residential Colleges."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "You may refer to [Quick Start](#quick-start) for a short tutorial on how to run __ResiReg__ on your system and use __ResiReg__\u0027s main features. For a full walkthrough of __ResiReg__, please refer to [Features](#features)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. Ensure that Java 11 or above is installed in your computer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "2. Download the latest `ResiReg.jar` here."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your **ResiReg**."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "4. Double-click the file to start the app. The following window should appear within a few seconds - this is the Session Screen, where you can create, open, or delete interview sessions:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "5. Type the command in the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it. e.g. typing `help` and pressing Enter will open this user guide."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "6. Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    -  `rooms --vacant`: lists all rooms that are vacant."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    - `allocate A0123456X 08-108`: allocate a student with the student ID A0123456X to room number 08-108."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    - `exit`: exits the app."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "8. Refer to “Features” for details of all the commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "This section explains the format of commands in this User Guide."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- Words in `\u003cangular_brackets\u003e` are the parameters to be supplied by the user e.g. in `deallocate \u003cstudent_name\u003e`, `\u003cstudent_name\u003e` is a parameter which can be used as `deallocate Jet New`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- Items in square brackets are optional e.g `\u003cfull_name\u003e [-aka \u003calias\u003e]` can be used as `Jet New -aka JJ` or as `Jet New`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "- Items separated by \u003cCode\u003e|\u003c/Code\u003e indicates a choice between items, but only one item is to be used at any time e.g. in `rooms --vacant` or `rooms --allocated`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "- Items with … after them can be used multiple times including zero times, unless otherwise stated e.g. `[/m \u003cmod\u003e /ig \u003cinterest_group\u003e]…` can be used as `/m mod /ig ig`, `/m mod1 /ig ig1 /m mod2 /ig ig2` etc."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003c/div\u003e "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "### I. Housing Management"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003e**ResiReg** allows you to manage rooms in the Residential College."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 1. Listing of all rooms : `rooms` "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Shows a list of all rooms in ResiReg."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `rooms`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Rooms can be filtered based on their allocation status. See the following two commands for further details."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `rooms` switches to the Rooms tab if it is not already selected, and shows the list of rooms on the right pane. "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 2. Listing all vacant rooms : `rooms --vacant`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Shows a list of all vacant rooms i.e those which have not been allocated to any student yet. "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `rooms --vacant`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `rooms --vacant` switches to the Rooms tab if it is not already selected, and shows the list of vacant rooms on the right pane. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 3. Listing all allocated rooms : `rooms --allocated`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Shows a list of all allocated rooms i.e. those which have been allocated to a student. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `rooms --allocated`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `rooms --allocated` switches to the Rooms tab if it is not already selected, and shows the list of allocated rooms on the right pane. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 4. Allocating a room to a student : `allocate`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Allocates a room to a student i.e denotes that the student currently occupies the room. "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `allocate ri/\u003croom_index\u003e si/\u003cstudent_index\u003e`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Allocates a room to the student person at the specified `room_index` and `student_index`. The `room_index` refers to the index number shown in the displayed rooms list, "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "and the `student_index` refers to the index number shown in the displayed students list. Both indices **must be positive integers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Both the student and the room must be unallocated when this command is run. Otherwise, an error message is displayed accordingly."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `allocate ri/1 si/1` allocates the room at `room_index` 1 to the student at `student_index` 1. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 5. Deallocating a room for a student : `deallocate`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Deallocates a room for a student i.e denotes that the student no longer occupies the room. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `deallocate ri/\u003croom_index\u003e si/\u003cstudent_index\u003e`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Deallocates a room to the student at the specified `room_index` and `student_index`. The `room_index` refers to the index number shown in the displayed rooms list, "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "and the `student_index` refers to the index number shown in the displayed students list. Both indices **must be positive integers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* The room at `room_index` must be allocated to the student at `student_index`. Otherwise, an error message is displayed accordingly. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `deallocate ri/1 si/1` deallocates the room at `room_index` 1 for the student at `student_index` 1. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 6. Edit a room allocation for a student : `reallocate`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Edits a room allocation for a student, by first deallocating the student\u0027s current room, and then allocating a specified room to the student."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `reallocate si/\u003cstudent_index\u003e ri/\u003croom_index\u003e`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Reallocates the room at `room_index` to the student at the specified `student_index` and `student_index`. The `room_index` refers to the index number shown in the displayed rooms list, "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "and the `student_index` refers to the index number shown in the displayed students list. Both indices **must be positive integers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* The student at `student_index` must currently have a room allocation (which is not the specified room). Otherwise, an error message is displayed accordingly. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* The room at `room_index` must currently be vacant. Otherwise, an error message is displayed accordingly. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `reallocate si/1 ri/2` first deallocates the room currently allocated to student with index 1, then  allocates the room at index 2 to the student."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "#### 7. Archiving a Semester"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Archives the previous semester\u0027s data into an archival folder, and adjusts the application to operate on the succeeding semester. "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Format: `archive`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* Moves the previous semester\u0027s allocation data to `AY[YEAR]S[SEMESTER]/archive.json`. For example, if the previous semester was 2019 Semester 2, the allocation data will be moved to `AY2019S2/archive.json`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* The rooms and students are still preserved in the system."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "### II. Student Management"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003e**ResiReg** allows you to manage students in the Residential College."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 1. Listing all students : `students`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Shows a list of all students in ResiReg."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `students`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `students` switches to the Students tab if it is not already selected, and shows the list of students on the right pane. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 2. Adding a student : `add`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Adds a student to ResiReg. The following student details are stored: name, student ID, phone, email, faculty, and optionally, tags."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `add n/\u003cstudent_name\u003e i/\u003cstudent_id\u003e p/\u003c8_digit_phone_no\u003e e/\u003cemail\u003e f/\u003cfaculty\u003e [t/\u003ctag_name\u003e]...`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* The student ID must be a unique 8-digit alphanumeric string, starting with `EO` and ending with 6 digits. Otherwise, an error message is displayed accordingly."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* The pairs of type-prefixes and data (eg. `n/\u003cstudent_name\u003e`) may given be in any order. "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* The student will not be added if some pieces of information is missing. An error message will be displayed instead."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `add  n/Jet New i/E0407889 p/82462157 e/jn@u.nus.edu f/SOC` successfully creates a new student named Jet New whose student ID is E0407889, phone number is 82462157,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "email is jn@u.nus.edu, and faculty is Computing (SOC). "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `add student n/Jet New i/E0407889 e/jn@u.nus.edu` prompts the user with the following error message (because the faculty field is missing): "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Invalid command format!"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        add: Adds a student to ResiReg."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Parameters: n/NAME i/STUDENT_ID p/PHONE e/EMAIL f/FACULTY [t/TAG]..."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Example: add n/John Doe s/E0123456 p/98765432 e/johndoe@u.nus.edu f/FASS"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 3. Editing a student : `edit`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Edits an existing student in ResiReg."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `edit \u003cindex\u003e [n/\u003cstudent_name\u003e] [i/\u003cstudent_id\u003e] [p/\u003c8_digit_phone_no\u003e] [e/\u003cemail\u003e] [f/\u003cfaculty\u003e] [t/\u003ctag_name\u003e]…​`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Edits the person at the specified `index`. The index refers to the index number shown in the displayed student list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* You can remove all of the student’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "*  `edit 1 p/82462157 e/johnd@comp.nus.edu.sg` Edits the phone number and email address of the first student to be `82462157` and `johnd@comp.nus.edu.sg` respectively."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "*  `edit 2 n/Alpha Queue/` Edits the name of the 2nd student to be `Alpha Queue` and clears all existing tags."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 4. Finding a student by name : `find`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Finds students whose names contain any of the given keywords."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `find \u003ckeyword\u003e [\u003cmore_keywords\u003e]...`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Students matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `find alex david` returns `Alex Yeoh`, `David Li`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 4. Deleting a student : `delete`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Deletes the specified student from ResiReg."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Deletes the person at the specified `index`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd student in ResiReg."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetnew"
        },
        "content": "### III. General"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetnew"
        },
        "content": "\u003e**ResiReg** has many general features such as Command Line Interface (CLI) sugar for more efficient usage by experienced users."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 1. Asking for help as a first time user : `help`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Shows a list of all available commands and their purpose to understand the usage of the commands."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Lists all user commands and their purpose."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Also includes a link to this User Guide, so that the user can access further details."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Commands available:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "add: Adds a student to ResiReg."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "allocate: Allocates a student to a room."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "clear: Clears list of students."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "...other commands..."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "You can also refer to our user guide at: https://ay2021s1-cs2103-t16-3.github.io/tp/UserGuide.html"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jetnew"
        },
        "content": "#### 2. Checking the syntax for a command "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Shows the purpose, syntax, and parameters of a command if you need to use the command but are unsure of its syntax."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `help \u003ccommand_word\u003e`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "rooms: Lists all rooms within the system. If the --vacant flag is specified, lists only vacant rooms i.e rooms which have no students allocated to them. "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Otherwise, if the --allocated flag is specified, lists only allocated rooms i.e. rooms which have students allocated to them. "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Parameters: [--vacant | --allocated]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Example: rooms"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 3. Clearing all entries : `clear`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Clears all entries (students and rooms) from ResiReg."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "#### 4. Exiting ResiReg : `exit`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "### Where do I get help?"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "Just type in the `help` command!"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "### How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "1. Download the JAR file (`resireg.jar`) on your new computer. "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "2. Navigate to where the JAR file is."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "3. Double click on `resireg.jar`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "4. Delete the `resireg.json` file in the folder"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "5. Copy over the `resireg.json` file \u003cem\u003eresiding in  your previous **ResiReg** home folder\u003c/em\u003e that contains data of your previous **ResiReg** session."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| Action             | Format, Examples                                                                                               |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "|--------------------|----------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *list rooms*       | `rooms [--allocated \\| --vacant]`                                                                              |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *allocate room*    | `allocate si/ ri/` e.g. `allocate si/1 ri/1`                                                                   |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *deallocate room*  | `deallocate si/ ri/` e.g. `deallocate si/1 ri/1`                                                               |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *edit allocation*  | `reallocate si/ ri/` e.g. `reallocate si/1 ri/2`                                                               |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *list students*    | `students`                                                                                                     |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *add student*      | `add n/ i/ p/\u003c8_digit_phone_no\u003e e/ f/ [t/]...` e.g.`add  n/Jet New i/E0407889 p/82462157 e/jn@u.nus.edu f/SOC` |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *edit student*     | `edit  [n/] [i/] [p/\u003c8_digit_phone_no\u003e] [e/] [f/] [t/]…` e.g.`edit 1 n/Jet New`                                |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *find student*     | `find  []... ` e.g.`find John`                                                                                 |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *delete student*   | `delete ` e.g.`delete 2`                                                                                       |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *help*             | `help [command]` e.g. `help` or `help rooms`                                                                   |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *archive semester* | `archive`                                                                                                      |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *clear*            | `clear`                                                                                                        |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "| *exit*             | `exit`                                                                                                         |"
      }
    ],
    "authorContributionMap": {
      "jetnew": 4,
      "JingYenLoh": 21,
      "Lysire": 2,
      "-": 90,
      "chloelee767": 45,
      "mkeoliya": 125
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "title: ResiReg"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "[![Java CI](https://github.com/AY2021S1-CS2103-T16-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T16-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "**ResiReg** (**Res**idential **Reg**ulation) is a productivity app designed to help admin staff at Residential Colleges (RCs)* in NUS with their daily tasks. ResiReg allows admin to allocate rooms to students, manage students records, generate billing and OHS reports, and export CSVs for easy reference and sharing."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "**ResiReg** has the following main features:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Manage records of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Manage allocations of students to rooms in the College"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Generate bills and log payments for RC-related services."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* Export records of students, rooms or transactions to CSV files for easy reference and sharing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Our application is geared towards users who prefer typing over mouse actions, so interactions with our application is mainly keyboard based."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * [Developer Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * [About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * [Contact Us](docs/ContactUs.md)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * This project is a based off the AddressBook-Level3 project, created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## License : [MIT](LICENSE)"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 12,
      "mkeoliya": 21
    }
  },
  {
    "path": "docs/team/jetnew.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "title: New Jun Jie (Jet)\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "jetnew": 46
    }
  },
  {
    "path": "docs/team/jingyenloh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "title: Loh Jing Yen\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 46
    }
  },
  {
    "path": "docs/team/lysire.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "title: Lysire\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Lysire": 46
    }
  },
  {
    "path": "docs/team/mkeoliya.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "title: Mayank Keoliya\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 46
    }
  },
  {
    "path": "src/main/java/seedu/resireg/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " *     Error: JavaFX\u0027s runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.JsonResiRegStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.ResiRegStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ResiReg ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiRegStorage resiRegStorage \u003d new JsonResiRegStorage(userPrefs.getResiRegFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        storage \u003d new StorageManager(resiRegStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s ResiReg and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The data from the sample ResiReg will be used instead if {@code storage}\u0027s ResiReg is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * or an empty ResiReg model will be used instead if errors occur when reading {@code storage}\u0027s ResiReg."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Optional\u003cReadOnlyResiReg\u003e resiRegOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ReadOnlyResiReg initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            resiRegOptional \u003d storage.readResiReg();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (!resiRegOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ResiReg\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            initialData \u003d resiRegOptional.orElseGet(SampleDataUtil::getSampleResiReg);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ResiReg\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            initialData \u003d new ResiReg();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ResiReg\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            initialData \u003d new ResiReg();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ResiReg\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        logger.info(\"Starting ResiReg \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping ResiReg ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 23,
      "-": 139,
      "mkeoliya": 21
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final String LOG_FILE \u003d \"resireg.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 110,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_INVALID_ROOM_DISPLAYED_INDEX \u003d \"The room index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 1,
      "-": 9,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 140,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/CommandMapper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddAliasCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.AllocateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.DeallocateCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.DeleteAliasCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.Help;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.ListAliasCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ListRoomCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ReallocateCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ToggleMainPanelCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.AddAliasCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.parser.AllocateCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.parser.DeallocateCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.DeleteAliasCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.parser.ListRoomCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.parser.Parser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.parser.ReallocateCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.logic.parser.ResiRegParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Manages the mapping between command words and parsers, and command words and their help messages."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Developers can add new commands by modifying the constructor for this class. This class ensures that all"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * commands (1) are bound to their parsing logic and (2) their documentation can be checked using the help command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class CommandMapper {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private CommandMap commandMap;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private ResiRegParser parser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a new CommandMapper with all the commands supported by the application bound appropriately."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Developers who want to add new commands need to modify this constructor."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandMapper(List\u003cCommandWordAlias\u003e aliases) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap \u003d new CommandMap();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // note: new Parser()::parse assumes that Parser does not depend on state"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(AddCommand.COMMAND_WORD, AddCommand.HELP, new AddCommandParser()::parse);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        commandMap.addCommand(ArchiveCommand.COMMAND_WORD, ArchiveCommand.HELP, unused -\u003e new ArchiveCommand());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(ClearCommand.COMMAND_WORD, ClearCommand.HELP, unused -\u003e new ClearCommand());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(DeleteCommand.COMMAND_WORD, DeleteCommand.HELP, new DeleteCommandParser()::parse);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(EditCommand.COMMAND_WORD, EditCommand.HELP, new EditCommandParser()::parse);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(ExitCommand.COMMAND_WORD, ExitCommand.HELP, unused -\u003e new ExitCommand());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(FindCommand.COMMAND_WORD, FindCommand.HELP, new FindCommandParser()::parse);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(HelpCommand.COMMAND_WORD, HelpCommand.HELP, HelpCommand::new);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(ListCommand.COMMAND_WORD, ListCommand.HELP, unused -\u003e new ListCommand());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(ListRoomCommand.COMMAND_WORD, ListRoomCommand.HELP, new ListRoomCommandParser()::parse);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(AllocateCommand.COMMAND_WORD, AllocateCommand.HELP, new AllocateCommandParser()::parse);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(DeallocateCommand.COMMAND_WORD, DeallocateCommand.HELP,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            new DeallocateCommandParser()::parse);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(ReallocateCommand.COMMAND_WORD, ReallocateCommand.HELP,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            new ReallocateCommandParser()::parse);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        commandMap.addCommand(RedoCommand.COMMAND_WORD, RedoCommand.HELP, unused -\u003e new RedoCommand());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        commandMap.addCommand(UndoCommand.COMMAND_WORD, UndoCommand.HELP, unused -\u003e new UndoCommand());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.addCommand(AddAliasCommand.COMMAND_WORD, AddAliasCommand.HELP, new AddAliasCommandParser()::parse);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.addCommand(DeleteAliasCommand.COMMAND_WORD, DeleteAliasCommand.HELP,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new DeleteAliasCommandParser()::parse);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.addCommand(ListAliasCommand.COMMAND_WORD, ListAliasCommand.HELP, unused -\u003e new ListAliasCommand());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandMap.addCommand(ToggleMainPanelCommand.COMMAND_WORD, ToggleMainPanelCommand.HELP,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            unused -\u003e new ToggleMainPanelCommand());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (CommandWordAlias commandWordAlias : aliases) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            commandMap.addAliasCommand(commandWordAlias.getAlias().toString(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                commandWordAlias.getCommandWord().toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        parser \u003d new ResiRegParser(commandMap.getCommandWordToParserMap());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Map\u003cString, Help\u003e getCommandWordToHelpMap() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return commandMap.getCommandWordToHelpMap();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns a parser which parses user inputs and returns the appropriate Command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return Parser."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    ResiRegParser getParser() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return parser;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static class CommandMap {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private HashMap\u003cString, Help\u003e commandWordToHelp;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private HashMap\u003cString, Parser\u003cCommand\u003e\u003e commandWordToParser;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private CommandMap() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            commandWordToHelp \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            commandWordToParser \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        void addCommand(String commandWord, Help help, Parser\u003cCommand\u003e parser) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            commandWordToHelp.put(commandWord, help);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            commandWordToParser.put(commandWord, parser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        void addAliasCommand(String alias, String commandWord) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            commandWordToHelp.put(alias, commandWordToHelp.get(commandWord));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            commandWordToParser.put(alias, commandWordToParser.get(commandWord));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Map\u003cString, Help\u003e getCommandWordToHelpMap() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return Collections.unmodifiableMap(commandWordToHelp);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Map\u003cString, Parser\u003cCommand\u003e\u003e getCommandWordToParserMap() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return Collections.unmodifiableMap(commandWordToParser);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 7,
      "Lysire": 4,
      "chloelee767": 101,
      "mkeoliya": 26
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/CreateEditCopy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Contains functionality for \"copy-constructing\" {@code Student} and {@code Room}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * objects to deal with persistence of student and room allocation statuses that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * inhibits undo and redo functionality."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class CreateEditCopy {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Creates a new student instance with the same information"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * as the student it is copying from."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * @param studentToCopy student to copy from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * @return a new student instance with the same fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * as the student to copy from"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static Student createCopiedStudent(Student studentToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assert studentToCopy !\u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Name copiedName \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Phone copiedPhone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Email copiedEmail \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Faculty copiedFaculty \u003d studentToCopy.getFaculty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        StudentId copiedStudentId \u003d studentToCopy.getStudentId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Set\u003cTag\u003e copiedTags \u003d studentToCopy.getTags();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Student(copiedName, copiedPhone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                copiedEmail, copiedFaculty, copiedStudentId, copiedTags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Creates a new room instance with the same information"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * as the room it is copying from."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * @param roomToCopy the room to copy from"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * @return a new room instance with the same fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * as the room to copy from"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static Room createCopiedRoom(Room roomToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assert roomToCopy !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Floor copiedFloor \u003d roomToCopy.getFloor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        RoomNumber copiedRoomNumber \u003d roomToCopy.getRoomNumber();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        RoomType copiedRoomType \u003d roomToCopy.getRoomType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Set\u003cTag\u003e copiedTags \u003d roomToCopy.getTags();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Room(copiedFloor, copiedRoomNumber, copiedRoomType, copiedTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 2,
      "Lysire": 61
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns the ResiReg."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @see seedu.resireg.model.Model#getResiReg()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    ReadOnlyResiReg getResiReg();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /** Returns the current semester ResiReg is working with */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Semester getSemester();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of rooms */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of allocations */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    ObservableList\u003cAllocation\u003e getFilteredAllocationList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns the user prefs\u0027 ResiReg file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Path getResiRegFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 4,
      "JingYenLoh": 10,
      "Lysire": 4,
      "-": 36,
      "mkeoliya": 8
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.logic.parser.ResiRegParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private ResiRegParser resiRegParser; // mutable, to allow for dynamic aliasing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiRegParser \u003d new CommandMapper(model.getCommandWordAliases()).getParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Command command \u003d resiRegParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        commandResult \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            storage.saveResiReg(model.getResiReg());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ReadOnlyResiReg getResiReg() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return model.getResiReg();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return model.getSemester();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return model.getFilteredRoomList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public ObservableList\u003cAllocation\u003e getFilteredAllocationList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return model.getFilteredAllocationList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return model.getResiRegFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 6,
      "JingYenLoh": 17,
      "Lysire": 6,
      "-": 58,
      "mkeoliya": 13
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/AddAliasCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Adds a student to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class AddAliasCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.ADD_ALIAS_COMMAND.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New alias added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ALIAS \u003d \"This alias already exists in ResiReg\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"Adds an alias to ResiReg.\\n\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + PREFIX_COMMAND + \"COMMAND \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + PREFIX_ALIAS + \"ALIAS \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final CommandWordAlias toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public AddAliasCommand(CommandWordAlias alias) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        toAdd \u003d alias;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (model.hasCommandWordAlias(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ALIAS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        model.addCommandWordAlias(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            || (other instanceof AddAliasCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddAliasCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 2,
      "mkeoliya": 54
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Adds a student to ResiReg."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.ADD_COMMAND.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s (%2$s)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in ResiReg\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"Adds a student to ResiReg.\\n\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + PREFIX_STUDENT_ID + \"STUDENT_ID \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + PREFIX_FACULTY + \"FACULTY \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + PREFIX_STUDENT_ID + \"E0123456 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@u.nus.edu \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + PREFIX_FACULTY + \"FASS \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public AddCommand(Student student) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.saveStateResiReg();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName().fullName, toAdd.getStudentId().value));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 4,
      "Lysire": 1,
      "-": 37,
      "mkeoliya": 26,
      "chloelee767": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/AllocateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.logic.CreateEditCopy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Adds a student to ResiReg."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class AllocateCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.ALLOCATE_COMMAND.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Allocates a student to a room.\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    + PREFIX_STUDENT_INDEX + \"STUDENT INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    + PREFIX_ROOM_INDEX + \"ROOM INDEX\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    + PREFIX_STUDENT_INDEX + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + PREFIX_ROOM_INDEX + \"1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room %1$s allocated to %2$s.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_FOUND \u003d \"This room does not exist in ResiReg\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_FOUND \u003d \"This student is not registered in ResiReg\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_ALLOCATION_EXISTS \u003d \"This allocation has already been registered in ResiReg.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final Index roomIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param studentIndex of the student in the filtered student list to allocate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param roomIndex of the room in the filtered room list to be allocated to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates an AllocateCommand to allocate the specified {@code Student} to {@code Room}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public AllocateCommand(Index studentIndex, Index roomIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(studentIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(roomIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.roomIndex \u003d roomIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cStudent\u003e lastShownListStudent \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cRoom\u003e lastShownListRoom \u003d model.getFilteredRoomList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownListStudent.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } else if (roomIndex.getZeroBased() \u003e\u003d lastShownListRoom.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Student studentToAllocate \u003d lastShownListStudent.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Room roomToAllocate \u003d lastShownListRoom.get(roomIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Allocation toAllocate \u003d new Allocation(roomToAllocate.getFloor(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                roomToAllocate.getRoomNumber(), studentToAllocate.getStudentId());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!model.hasStudent(studentToAllocate)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(MESSAGE_STUDENT_NOT_FOUND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } else if (!model.hasRoom(roomToAllocate)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(MESSAGE_ROOM_NOT_FOUND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } else if (model.hasAllocation(toAllocate)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(MESSAGE_ALLOCATION_EXISTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Student studentToEdit \u003d CreateEditCopy.createCopiedStudent(studentToAllocate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Room roomToEdit \u003d CreateEditCopy.createCopiedRoom(roomToAllocate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.setStudent(studentToAllocate, studentToEdit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.setRoom(roomToAllocate, roomToEdit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        model.addAllocation(toAllocate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.saveStateResiReg();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, roomToAllocate.getRoomLabel(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            studentToAllocate.getName().fullName));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                || (other instanceof AllocateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((AllocateCommand) other).studentIndex)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 roomIndex.equals(((AllocateCommand) other).roomIndex));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 80,
      "JingYenLoh": 6,
      "Lysire": 7,
      "mkeoliya": 4,
      "chloelee767": 4
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The current semester has been archived!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \"Archives the current semester data into a file, and starts the new semester.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ArchiveCommand.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // Create the new semester"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ReadOnlyResiReg resiReg \u003d model.getResiReg();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg newResiReg \u003d ResiReg.getNextSemesterResiReg(resiReg);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // Create the new semester. Note that this step has to be done before updating the model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // as it will affect the local copy of ReadOnlyResiReg we have created."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            storage.archiveResiReg(resiReg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            logger.severe(\"------------- Unable to archive the semester  -------------\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new CommandException(\"Unable to archive the semester\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // Update the model, after keeping an archive of the previous semester."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        model.setResiReg(newResiReg);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        model.saveStateResiReg();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 47
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Clears the ResiReg input panel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.CLEAR_COMMAND.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"ResiReg has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD, \"Clears all students and rooms.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        model.setResiReg(new ResiReg());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.saveStateResiReg();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 5,
      "Lysire": 1,
      "-": 15,
      "mkeoliya": 5
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param storage {@code Storage} which the command can update."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public abstract CommandResult execute(Model model, Storage storage) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "-": 16,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void displayResult(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 4,
      "-": 70,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/CommandWordEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public enum CommandWordEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ADD_COMMAND(\"add\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    CLEAR_COMMAND(\"clear\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    DELETE_COMMAND(\"delete\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    EDIT_COMMAND(\"edit\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    EXIT_COMMAND(\"exit\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    FIND_COMMAND(\"find\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    HELP_COMMAND(\"help\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    LIST_COMMAND(\"students\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    LIST_ROOM_COMMAND(\"rooms\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ALLOCATE_COMMAND(\"allocate\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    DEALLOCATE_COMMAND(\"deallocate\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    REALLOCATE_COMMAND(\"reallocate\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    REDO_COMMAND(\"redo\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    UNDO_COMMAND(\"undo\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ADD_ALIAS_COMMAND(\"alias\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    DELETE_ALIAS_COMMAND(\"dealias\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    LIST_ALIAS_COMMAND(\"aliases\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    TOGGLE_MAIN_PANEL_COMMAND(\"toggleview\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private String commandWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    CommandWordEnum(String commandWord) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 31,
      "chloelee767": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/DeallocateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Deallocates a room to a student to ResiReg."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class DeallocateCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.DEALLOCATE_COMMAND.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD, \"Deallocates a student from a room.\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Parameters: \" + PREFIX_STUDENT_INDEX + \"STUDENT INDEX\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_STUDENT_INDEX + \"1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room %1$s deallocated for %2$s.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_FOUND \u003d \"This student is not registered in ResiReg\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_ALLOCATED \u003d \"This student has not been allocated a room.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param studentIndex of the student in the filtered student list to deallocate a room from"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates an DeallocateCommand to deallocate the specified {@code Student}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public DeallocateCommand(Index studentIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(studentIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cStudent\u003e lastShownListStudent \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cAllocation\u003e lastShownListAllocation \u003d model.getFilteredAllocationList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownListStudent.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Student studentToDeallocate \u003d lastShownListStudent.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Allocation toDeallocate \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Allocation allocation : lastShownListAllocation) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            if (studentToDeallocate.getStudentId().equals(allocation.getStudentId())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                toDeallocate \u003d allocation;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!model.hasStudent(studentToDeallocate)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(MESSAGE_STUDENT_NOT_FOUND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } else if (toDeallocate \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(MESSAGE_STUDENT_NOT_ALLOCATED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        model.removeAllocation(toDeallocate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.saveStateResiReg();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                toDeallocate.getFloor().toString() + \u0027:\u0027 + toDeallocate.getRoomNumber(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                studentToDeallocate.getName().fullName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                || (other instanceof DeallocateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((DeallocateCommand) other).studentIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 71,
      "JingYenLoh": 3,
      "Lysire": 2,
      "mkeoliya": 3,
      "chloelee767": 4
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/DeleteAliasCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Adds a student to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DeleteAliasCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.DELETE_ALIAS_COMMAND.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The alias %1$s has been deleted.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_INVALID_ALIAS \u003d \"This alias doesn\u0027t exist.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"Deletes an alias from ResiReg.\\n\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + PREFIX_COMMAND + \"COMMAND \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + PREFIX_ALIAS + \"ALIAS \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final CommandWordAlias toDelete;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DeleteAliasCommand(CommandWordAlias alias) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        toDelete \u003d alias;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!model.hasCommandWordAlias(toDelete)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ALIAS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        model.deleteCommandWordAlias(toDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            || (other instanceof DeleteAliasCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u0026\u0026 toDelete.equals(((DeleteAliasCommand) other).toDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 2,
      "mkeoliya": 55
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Deletes a student identified using its displayed index from ResiReg."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.DELETE_COMMAND.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_ROOM_ALLOCATION_EXISTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            \"Student %1$s currently has a room! Deallocate student first!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Deletes the student identified by the index number used in the displayed student list.\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Parameters: INDEX (must be a positive integer)\\nExample: \" + COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cAllocation\u003e lastShownAllocationList \u003d model.getFilteredAllocationList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (model.isAllocated(studentToDelete)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_ALLOCATION_EXISTS, studentToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.saveStateResiReg();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 9,
      "JingYenLoh": 3,
      "Lysire": 1,
      "-": 34,
      "mkeoliya": 12,
      "chloelee767": 4
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Edits the details of an existing student in ResiReg."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.EDIT_COMMAND.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in ResiReg.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Edits the details of the student identified by the index number used in the displayed student list.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + \"Existing values will be overwritten by the input values.\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    + \"[\" + PREFIX_STUDENT_ID + \"STUDENT ID] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    + \"[\" + PREFIX_FACULTY + \"FACULTY] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + PREFIX_EMAIL + \"johndoe@example.com\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cAllocation\u003e lastShownAllocationList \u003d model.getFilteredAllocationList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (model.isAllocated(studentToEdit)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            for (Allocation allocation : lastShownAllocationList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                if (allocation.isRelatedTo(studentToEdit)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    Allocation editedAllocation \u003d new Allocation(allocation.getFloor(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                            allocation.getRoomNumber(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                            editedStudent.getStudentId());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    model.setAllocation(allocation, editedAllocation);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    // model.updateFilteredAllocationList(PREDICATE_SHOW_ALL_ALLOCATIONS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.saveStateResiReg();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Faculty updatedFaculty \u003d editStudentDescriptor.getFaculty().orElse(studentToEdit.getFaculty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        StudentId updatedStudentId \u003d editStudentDescriptor.getStudentId().orElse(studentToEdit.getStudentId());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new Student(updatedName, updatedPhone, updatedEmail, updatedFaculty, updatedStudentId, updatedTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private Faculty faculty;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private StudentId studentId;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            setFaculty(toCopy.faculty);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            setStudentId(toCopy.studentId);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, faculty, studentId, tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setFaculty(Faculty faculty) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public Optional\u003cFaculty\u003e getFaculty() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return Optional.ofNullable(faculty);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setStudentId(StudentId studentId) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public Optional\u003cStudentId\u003e getStudentId() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return Optional.ofNullable(studentId);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return getStudentId().equals(e.getStudentId())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u0026\u0026 getFaculty().equals(e.getFaculty())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 13,
      "JingYenLoh": 4,
      "Lysire": 1,
      "mkeoliya": 228,
      "chloelee767": 9
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.EXIT_COMMAND.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting ResiReg as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD, \"Closes ResiReg.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "-": 14,
      "mkeoliya": 3,
      "chloelee767": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Finds and lists all students in ResiReg whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.FIND_COMMAND.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Finds all students whose names contain any of the specified keywords (case-insensitive) and displays\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + \" them as a list with index numbers.\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Parameters: KEYWORD [MORE_KEYWORDS]...\\nExample: \" + COMMAND_WORD + \" alice bob charlie\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "-": 29,
      "mkeoliya": 7,
      "chloelee767": 4
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/Help.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Encapsulates help messages describing the function and syntax for a Command. These messages are"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * displayed by the {@link HelpCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Help {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private final String summary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private final String longerDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a new instance of Help for a Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param commandWord Command word."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param summary Summary of what the Command does."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param longerDescription Longer description of Command, including any parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    Help(String commandWord, String summary, String longerDescription) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.longerDescription \u003d longerDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    Help(String commandWord, String summary) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this(commandWord, summary, \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns a single sentence summary of what the Command does. The summary will be prefixed by the command word."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return Summary message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public final String getSummary() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return commandWord + \": \" + summary;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns the full help message for the Command, which is a concatenation of the summary and the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * longer description."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return Full help message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public final String getFullMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return getSummary() + \" \" + longerDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 47
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.CommandMapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Displays help message for a command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.HELP_COMMAND.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Gets help for a command or ResiReg in general.\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"When used with the command name (eg. help exit), it displays the help message for that command.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + \" When used without any arguments, it displays a summary of all the commands.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Cannot show help for %s: \" + Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String MESSAGE_GENERAL_HELP \u003d \"Commands available:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            // summary for commands available (excluding help command), in alphabetical order"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + new CommandMapper(new ArrayList\u003c\u003e()).getCommandWordToHelpMap().entrySet().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    .sorted(Map.Entry.comparingByKey())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    .filter(entry -\u003e !entry.getKey().equals(HelpCommand.COMMAND_WORD))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    .map(entry -\u003e entry.getValue().getSummary())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    .collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            // full help message for help command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + \"\\n\\n\" + HELP.getFullMessage() + \"\\n\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            // user guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + \"You can also refer to our user guide at: https://ay2021s1-cs2103-t16-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static final Map\u003cString, Help\u003e commandWordToHelpMap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new CommandMapper(new ArrayList\u003c\u003e()).getCommandWordToHelpMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a HelpCommand to display help for the specified command. If no command is given, a summary of all"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * the commands available is shown."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param input Command word of the command to display help for."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public HelpCommand(String input) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.input \u003d input.strip();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return new CommandResult(MESSAGE_GENERAL_HELP);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (commandWordToHelpMap.containsKey(input)) { // print full help message for specific command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return new CommandResult(commandWordToHelpMap.get(input).getFullMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_UNKNOWN_COMMAND, input));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 2,
      "-": 12,
      "mkeoliya": 6,
      "chloelee767": 46
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ListAliasCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Lists all students in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class ListAliasCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.LIST_ALIAS_COMMAND.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the command-alias pairs defined so far: \\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_EMPTY_ALIAS \u003d \"No command-alias pairs have been defined so far.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD, \"Lists all command-alias pairs.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (model.getCommandWordAliases().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_ALIAS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getCommandWordAliasesAsString()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 2,
      "mkeoliya": 28
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Lists all students in ResiReg to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.LIST_COMMAND.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD, \"Lists all students.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new ToggleCommandResult(MESSAGE_SUCCESS, TabView.STUDENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 4,
      "mkeoliya": 21,
      "chloelee767": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ListRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_FLOOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.ModelPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Lists rooms in ResiReg to the user, optionally filtered by some criteria."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class ListRoomCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.LIST_ROOM_COMMAND.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String COMMAND_VACANT_FLAG \u003d \"vacant\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String COMMAND_ALLOCATED_FLAG \u003d \"allocated\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all rooms\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String MESSAGE_FILTERED_SUCCESS \u003d \"Listed rooms filtered by given criteria\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Lists all rooms within the system, optionally filtered by some criteria.\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + \"[--\" + COMMAND_VACANT_FLAG + \" | --\" + COMMAND_ALLOCATED_FLAG + \"] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + \"[\" + PREFIX_ROOM_FLOOR + \"FLOOR]... \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + \"[\" + PREFIX_ROOM_NUMBER + \"ROOM_NUMBER]... \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + \"[\" + PREFIX_ROOM_TYPE + \"ROOM_TYPE]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + \" --\" + COMMAND_VACANT_FLAG + \" \" + PREFIX_ROOM_FLOOR + \"10 \" + PREFIX_ROOM_FLOOR + \"11\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private final RoomFilter filter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public ListRoomCommand(RoomFilter filter) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        model.updateFilteredRoomList(filter.getRoomPredicate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String message \u003d filter.equals(new RoomFilter()) ? MESSAGE_SUCCESS : MESSAGE_FILTERED_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new ToggleCommandResult(message, TabView.ROOMS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                || (other instanceof ListRoomCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u0026\u0026 filter.equals(((ListRoomCommand) other).filter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Only used internally in {@Code RoomFilter}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private enum VacancyFilter {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ALL,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ALLOCATED,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        VACANT"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Stores the criteria by which to filter the list of Rooms displayed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static class RoomFilter {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private Set\u003cRoomNumber\u003e validRoomNumbers;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private Set\u003cFloor\u003e validFloors;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private Set\u003cRoomType\u003e validRoomTypes;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private VacancyFilter vacancyFilter;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * Creates a new RoomFilter which will show all Rooms."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public RoomFilter() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            validRoomNumbers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            validFloors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            validRoomTypes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            vacancyFilter \u003d VacancyFilter.ALL;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * Adds the given room numbers to the collection of valid room numbers to allow."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * @param numbers Room numbers."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void addRoomNumbers(Collection\u003cRoomNumber\u003e numbers) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            validRoomNumbers.addAll(numbers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * Adds the given floors to the collection of valid floors to allow."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * @param floors Room floors."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void addFloors(Collection\u003cFloor\u003e floors) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            validFloors.addAll(floors);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * Adds the given room types to the collection of valid room types to allow."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * @param types Room types."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void addRoomTypes(Collection\u003cRoomType\u003e types) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            validRoomTypes.addAll(types);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * Makes the filter show only rooms which have been allocated to a student."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void onlyAllocated() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            vacancyFilter \u003d VacancyFilter.ALLOCATED;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * Makes the filter show only vacant rooms."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void onlyVacant() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            vacancyFilter \u003d VacancyFilter.VACANT;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * Returns predicate to apply based on the given collection. If the collection is empty, the predicate"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * will always return true, otherwise, only allow attributes in the collection are allowed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * @param collection Collection of valid room attributes."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private \u003cT\u003e Predicate\u003cT\u003e getPredicateFromCollection(Collection\u003cT\u003e collection) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return t -\u003e collection.isEmpty() || collection.contains(t);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * Returns predicate to use to filter rooms."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ModelPredicate\u003cRoom\u003e getRoomPredicate() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Predicate\u003cRoomNumber\u003e roomNumberPredicate \u003d getPredicateFromCollection(validRoomNumbers);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Predicate\u003cFloor\u003e floorPredicate \u003d getPredicateFromCollection(validFloors);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Predicate\u003cRoomType\u003e roomTypePredicate \u003d getPredicateFromCollection(validRoomTypes);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ModelPredicate\u003cRoom\u003e vacancyPredicate \u003d (room, model) -\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                switch (vacancyFilter) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                case ALL:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                case ALLOCATED:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    return model.isAllocated(room);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                case VACANT:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    return !model.isAllocated(room);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    assert false : \"Unexpected type of vacancy filter in RoomFilter\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            };"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return (room, model) -\u003e roomNumberPredicate.test(room.getRoomNumber())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u0026\u0026 floorPredicate.test(room.getFloor())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u0026\u0026 roomTypePredicate.test(room.getRoomType())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u0026\u0026 vacancyPredicate.test(room, model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (!(other instanceof RoomFilter)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            RoomFilter otherFilter \u003d (RoomFilter) other;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return vacancyFilter.equals(otherFilter.vacancyFilter)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u0026\u0026 validFloors.equals(otherFilter.validFloors)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u0026\u0026 validRoomNumbers.equals(otherFilter.validRoomNumbers)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u0026\u0026 validRoomTypes.equals(otherFilter.validRoomTypes);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 18,
      "Lysire": 17,
      "chloelee767": 146,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ReallocateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Adds a student to ResiReg."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class ReallocateCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.REALLOCATE_COMMAND.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD, \"Reallocates a student to a room.\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Parameters: \" + PREFIX_STUDENT_INDEX + \"STUDENT INDEX \" + PREFIX_ROOM_INDEX + \"ROOM INDEX\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_STUDENT_INDEX + \"1 \" + PREFIX_ROOM_INDEX + \"1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Student %1$s has been reallocated to Room %2$s.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_FOUND \u003d \"This room does not exist in ResiReg\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_FOUND \u003d \"This student is not registered in ResiReg\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_STUDENT_NOT_ALLOCATED \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            \"This student has not been allocated a room. Please use allocate instead.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String MESSAGE_ROOM_ALREADY_ALLOCATED \u003d \"This room has already been allocated to a student.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final Index roomIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param studentIndex of the student in the filtered student list to allocate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param roomIndex of the room in the filtered room list to be allocated to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates an ReallocateCommand to allocate the specified {@code Student} to {@code Room}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public ReallocateCommand(Index studentIndex, Index roomIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(studentIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(roomIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.roomIndex \u003d roomIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cStudent\u003e lastShownListStudent \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cRoom\u003e lastShownListRoom \u003d model.getFilteredRoomList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cAllocation\u003e lastShownListAllocation \u003d model.getFilteredAllocationList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownListStudent.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } else if (roomIndex.getZeroBased() \u003e\u003d lastShownListRoom.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Student studentToReallocate \u003d lastShownListStudent.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Room roomToReallocate \u003d lastShownListRoom.get(roomIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Allocation toReallocate \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Allocation allocation : lastShownListAllocation) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            if (studentToReallocate.getStudentId().equals(allocation.getStudentId())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                toReallocate \u003d allocation;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!model.hasStudent(studentToReallocate)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(MESSAGE_STUDENT_NOT_FOUND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } else if (!model.hasRoom(roomToReallocate)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(MESSAGE_ROOM_NOT_FOUND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } else if (toReallocate \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new CommandException(MESSAGE_STUDENT_NOT_ALLOCATED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Allocation editedAllocation \u003d new Allocation(roomToReallocate.getFloor(), roomToReallocate.getRoomNumber(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        studentToReallocate.getStudentId());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        model.setAllocation(toReallocate, editedAllocation);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.saveStateResiReg();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, studentToReallocate.getName().fullName,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            roomToReallocate.getRoomLabel()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                || (other instanceof ReallocateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((ReallocateCommand) other).studentIndex)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 roomIndex.equals(((ReallocateCommand) other).roomIndex));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 87,
      "JingYenLoh": 3,
      "Lysire": 2,
      "mkeoliya": 4,
      "chloelee767": 4
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Reverts the {@code model}\u0027s ResiReg to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.REDO_COMMAND.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more actions to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD, \"Redo a previous command.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!model.canRedoResiReg()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.redoResiReg();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 2,
      "Lysire": 28,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/TabView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Enum representing the information ResiReg is supposed to display in the Results panel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public enum TabView {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    STUDENTS,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    ROOMS"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 9
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ToggleCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author CornCobs-reused"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "// Reused from"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "// https://github.com/AY1920S2-CS2103-W15-2/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "// with minor modifications"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToggleCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TabView tabView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code ToggleCommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * that will toggle the UI to the given TabView."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToggleCommandResult(String feedbackToUser, TabView tabView) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabView \u003d tabView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayResult(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.handleToggle(tabView);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other instanceof ToggleCommandResult"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tabView \u003d\u003d ((ToggleCommandResult) other).tabView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ToggleMainPanelCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Toggles the UI layout betweenn a tabbed view and a side-by-side split view."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class ToggleMainPanelCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.TOGGLE_MAIN_PANEL_COMMAND.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched main panel layout.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \"Toggles the main panel layout between a tabbed view and a split view.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new ToggleMainPanelCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 21
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/ToggleMainPanelCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class ToggleMainPanelCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Constructs a {@code ToggleCommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * that will toggle the UI layout between a tabbed layout and a side-by-side split view."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public ToggleMainPanelCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void displayResult(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        mainWindow.toggleMainPanelLayout();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 19
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Reverts the {@code model}\u0027s ResiReg to its previous state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWordEnum.UNDO_COMMAND.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more actions to undo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Help HELP \u003d new Help(COMMAND_WORD, \"Undo a previous command\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!model.canUndoResiReg()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.undoResiReg();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 2,
      "Lysire": 27,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/AddAliasCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddAliasCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.Alias;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class AddAliasCommandParser implements Parser\u003cAddAliasCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public AddAliasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_COMMAND, PREFIX_ALIAS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COMMAND, PREFIX_ALIAS)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                AddAliasCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWord commandWord \u003d ParserUtil.parseCommandWord(argMultimap.getValue(PREFIX_COMMAND).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Alias alias \u003d ParserUtil.parseAlias(argMultimap.getValue(PREFIX_ALIAS).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias commandWordAlias \u003d new CommandWordAlias(commandWord, alias);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new AddAliasCommand(commandWordAlias);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 40,
      "chloelee767": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_FACULTY,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    PREFIX_STUDENT_ID, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_FACULTY, PREFIX_STUDENT_ID,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Faculty faculty \u003d ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        StudentId studentId \u003d ParserUtil.parseStudentId(argMultimap.getValue(PREFIX_STUDENT_ID).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student student \u003d new Student(name, phone, email, faculty, studentId, tagList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new AddCommand(student);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "mkeoliya": 23,
      "chloelee767": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/AllocateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.commands.AllocateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class AllocateCommandParser implements Parser\u003cAllocateCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public AllocateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT_INDEX, PREFIX_ROOM_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT_INDEX, PREFIX_ROOM_INDEX)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            Index studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_INDEX).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            Index roomIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_ROOM_INDEX).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return new AllocateCommand(studentIndex, roomIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateCommand.HELP.getFullMessage()), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 48,
      "chloelee767": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // students"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Prefix PREFIX_FACULTY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_ID \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_INDEX \u003d new Prefix(\"si/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // rooms"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Prefix PREFIX_ROOM_INDEX \u003d new Prefix(\"ri/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Prefix PREFIX_ROOM_FLOOR \u003d new Prefix(\"floor/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Prefix PREFIX_ROOM_NUMBER \u003d new Prefix(\"number/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Prefix PREFIX_ROOM_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Prefix for --style keywords eg. --vacant"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final Prefix PREFIX_KEYWORD \u003d new Prefix(\"--\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Prefix PREFIX_COMMAND \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Prefix PREFIX_ALIAS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 2,
      "-": 12,
      "mkeoliya": 5,
      "chloelee767": 10
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/DeallocateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.commands.DeallocateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Parses input arguments and creates a new DeallocateCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class DeallocateCommandParser implements Parser\u003cDeallocateCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeallocateCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * and returns an DeallocateCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public DeallocateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT_INDEX)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    DeallocateCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            Index studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_INDEX).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return new DeallocateCommand(studentIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeallocateCommand.HELP.getFullMessage()), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 47,
      "chloelee767": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/DeleteAliasCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.DeleteAliasCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.Alias;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DeleteAliasCommandParser implements Parser\u003cDeleteAliasCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DeleteAliasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_COMMAND, PREFIX_ALIAS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COMMAND, PREFIX_ALIAS)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                DeleteAliasCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWord commandWord \u003d ParserUtil.parseCommandWord(argMultimap.getValue(PREFIX_COMMAND).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Alias alias \u003d ParserUtil.parseAlias(argMultimap.getValue(PREFIX_ALIAS).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias commandWordAlias \u003d new CommandWordAlias(commandWord, alias);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new DeleteAliasCommand(commandWordAlias);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 40,
      "chloelee767": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.HELP.getFullMessage()), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "mkeoliya": 5,
      "chloelee767": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_FACULTY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    PREFIX_STUDENT_ID, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.HELP.getFullMessage()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            editStudentDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FACULTY).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            editStudentDescriptor.setFaculty(ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STUDENT_ID).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            editStudentDescriptor.setStudentId(ParserUtil.parseStudentId(argMultimap"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .getValue(PREFIX_STUDENT_ID).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new EditCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "mkeoliya": 28,
      "chloelee767": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "mkeoliya": 5,
      "chloelee767": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/ListRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_FLOOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.logic.commands.ListRoomCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ListRoomCommand.RoomFilter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class ListRoomCommandParser implements Parser\u003cListRoomCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static final String MESSAGE_INVALID_COMMAND \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ListRoomCommand.HELP.getFullMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ListRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROOM_FLOOR,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                PREFIX_ROOM_NUMBER, PREFIX_ROOM_TYPE, PREFIX_KEYWORD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilter();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // don\u0027t allow both --vacant and --allocated to be given"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_KEYWORD).size() \u003e 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // handle --vacant and --allocated"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (argMultimap.getValue(PREFIX_KEYWORD).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            switch (argMultimap.getValue(PREFIX_KEYWORD).get()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            case ListRoomCommand.COMMAND_ALLOCATED_FLAG:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                filter.onlyAllocated();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            case ListRoomCommand.COMMAND_VACANT_FLAG:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                filter.onlyVacant();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROOM_FLOOR).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            filter.addFloors(ParserUtil.parseCollection(argMultimap.getAllValues(PREFIX_ROOM_FLOOR),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    ParserUtil::parseFloor));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROOM_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            filter.addRoomNumbers(ParserUtil.parseCollection(argMultimap.getAllValues(PREFIX_ROOM_NUMBER),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    ParserUtil::parseRoomNumber));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROOM_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            filter.addRoomTypes(ParserUtil.parseCollection(argMultimap.getAllValues(PREFIX_ROOM_TYPE),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    ParserUtil::parseRoomType));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 17,
      "chloelee767": 43
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.Alias;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Parses a {@code String faculty} into a {@code Faculty}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws ParseException if the given {@code faculty} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static Faculty parseFaculty(String faculty) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(faculty);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String trimmedFaculty \u003d faculty.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!Faculty.isValidFaculty(trimmedFaculty)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new ParseException(Faculty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new Faculty(trimmedFaculty);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Parses a {@code String studentId} into a {@code StudentId}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws ParseException if the given {@code studentId} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static StudentId parseStudentId(String studentId) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String trimmedStudentId \u003d studentId.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!StudentId.isValidStudentId(trimmedStudentId)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new ParseException(StudentId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new StudentId(trimmedStudentId);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parses {@code String floor} into a {@code floor}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Leading and training whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @throws ParseException if the given {@code floor} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static Floor parseFloor(String floor) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(floor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String trimmedFloor \u003d floor.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!Floor.isValidFloor(trimmedFloor)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new ParseException(Floor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Floor(trimmedFloor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parses {@code String roomNumber} into a {@code roomNumber}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Leading and training whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @throws ParseException if the given {@code roomNumber} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static RoomNumber parseRoomNumber(String roomNumber) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(roomNumber);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String trimmedRoomNumber \u003d roomNumber.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (!RoomNumber.isValidRoomNumber(trimmedRoomNumber)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new ParseException(RoomNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new RoomNumber(trimmedRoomNumber);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Parses a {@code String commandWord} into a {@code CommandWord}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws ParseException if the given {@code commandWord} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static CommandWord parseCommandWord(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(commandWord);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String trimmedCommandWord \u003d commandWord.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!CommandWord.isValidCommandWord(trimmedCommandWord)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new ParseException(CommandWord.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandWord(trimmedCommandWord);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Parses a {@code String alias} into a {@code Alias}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws ParseException if the given {@code alias} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static Alias parseAlias(String alias) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String trimmedAlias \u003d alias.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!Alias.isValidAlias(trimmedAlias)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new ParseException(Alias.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new Alias(trimmedAlias);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Parses {@code String roomType} into a {@code RoomType}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Leading and training whitespaces will be trimmed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @throws ParseException if the given {@code roomType} is invalid."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static RoomType parseRoomType(String roomType) throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        requireNonNull(roomType);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String trimmedRoomType \u003d roomType.trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (!RoomType.isValidRoomType(trimmedRoomType)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new ParseException(RoomType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new RoomType(trimmedRoomType);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Parses a collection of strings to some other type using the given parser function."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param strings Strings to parse."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param parser Parser function which parses strings into objects of type T."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param \u003cT\u003e Type of output objects."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return Set of objects of type T."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @throws ParseException If any of the strings cannot be parsed to T."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static \u003cT\u003e Set\u003cT\u003e parseCollection(Collection\u003cString\u003e strings, ParserFunction\u003cT\u003e parser)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        requireNonNull(strings);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final Set\u003cT\u003e things \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (String s: strings) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            things.add(parser.parse(s));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return things;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public interface ParserFunction\u003cT\u003e {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        T parse(String string) throws ParseException;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 30,
      "-": 107,
      "mkeoliya": 64,
      "chloelee767": 52
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/ReallocateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.commands.ReallocateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Parses input arguments and creates a new ReallocateCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class ReallocateCommandParser implements Parser\u003cReallocateCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReallocateCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * and returns an ReallocateCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public ReallocateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT_INDEX, PREFIX_ROOM_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT_INDEX, PREFIX_ROOM_INDEX)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    ReallocateCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            Index studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_INDEX).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            Index roomIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_ROOM_INDEX).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return new ReallocateCommand(studentIndex, roomIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReallocateCommand.HELP.getFullMessage()), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 49,
      "chloelee767": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/ResiRegParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Parses user input in the format COMMAND_WORD ARGUMENTS, where COMMAND_WORD and ARGUMENTS are separated"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * by 1 or more spaces."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class ResiRegParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Map\u003cString, Parser\u003cCommand\u003e\u003e commandWordToParserMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates a new ResiRegParser which can parse the commands specified in the map given."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param commandWordToParserMap Mapping from command word to {@link Parser}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ResiRegParser(Map\u003cString, Parser\u003cCommand\u003e\u003e commandWordToParserMap) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.commandWordToParserMap \u003d commandWordToParserMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (commandWordToParserMap.containsKey(commandWord)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return commandWordToParserMap.get(commandWord).parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 3,
      "JingYenLoh": 3,
      "-": 33,
      "mkeoliya": 4,
      "chloelee767": 16
    }
  },
  {
    "path": "src/main/java/seedu/resireg/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@Code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    Predicate\u003cRoom\u003e PREDICATE_SHOW_ALL_ROOMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@Code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    Predicate\u003cAllocation\u003e PREDICATE_SHOW_ALL_ALLOCATIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns the user prefs\u0027 command aliases."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    List\u003cCommandWordAlias\u003e getCommandWordAliases();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns the user prefs\u0027 command aliases."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    String getCommandWordAliasesAsString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if a command alias with the same data as {@code target} exists"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * in user preferences."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    boolean hasCommandWordAlias(CommandWordAlias target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Deletes the given alias."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * The alias must exist in user prefs."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void deleteCommandWordAlias(CommandWordAlias target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Adds the given alias."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * {@code alias} must not already exist in user prefs."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void addCommandWordAlias(CommandWordAlias source);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns the user prefs\u0027 ResiReg file path."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Path getResiRegFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Sets the user prefs\u0027 ResiReg file path."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void setResiRegFilePath(Path resiRegFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Replaces ResiReg data with the data in {@code resiReg}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void setResiReg(ReadOnlyResiReg resiReg);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns a read-only copy of ResiReg data"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    ReadOnlyResiReg getResiReg();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * in ResiReg."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The student must exist in ResiReg."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code student} must not already exist in ResiReg."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code target} must exist in ResiReg."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * another existing student in ResiReg."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // \u003d\u003d\u003d ROOMS \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if a room with the same data as {@code room} exists in"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * ResiReg."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    boolean hasRoom(Room room);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Deletes the given room."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * The room must exist in ResiReg."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void deleteRoom(Room target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Adds the given room."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * {@code room} must already exist in ResiReg."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void addRoom(Room room);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Replaces the given room {@code target} with {@code editedRoom}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code target} must exist in ResiReg."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The room identity of {@code editedStudent} must not be the same as another"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * existing room in ResiReg."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void setRoom(Room target, Room editedRoom);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // \u003d\u003d\u003d ALLOCATIONS \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if an allocation with the {@code student} exists in ResiReg."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    boolean isAllocated(Student student);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if an allocation with the {@code room} exists in the address"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    boolean isAllocated(Room room);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if an allocation with the same identity as {@code allocation}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * exists in ResiReg."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    boolean hasAllocation(Allocation allocation);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Removes the given allocation."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The allocation must exist in ResiReg."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    void removeAllocation(Allocation target);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Adds the given allocation."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code allocation} must not already exist in ResiReg."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    void addAllocation(Allocation allocation);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Replaces the given allocation {@code target} with {@code editedAllocation}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code target} must exist in ResiReg."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The allocation identity of {@code editedAllocation} must not be the same as"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * another existing allocation in ResiReg."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    void setAllocation(Allocation target, Allocation editedAllocation);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /** Returns the current semester */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Semester getSemester();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns an unmodifiable view of the filtered room list"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns an unmodifiable view of the filtered allocation list"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    ObservableList\u003cAllocation\u003e getFilteredAllocationList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * If the predicate needs to use methods from {@code Model}, use"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * {@link Model#updateFilteredStudentList(ModelPredicate)} instead to ensure the list is automatically"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * updated when the {@code Model}\u0027s contents changes."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @see Model#updateFilteredStudentList(Predicate)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void updateFilteredStudentList(ModelPredicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Updates the filter of the filtered room list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * If the predicate needs to use methods from {@code Model}, use"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * {@link Model#updateFilteredRoomList(ModelPredicate)} instead to ensure the list is automatically"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * updated when the {@code Model}\u0027s contents changes."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @see Model#updateFilteredRoomList(Predicate)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void updateFilteredRoomList(ModelPredicate\u003cRoom\u003e predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Updates the filter of the filtered allocation list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * If the predicate needs to use methods from {@code Model}, use"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * {@link Model#updateFilteredAllocationList(ModelPredicate)} instead to ensure the list is automatically"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * updated when the {@code Model}\u0027s contents changes."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    void updateFilteredAllocationList(Predicate\u003cAllocation\u003e predicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @see Model#updateFilteredAllocationList(Predicate)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void updateFilteredAllocationList(ModelPredicate\u003cAllocation\u003e predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if the model has previous ResiReg states to restore."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    boolean canUndoResiReg();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if the model has undone ResiReg states to restore."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    boolean canRedoResiReg();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Restores the model\u0027s ResiReg to its previous state."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    void undoResiReg();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Restores the mode\u0027s ResiReg to its previously undone state."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    void redoResiReg();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Saves the current ResiReg state for undo/redo."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    void saveStateResiReg();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 38,
      "JingYenLoh": 61,
      "Lysire": 36,
      "-": 58,
      "mkeoliya": 61,
      "chloelee767": 24
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents the in-memory model of ResiReg data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final VersionedResiReg versionedResiReg;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private final ModelAwareFilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private final ModelAwareFilteredList\u003cRoom\u003e filteredRooms;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private final ModelAwareFilteredList\u003cAllocation\u003e filteredAllocations;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Initializes a ModelManager with the given ResiReg data and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ModelManager(ReadOnlyResiReg readOnlyResiReg, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        requireAllNonNull(readOnlyResiReg, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        logger.fine(\"Initializing with ResiReg data: \" + readOnlyResiReg + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        versionedResiReg \u003d new VersionedResiReg(readOnlyResiReg);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        semester \u003d versionedResiReg.getSemester();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filteredStudents \u003d new ModelAwareFilteredList\u003c\u003e(versionedResiReg.getStudentList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filteredRooms \u003d new ModelAwareFilteredList\u003c\u003e(versionedResiReg.getRoomList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filteredAllocations \u003d new ModelAwareFilteredList\u003c\u003e(versionedResiReg.getAllocationList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this(new ResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public List\u003cCommandWordAlias\u003e getCommandWordAliases() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return Collections.unmodifiableList(userPrefs.getCommandWordAliases());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String getCommandWordAliasesAsString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return userPrefs.getCommandWordAliasesAsString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean hasCommandWordAlias(CommandWordAlias target) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return userPrefs.hasAlias(target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void deleteCommandWordAlias(CommandWordAlias target) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userPrefs.deleteAlias(target);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void addCommandWordAlias(CommandWordAlias source) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userPrefs.addAlias(source);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return userPrefs.getResiRegFilePath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void setResiRegFilePath(Path resiRegFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        requireNonNull(resiRegFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        userPrefs.setResiRegFilePath(resiRegFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ResiReg \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void setResiReg(ReadOnlyResiReg resiReg) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        versionedResiReg.resetData(resiReg);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ReadOnlyResiReg getResiReg() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return versionedResiReg;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utils  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private void refilterLists() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filteredStudents.refilter();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filteredRooms.refilter();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filteredAllocations.refilter();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return versionedResiReg.hasStudent(student);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.removeStudent(target);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.addStudent(student);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Room \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireAllNonNull(target, editedRoom);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        versionedResiReg.setRoom(target, editedRoom);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return versionedResiReg.hasRoom(room);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void deleteRoom(Room target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        versionedResiReg.removeRoom(target);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void addRoom(Room room) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        versionedResiReg.addRoom(room);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Allocation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean isAllocated(Student student) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return versionedResiReg.isAllocated(student);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if an allocation relating to {@code room} exists in ResiReg."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean isAllocated(Room room) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return versionedResiReg.isAllocated(room);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean hasAllocation(Allocation allocation) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(allocation);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return versionedResiReg.hasAllocation(allocation);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void removeAllocation(Allocation target) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        versionedResiReg.removeAllocation(target);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void addAllocation(Allocation allocation) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(allocation);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        versionedResiReg.addAllocation(allocation);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void setAllocation(Allocation target, Allocation editedAllocation) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireAllNonNull(target, editedAllocation);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        versionedResiReg.setAllocation(target, editedAllocation);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code versionedResiReg}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return filteredStudents.getObservableList();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void updateFilteredStudentList(ModelPredicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Room List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Room} backed by the internal list of"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code versionedResiReg}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return filteredRooms.getObservableList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public ObservableList\u003cAllocation\u003e getFilteredAllocationList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return filteredAllocations.getObservableList();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        filteredRooms.setPredicate(predicate);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void updateFilteredRoomList(ModelPredicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filteredRooms.setPredicate(predicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void updateFilteredAllocationList(Predicate\u003cAllocation\u003e predicate) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        filteredAllocations.setPredicate(predicate);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void updateFilteredAllocationList(ModelPredicate\u003cAllocation\u003e predicate) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filteredAllocations.setPredicate(predicate);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean canUndoResiReg() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return versionedResiReg.canUndo();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean canRedoResiReg() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return versionedResiReg.canRedo();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void undoResiReg() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.undo();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void redoResiReg() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.redo();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        refilterLists();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void saveStateResiReg() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.save();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return versionedResiReg.equals(other.versionedResiReg)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u0026\u0026 filteredRooms.equals(other.filteredRooms)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u0026\u0026 filteredAllocations.equals(other.filteredAllocations);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Essentially a FilteredList which allows predicates that use methods from the {@code Model}. This class"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * contains a useful method to refilter the list after the state of the model or any of the elements in the"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * underlying {@code ObservableList} have changed."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private class ModelAwareFilteredList\u003cT\u003e {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private final FilteredList\u003cT\u003e filteredList;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private ModelPredicate\u003cT\u003e modelPredicate;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ModelAwareFilteredList(ObservableList\u003cT\u003e list) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            filteredList \u003d new FilteredList\u003c\u003e(list);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            setPredicate((t, model) -\u003e true);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        void setPredicate(ModelPredicate\u003cT\u003e predicate) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            modelPredicate \u003d predicate;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            refilter();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        void setPredicate(Predicate\u003cT\u003e predicate) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            setPredicate((t, model) -\u003e predicate.test(t));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         * Refilter the list in case any elements in the list or the state of the model has changed."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "         */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        void refilter() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            filteredList.setPredicate(t -\u003e modelPredicate.test(t, ModelManager.this));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ObservableList\u003cT\u003e getObservableList() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return filteredList;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (!(obj instanceof ModelAwareFilteredList)) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return filteredList.equals(((ModelAwareFilteredList\u003c?\u003e) obj).filteredList);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 50,
      "JingYenLoh": 25,
      "Lysire": 52,
      "-": 105,
      "mkeoliya": 74,
      "chloelee767": 95
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/ModelPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * See any one of the following:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * @see Model#updateFilteredRoomList(ModelPredicate)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * @see Model#updateFilteredStudentList(ModelPredicate)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * @see Model#updateFilteredAllocationList(ModelPredicate)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public interface ModelPredicate\u003cT\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    boolean test(T t, Model model);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 12
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/ReadOnlyResiReg.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Unmodifiable view of ResiReg"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public interface ReadOnlyResiReg {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns the semester that this view is mapped to."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Semester getSemester();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns a String representation of the semester that this view is mapped to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String getSemesterString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns an unmodifiable view of the rooms list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * This list will not contain any duplicate rooms."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns an unmodifiable view of the allocations list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * This list will not contain any duplicate allocations."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    ObservableList\u003cAllocation\u003e getAllocationList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 8,
      "JingYenLoh": 13,
      "Lysire": 6,
      "mkeoliya": 14
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    List\u003cCommandWordAlias\u003e getCommandWordAliases();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Path getResiRegFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 13,
      "mkeoliya": 6
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/ResiReg.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.UniqueAllocationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.UniqueRoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.academicyear.AcademicYear;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.semesternumber.SemesterNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Wraps all data at the base level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class ResiReg implements ReadOnlyResiReg {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final UniqueRoomList rooms;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final UniqueAllocationList allocations;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        semester \u003d new Semester("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                new AcademicYear(LocalDate.now().getYear()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                new SemesterNumber(1)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        rooms \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        allocations \u003d new UniqueAllocationList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ResiReg() {}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates an ResiReg using the Students and Rooms in the {@code toBeCopied}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ResiReg(ReadOnlyResiReg toBeCopied) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param semester"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void setSemester(Semester semester) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static ResiReg getNextSemesterResiReg(ReadOnlyResiReg toBeCopied) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg newResiReg \u003d new ResiReg();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        newResiReg.setStudents(toBeCopied.getStudentList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        newResiReg.setRooms(toBeCopied.getRoomList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Semester currentSemester \u003d toBeCopied.getSemester();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        newResiReg.semester \u003d Semester.getNextSemester(currentSemester);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return newResiReg;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return the shortened representation of the semester."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String getSemesterString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return semester.getShortRepresentation();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Replaces the contents of the room list with {@code rooms}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * {@code rooms} must not contain duplicate rooms"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.rooms.setRooms(rooms);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Replaces the contents of the room list with {@code rooms}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * {@code rooms} must not contain duplicate rooms"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void setAllocations(List\u003cAllocation\u003e allocations) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.allocations.setAllocations(allocations);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Resets the existing data of this {@code ResiReg} with {@code newData}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void resetData(ReadOnlyResiReg newData) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        setSemester(newData.getSemester());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        setRooms(newData.getRoomList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        setAllocations(newData.getAllocationList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in ResiReg."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Adds a student to ResiReg."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The student must not already exist in ResiReg."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code target} must exist in ResiReg."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * in ResiReg."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Removes {@code key} from this {@code ResiReg}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code key} must exist in ResiReg."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if an allocation relating to {@code student} exists in ResiReg."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean isAllocated(Student student) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return allocations.contains(student);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if an allocation relating to {@code room} exists in ResiReg."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean isAllocated(Room room) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return allocations.contains(room);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    //// room-level operations"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Adds a room to ResiReg."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The room must not already exist in ResiReg."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void addRoom(Room r) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        rooms.add(r);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if a room with the same identity as {@code room} exists in ResiReg."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return rooms.contains(room);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Replaces the given room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code target} must exist in ResiReg."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * The room identity of {@code editedStudent} must not be the same as another existing room"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * in ResiReg."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(editedRoom);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        rooms.setRoom(target, editedRoom);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Removes {@code key} from this {@code ResiReg}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code key} must exist in ResiReg."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void removeRoom(Room key) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        rooms.remove(key);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    //// allocation-level operations"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Adds an allocation to ResiReg."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The allocation must not already exist in ResiReg."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void addAllocation(Allocation allocation) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(allocation);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        allocations.add(allocation);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if an allocation with the same identity as {@code allocation} exists in ResiReg."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean hasAllocation(Allocation allocation) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(allocation);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return allocations.contains(allocation);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Replaces the given allocation {@code target} in the list with {@code editedAllocation}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code target} must exist in ResiReg."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * The allocation identity of {@code editedALlocation} must not be the same as another existing allocation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * in ResiReg."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void setAllocation(Allocation target, Allocation editedAllocation) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(editedAllocation);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        allocations.setAllocation(target, editedAllocation);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Removes {@code key} from this {@code ResiReg}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code key} must exist in ResiReg."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void removeAllocation(Allocation key) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        allocations.remove(key);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return rooms.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public ObservableList\u003cAllocation\u003e getAllocationList() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return allocations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                || (other instanceof ResiReg // instanceof handles nulls"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 students.equals(((ResiReg) other).students)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 rooms.equals(((ResiReg) other).rooms)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 allocations.equals(((ResiReg) other).allocations));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return Objects.hash(students, rooms, allocations);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 65,
      "JingYenLoh": 75,
      "Lysire": 49,
      "mkeoliya": 103
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.exceptions.DuplicateCommandWordAliasException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private List\u003cCommandWordAlias\u003e commandWordAliases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Path resiRegFilePath \u003d Paths.get(\"data\" , \"resireg.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        setCommandAliases(newUserPrefs.getCommandWordAliases());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        setResiRegFilePath(newUserPrefs.getResiRegFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public List\u003cCommandWordAlias\u003e getCommandWordAliases() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return commandWordAliases;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Resets the existing commandAliases of this {@code UserPrefs} with new {@code commandAliases}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setCommandAliases(List\u003cCommandWordAlias\u003e commandWordAliases) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(commandWordAliases);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!aliasesAreUnique(commandWordAliases)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new DuplicateCommandWordAliasException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.commandWordAliases \u003d new ArrayList\u003c\u003e(commandWordAliases);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Checks whether the existing commandAliases of this {@code UserPrefs} contains the target object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean hasAlias(CommandWordAlias target) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return commandWordAliases.stream().anyMatch(commandWordAlias -\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            commandWordAlias.getAlias().equals(target.getAlias()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void deleteAlias(CommandWordAlias target) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandWordAliases.remove(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Adds a new command word alias to the  existing commandAliases list of this {@code UserPrefs}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void addAlias(CommandWordAlias source) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandWordAliases.add(source);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return resiRegFilePath;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void setResiRegFilePath(Path resiRegFilePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        requireNonNull(resiRegFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.resiRegFilePath \u003d resiRegFilePath;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u0026\u0026 commandWordAliases.equals(o.commandWordAliases)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 resiRegFilePath.equals(o.resiRegFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return Objects.hash(guiSettings, commandWordAliases, resiRegFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        sb.append(\"Command Aliases : \" + commandWordAliases);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + resiRegFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String getCommandWordAliasesAsString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (CommandWordAlias commandWordAlias : commandWordAliases) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            res \u003d res + commandWordAlias.toString() + \"\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns true if {@code commandAliases} contains only unique command word aliases."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private boolean aliasesAreUnique(List\u003cCommandWordAlias\u003e commandWordAliases) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (int i \u003d 0; i \u003c commandWordAliases.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            for (int j \u003d i + 1; j \u003c commandWordAliases.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                if (commandWordAliases.get(i).equals(commandWordAliases.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 10,
      "-": 75,
      "mkeoliya": 68
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/VersionedResiReg.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.exceptions.NoRedoableStateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.exceptions.NoUndoableStateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * {@code ResiReg} that keeps track of its own history."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class VersionedResiReg extends ResiReg {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final List\u003cReadOnlyResiReg\u003e resiRegStateList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private int currentStatePtr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates a {@code VersionedResiReg} with the given {@code ReadOnlyResiReg}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public VersionedResiReg(ReadOnlyResiReg initialState) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        resiRegStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiRegStateList.add(new ResiReg(initialState));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        currentStatePtr \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private void removeStatesAfterCurrentPtr() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        resiRegStateList.subList(currentStatePtr + 1, resiRegStateList.size()).clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Saves a copy of the current {@code ResiReg} state at the end of"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * the state list. Undone states are removed from the state list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        removeStatesAfterCurrentPtr();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiRegStateList.add(new ResiReg(this));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        currentStatePtr++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if {@code undo()} has ResiReg states to undo."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return currentStatePtr \u003e 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if {@code redo()} has ResiReg states to redo."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return currentStatePtr \u003c resiRegStateList.size() - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Restores ResiReg to its previous state"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        currentStatePtr--;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        resetData(resiRegStateList.get(currentStatePtr));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Restores ResiReg to its previously undone state"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        currentStatePtr++;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        resetData(resiRegStateList.get(currentStatePtr));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!(other instanceof VersionedResiReg)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg otherVersionedResiReg \u003d (VersionedResiReg) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return super.equals(otherVersionedResiReg)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                \u0026\u0026 resiRegStateList.equals(otherVersionedResiReg.resiRegStateList)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                \u0026\u0026 currentStatePtr \u003d\u003d otherVersionedResiReg.currentStatePtr;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 8,
      "Lysire": 90
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/alias/Alias.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Represents a Student\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAlias(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class Alias {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"Aliases should be single alphabetic words, and should not be command words\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Za-z]+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public final String alias;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Constructs a {@code Alias}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param alias A valid alias."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Alias(String alias) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        checkArgument(isValidAlias(alias), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static boolean isValidAlias(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 !CommandWord.isValidCommandWord(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            || (other instanceof Alias // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u0026\u0026 alias.equals(((Alias) other).alias)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return alias.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 60
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/alias/CommandWord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.CommandWordEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Represents a Student\u0027s name in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCommandWord(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class CommandWord {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"Invalid command word. Type \\\"help\\\" to see a list of command words.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Za-z]+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public final String commandWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Constructs a {@code Alias}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param commandWord A valid command word."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandWord(String commandWord) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(commandWord);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        checkArgument(isValidCommandWord(commandWord), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static boolean isValidCommandWord(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cCommandWordEnum\u003e commandWords \u003d Arrays.asList(CommandWordEnum.values());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u0026\u0026 commandWords.stream().anyMatch(commandWord -\u003e commandWord.toString().equals(test));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            || (other instanceof CommandWord // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u0026\u0026 commandWord.equals(((CommandWord) other).commandWord)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return commandWord.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 61
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/alias/CommandWordAlias.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Represents a CommandAlias in ResiReg."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class CommandWordAlias {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"This alias is invalid as the command word doesn\u0027t exist\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public final CommandWord commandWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public final Alias alias;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandWordAlias(CommandWord commandWord, Alias alias) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireAllNonNull(commandWord, alias);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandWord getCommandWord() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Alias getAlias() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            || (other instanceof CommandWordAlias // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u0026\u0026 alias.equals(((CommandWordAlias) other).alias) // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u0026\u0026 commandWord.equals(((CommandWordAlias) other).commandWord));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return Objects.hash(commandWord, alias);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return \u0027\\\"\u0027 + commandWord.toString() + \u0027\\\"\u0027 + \" \u003d \" + alias.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 57
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/alias/exceptions/DuplicateCommandWordAliasException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.alias.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Signals that the operation will result in duplicate command word aliases (Command word aliases are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * duplicates if they have the same alias)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DuplicateCommandWordAliasException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DuplicateCommandWordAliasException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(\"Operation would result in duplicate aliases\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 11
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/allocation/Allocation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.model.allocation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Represents an allocation association between a Student and a Room."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Guarantees: Details are present and non-null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class Allocation {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final Floor floor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final RoomNumber roomNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final StudentId studentId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public Allocation(Floor floor, RoomNumber roomNumber, StudentId studentId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireAllNonNull(floor, roomNumber, studentId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.floor \u003d floor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public Floor getFloor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return floor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public RoomNumber getRoomNumber() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return roomNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public StudentId getStudentId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return studentId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if the allocation is related to {@code room}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean isRelatedTo(Room room) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return room.getFloor().equals(getFloor())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 room.getRoomNumber().equals(getRoomNumber());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if the allocation is related to {@code student}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean isRelatedTo(Student student) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return student.getStudentId().equals(getStudentId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if both allocations have the same room identification (floor and roomNumber)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * This defines a weaker notion of equality between two allocations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean isSameAllocation(Allocation otherAllocation) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (otherAllocation \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return otherAllocation !\u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 ((otherAllocation.getFloor().equals(getFloor())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    \u0026\u0026 otherAllocation.getRoomNumber().equals(getRoomNumber()))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        || otherAllocation.getStudentId().equals(getStudentId()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if both allocations have the same data fields."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!(other instanceof Allocation)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Allocation otherAllocation \u003d (Allocation) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return otherAllocation.getFloor().equals(getFloor())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 otherAllocation.getRoomNumber().equals(getRoomNumber())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 otherAllocation.getStudentId().equals(getStudentId());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return Objects.hash(floor, roomNumber, studentId);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return getFloor()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + \" Floor: \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + getRoomNumber()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + \" Room Number: \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + getStudentId()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + \" Student ID: \";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 109
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/allocation/UniqueAllocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.model.allocation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.exceptions.AllocationNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.exceptions.DuplicateAllocationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * A list of allocations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * An allocation is considered unique by comparing using {@code Allocation#isSameAllocation(Allocation)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * As such, adding and updating of allocations uses Allocation#isSameAllocation(Allocation) for equality so as to ensure"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * that the allocation being added or updated is unique in terms of floor and roomNumber or studentId in the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * UniqueAllocationList. However, the removal of an allocation uses Allocation#equals(Object) so as to ensure that the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * allocation with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * @see Allocation#isSameAllocation(Allocation)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class UniqueAllocationList implements Iterable\u003cAllocation\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final ObservableList\u003cAllocation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final ObservableList\u003cAllocation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if the list contains an equivalent allocation as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean contains(Allocation toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAllocation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if the allocation list contains the {@code student} identifier."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean contains(Student student) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Allocation allocation : internalList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            if (allocation.getStudentId().equals(student.getStudentId())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if the allocation list contains the {@code room} identifier."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean contains(Room room) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Allocation allocation : internalList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            if (allocation.getFloor().equals(room.getFloor())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    \u0026\u0026 allocation.getRoomNumber().equals(room.getRoomNumber())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Adds a allocation to the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * The allocation must not already exist in the list,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * i.e. the room and student must not have already been allocated."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void add(Allocation toAdd) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new DuplicateAllocationException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Replaces the allocation {@code target} in the list with {@code editedAllocation}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * The allocation identity of {@code editedAllocation} must not be the same as another existing allocation"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void setAllocation(Allocation target, Allocation editedAllocation) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireAllNonNull(target, editedAllocation);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new AllocationNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!target.isSameAllocation(editedAllocation) \u0026\u0026 contains(editedAllocation)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new DuplicateAllocationException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        internalList.set(index, editedAllocation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Removes the equivalent allocation from the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * The allocation must exist in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void remove(Allocation toRemove) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new AllocationNotFoundException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void setAllocations(UniqueAllocationList replacement) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Replaces the contents of this list with {@code allocations}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * {@code allocations} must not contain duplicate allocations."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void setAllocations(List\u003cAllocation\u003e allocations) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        requireAllNonNull(allocations);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!allocationsAreUnique(allocations)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new DuplicateAllocationException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        internalList.setAll(allocations);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public ObservableList\u003cAllocation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public Iterator\u003cAllocation\u003e iterator() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                || (other instanceof UniqueAllocationList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAllocationList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns true if {@code allocations} contains only unique allocations."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private boolean allocationsAreUnique(List\u003cAllocation\u003e allocations) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (int i \u003d 0; i \u003c allocations.size() - 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            for (int j \u003d i + 1; j \u003c allocations.size(); j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                if (allocations.get(i).isSameAllocation(allocations.get(j))) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 166
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/allocation/exceptions/AllocationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.model.allocation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Signals that the operation is unable to find the specified allocation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class AllocationNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 6
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/allocation/exceptions/DuplicateAllocationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.model.allocation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Signals that the operation will result in duplicate allocations (Allocations are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * the same data fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class DuplicateAllocationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public DuplicateAllocationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        super(\"Operation would result in duplicate allocations\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 11
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/exceptions/NoRedoableStateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Signals that {@code redo()} can\u0027t be done as there"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * are no states to go forward to"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public NoRedoableStateException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        super(\"There are no states to redo.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 11
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/exceptions/NoUndoableStateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Signals that {@code undo()} can\u0027t be done as there"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * are no states to go back to"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public NoUndoableStateException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        super(\"There are no states to undo.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lysire": 12
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/room/Floor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a room\u0027s floor number in ResiReg."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFloor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class Floor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            \"Floors should only contain numbers, cannot start with 0 and it should be at most 2 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[1-9][0-9]?$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Constructs a {@code Floor}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * @param floor A valid floor number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public Floor(String floor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(floor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        checkArgument(isValidFloor(floor), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        value \u003d floor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if a given string is a valid floor number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static boolean isValidFloor(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                || (other instanceof seedu.resireg.model.room.Floor // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.resireg.model.room.Floor) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "Lysire": 53
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/room/Room.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Represents a Room in ResiReg."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class Room {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final Floor floor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final RoomNumber number;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final RoomType roomType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Room(Floor floor, RoomNumber number, RoomType roomType,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireAllNonNull(floor, number, roomType, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.floor \u003d floor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.roomType \u003d roomType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public Floor getFloor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return floor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomNumber getRoomNumber() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomType getRoomType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return roomType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String getRoomLabel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return getFloor() + \":\" + getRoomNumber();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if both rooms have the same floor and room numbers."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * This defines a weaker notion of equality between two rooms, and includes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * rooms that have the same ID, but different fields (roomtype)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean isSameRoom(Room otherRoom) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (otherRoom \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return otherRoom !\u003d null \u0026\u0026 otherRoom.getFloor().equals(getFloor())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 otherRoom.getRoomNumber().equals(getRoomNumber());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if both rooms have the same data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!(other instanceof seedu.resireg.model.room.Room)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        seedu.resireg.model.room.Room otherRoom \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                (seedu.resireg.model.room.Room) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return otherRoom.getFloor().equals(getFloor())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 otherRoom.getRoomNumber().equals(getRoomNumber())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 otherRoom.getRoomType().equals(getRoomType())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 otherRoom.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return Objects.hash(floor, number, roomType, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        builder.append(\" Floor: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .append(getFloor())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .append(\" Room Number: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .append(getRoomNumber())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .append(getRoomType())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 1,
      "JingYenLoh": 13,
      "Lysire": 100,
      "mkeoliya": 4
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/room/RoomNameContainsKeywordPairsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Tests that a {@code Room}\u0027s name, that is the combination"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * of its {@code Floor} and {@code RoomNumber} (given as pairs)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class RoomNameContainsKeywordPairsPredicate implements Predicate\u003cRoom\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final List\u003cMap.Entry\u003cString, String\u003e\u003e pairList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomNameContainsKeywordPairsPredicate(List\u003cMap.Entry\u003cString, String\u003e\u003e pairList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.pairList \u003d pairList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean test(Room room) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return pairList.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .anyMatch(pair -\u003e StringUtil.containsWordIgnoreCase(room.getFloor().value, pair.getKey())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                        \u0026\u0026 StringUtil.containsWordIgnoreCase(room.getRoomNumber().value, pair.getValue()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                || (other instanceof RoomNameContainsKeywordPairsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                \u0026\u0026 pairList.equals(((RoomNameContainsKeywordPairsPredicate) other).pairList)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 34
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/room/RoomNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a room\u0027s number in ResiReg."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRoomNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class RoomNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            \"Room numbers should only contain numbers, cannot start with 0 \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                    + \"and it should be at most 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[1-9][0-9][0-9]$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Constructs a {@code Number}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * @param number A valid room number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomNumber(String number) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        checkArgument(isValidRoomNumber(number), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        value \u003d number;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if a given string is a valid number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static boolean isValidRoomNumber(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                || (other instanceof seedu.resireg.model.room.RoomNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.resireg.model.room.RoomNumber) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "Lysire": 54
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/room/UniqueRoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.exceptions.RoomNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * A list of rooms that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * A student is considered unique by comparing using {@code Room#isSameRoom(Room)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * As such, adding and updating of rooms uses Room#isSameRoom(Room) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * that the room being added or updated is unique in terms of identity in the UniqueRoomList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * However, the removal of a room uses Room#equals(Object) so as to ensure that the room with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * @see Room#isSameRoom(Room)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class UniqueRoomList implements Iterable\u003cRoom\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalImmutableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if the list contains an equivalent room as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean contains(Room toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRoom);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Adds a room to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * The room must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void add(Room toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Replaces the room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * The room identity of {@code editedRoom} must not be the same as another existing room in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireAllNonNull(target, editedRoom);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!target.isSameRoom(editedRoom) \u0026\u0026 contains(editedRoom)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        internalList.set(index, editedRoom);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Removes the equivalent room from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * The room must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void remove(Room toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRooms(UniqueRoomList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Replaces the contents of this list with {@code rooms}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * {@code rooms} must not contain duplicate rooms."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireAllNonNull(rooms);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!roomsAreUnique(rooms)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        internalList.setAll(rooms);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return internalImmutableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public Iterator\u003cRoom\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                || (other instanceof seedu.resireg.model.room.UniqueRoomList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.resireg.model.room.UniqueRoomList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if {@code rooms} contains only unique rooms."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private boolean roomsAreUnique(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        for (int i \u003d 0; i \u003c rooms.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rooms.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                if (rooms.get(i).isSameRoom(rooms.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 138
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/room/exceptions/DuplicateRoomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Signals that the operation will result in duplicate rooms (Rooms are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class DuplicateRoomException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public DuplicateRoomException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        super(\"Operation would result in duplicate rooms\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 11
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/room/exceptions/RoomNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Signals that the operation is unable to find the specified room."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class RoomNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 6
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/room/roomtype/RoomType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room.roomtype;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Represents a room\u0027s type in ResiReg."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRoomType(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class RoomType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            \"A roomtype must be of the form \\\"CA\\\", \\\"CN\\\", \\\"NA\\\", or \\\"NN\\\".\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Constructs a {@code RoomType}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * @param typeAbbr A valid room type abbreviation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomType(String typeAbbr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        requireAllNonNull(typeAbbr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        checkArgument(isValidRoomType(typeAbbr), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        name \u003d typeAbbr;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Returns true if a given string is a valid room type abbreviation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static boolean isValidRoomType(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        List\u003cRoomTypeEnum\u003e roomTypes \u003d Arrays.asList(RoomTypeEnum.values());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return roomTypes.stream().anyMatch(roomType -\u003e roomType.matchesRoomTypeAbbreviation(test));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                || (other instanceof RoomType // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                \u0026\u0026 name.equals(((RoomType) other).name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 57
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/room/roomtype/RoomTypeEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room.roomtype;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public enum RoomTypeEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    CORRIDOR_AIRCON(\"CA\", \"$700\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    CORRIDOR_NONAIRCON(\"CN\", \"$500\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    NONCORRIDOR_AIRCON(\"NA\", \"$900\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    NONCORRIDOR_NONAIRCON(\"NN\", \"$650\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private String abbreviation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private String fees;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    RoomTypeEnum(String abbreviation, String fees) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.abbreviation \u003d abbreviation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.fees \u003d fees;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public boolean matchesRoomTypeAbbreviation(String test) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return test.equals(abbreviation);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return abbreviation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lysire": 26
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/semester/Semester.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.academicyear.AcademicYear;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.roomrate.RoomRate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.semesternumber.SemesterNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a Semester in ResiReg."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final AcademicYear academicYear;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final SemesterNumber semesterNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final List\u003cAllocation\u003e allocations;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Map\u003cRoomType, RoomRate\u003e roomFees;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * SemesterNumber should be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Semester(AcademicYear academicYear, SemesterNumber semesterNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        requireAllNonNull(academicYear, semesterNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.semesterNumber \u003d semesterNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        allocations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        roomFees \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * All fields should be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Semester(AcademicYear academicYear, SemesterNumber semesterNumber,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    List\u003cAllocation\u003e allocations, Map\u003cRoomType, RoomRate\u003e roomFees) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        requireAllNonNull(academicYear, semesterNumber, allocations, roomFees);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.semesterNumber \u003d semesterNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.allocations \u003d allocations;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.roomFees \u003d roomFees;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public AcademicYear getAcademicYear() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return academicYear;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public List\u003cAllocation\u003e getAllocations() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return allocations;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Map\u003cRoomType, RoomRate\u003e getRoomFees() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return roomFees;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if both semesters have the same academic year and semester number."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * This defines a weaker notion of equality between two semesters, and includes semesters that begin in the same"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * year and period, but different allocations and fees;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean isSameSemester(Semester otherSemester) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (otherSemester \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return otherSemester !\u003d null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u0026\u0026 Objects.equals(otherSemester.getAcademicYear(), getAcademicYear())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u0026\u0026 Objects.equals(otherSemester.getSemesterNumber(), getSemesterNumber());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns the successor of a given Semester. A next semester should be the second semester of the academic year if"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * the given semester is in sem 1, otherwise it should be the first semester of the next academic year."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param semester the {@code Semester} to compute the next Semester for"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static Semester getNextSemester(Semester semester) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        requireAllNonNull(semester);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        switch (semester.semesterNumber.value) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return new Semester(semester.academicYear, new SemesterNumber(2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return new Semester(new AcademicYear(semester.academicYear.value + 1), new SemesterNumber(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This statement should not be reachable\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return a shortened String representation of the semester in form of \"AY\" + year + \"S\" + semesterNumber."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String getShortRepresentation() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.format(\"AY%sS%s\", academicYear, semesterNumber);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (!(other instanceof Semester)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Semester otherSemester \u003d (Semester) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return otherSemester.getAcademicYear().equals(getAcademicYear())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u0026\u0026 otherSemester.getSemesterNumber().equals(getSemesterNumber())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u0026\u0026 Objects.equals(otherSemester.getRoomFees(), getRoomFees())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u0026\u0026 Objects.equals(otherSemester.getAllocations(), getAllocations());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        builder.append(\" Academic Year: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .append(getAcademicYear())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .append(\" Semester: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .append(getSemesterNumber())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .append(\" Room Fees: (\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        getRoomFees().forEach((roomType, fee) -\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            builder.append(\" Room type: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                .append(roomType.toString())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                .append(\", Fee: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                .append(fee)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        builder.append(\") \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public SemesterNumber getSemesterNumber() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return semesterNumber;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 144
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/semester/academicyear/AcademicYear.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.model.semester.academicyear;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class AcademicYear {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    // A constant to denote when the first academic year started."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final int YEAR_OF_ESTABLISHMENT \u003d 1980;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Academic Year has to be greater than or equal to \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            + YEAR_OF_ESTABLISHMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Constructs a {@code AcademicYear}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param value A valid academic year"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public AcademicYear(int value) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        checkArgument(isValidAcademicYear(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assert value \u003e\u003d YEAR_OF_ESTABLISHMENT : MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if a given string is a valid academic year."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static boolean isValidAcademicYear(int test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return test \u003e\u003d 1980;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                || (other instanceof AcademicYear // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((AcademicYear) other).value); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 49
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/semester/roomrate/RoomRate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.model.semester.roomrate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a room\u0027s rate for a semester in ResiReg."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRoomRate(int)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class RoomRate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Room rate should not be a negative number\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Constructs a {@code RoomRate}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param value A valid room rate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public RoomRate(int value) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        checkArgument(isValidRoomRate(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static boolean isValidRoomRate(int value) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return value \u003e 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                || (other instanceof RoomRate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((RoomRate) other).value); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 45
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/semester/semesternumber/SemesterNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.model.semester.semesternumber;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a Semester\u0027s number in ResiReg."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSemesterNumber(int)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class SemesterNumber {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Semester number can only be 1 or 2\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Constructs a {@code SemesterNumber}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param value A valid semester number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public SemesterNumber(int value) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        checkArgument(isValidSemesterNumber(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assert value \u003d\u003d 1 || value \u003d\u003d 2 : MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static boolean isValidSemesterNumber(int test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return test \u003d\u003d 1 || test \u003d\u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                || (other instanceof SemesterNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((SemesterNumber) other).value); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 49
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a Student\u0027s email in ResiReg."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 64,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a Student\u0027s name in ResiReg."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The first character of the student\u0027s name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 2,
      "-": 55,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "mkeoliya": 6
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a Student\u0027s phone number in ResiReg."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 50,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Represents a Student in ResiReg."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final Faculty faculty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final StudentId studentId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Student(Name name, Phone phone, Email email, Faculty faculty, StudentId studentId, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireAllNonNull(name, phone, email, faculty, studentId, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Faculty getFaculty() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentId getStudentId() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return studentId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns true if both students have the same student identification number (StudentId)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * This defines a weaker notion of equality between two students, and includes students that have the same ID,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * but different fields (name, email, phone or faculty)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 otherStudent.getStudentId().equals(getStudentId());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return otherStudent.getStudentId().equals(getStudentId())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u0026\u0026 otherStudent.getFaculty().equals(getFaculty())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return Objects.hash(name, phone, email, faculty, studentId, tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .append(\" Student ID: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .append(getStudentId())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .append(\" Faculty: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .append(getFaculty())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 5,
      "mkeoliya": 126
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/StudentId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Represents a Student\u0027s identification number in ResiReg."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStudentId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class StudentId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"A student\u0027s identification number should begin with an \\\u0027E0\\\u0027 followed by 6 digits.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"E0[0-9]{6}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Constructs a {@code StudentId}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param studentId A valid student identification number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentId(String studentId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        checkArgument(isValidStudentId(studentId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        value \u003d studentId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static boolean isValidStudentId(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            || (other instanceof StudentId // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u0026\u0026 value.equals(((StudentId) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 53
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * As such, adding and updating of students uses Student#isSameStudent(Student) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * that the student being added or updated is unique in terms of identity in the UniqueStudentList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * However, the removal of a student uses Student#equals(Object) so as to ensure that the student with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 138
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 11
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 6
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/faculty/Faculty.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student.faculty;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Represents a Student\u0027s faculty in ResiReg."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFaculty(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class Faculty {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        \"A faculty must be listed here: http://www.nus.edu.sg/education\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Constructs a {@code Faculty}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param facultyAbbr A valid faculty abbreviation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Faculty(String facultyAbbr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(facultyAbbr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        checkArgument(isValidFaculty(facultyAbbr), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        value \u003d facultyAbbr;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns true if a given string is a valid faculty abbreviation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static boolean isValidFaculty(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cFacultyEnum\u003e faculties \u003d Arrays.asList(FacultyEnum.values());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return faculties.stream().anyMatch(faculty -\u003e faculty.matchesFacultyAbbreviation(test));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            || (other instanceof Faculty // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u0026\u0026 value.equals(((Faculty) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 57
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/student/faculty/FacultyEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student.faculty;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public enum FacultyEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ARTS_SOCIAL_SCIENCES(\"FASS\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    BUSINESS(\"BIZ\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    COMPUTING(\"SOC\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    CONTINUING_LIFELONG_EDUCATION(\"CLE\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    DENTISTRY(\"DEN\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    DESIGN_AND_ENVIRONMENT(\"SDE\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    DUKE_NUS(\"DNUS\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ENGINEERING(\"ENG\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    INTEGRATIVE_SCIENCES_AND_ENGINEERING(\"ISE\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    LAW(\"LAW\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MEDICINE(\"MED\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MUSIC(\"MUS\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    PUBLIC_HEALTH(\"PH\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    PUBLIC_POLICY(\"PP\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    SCIENCE(\"FOS\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    UNIVERSITY_SCHOLARS_PROGRAMME(\"USP\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    YALE_NUS(\"YNUS\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private String abbreviation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    FacultyEnum (String abbreviation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.abbreviation \u003d abbreviation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean matchesFacultyAbbreviation(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return test.equals(abbreviation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return abbreviation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 36
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a Tag in ResiReg."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 51,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/java/seedu/resireg/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.academicyear.AcademicYear;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.semesternumber.SemesterNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Contains utility methods for populating {@code ResiReg} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static Semester getSampleSemester() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new Semester("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            new AcademicYear(LocalDate.now().getYear()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            new SemesterNumber(1),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            Arrays.asList(getSampleAllocations()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new Student[]{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new Student(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new Faculty(\"FASS\"), new StudentId(\"E0111111\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new Student(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new Faculty(\"SOC\"), new StudentId(\"E0222222\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new Student(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new Faculty(\"DEN\"), new StudentId(\"E0333333\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new Student(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new Faculty(\"FOS\"), new StudentId(\"E0444444\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new Student(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new Faculty(\"BIZ\"), new StudentId(\"E0555555\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new Student(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new Faculty(\"FASS\"), new StudentId(\"E0666666\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static Room[] getSampleRooms() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return new Room[]{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            new Room(new Floor(\"11\"), new RoomNumber(\"108\"), new RoomType(\"CA\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                getTagSet(\"normal\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            new Room(new Floor(\"11\"), new RoomNumber(\"104\"), new RoomType(\"CN\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                getTagSet(\"normal\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            new Room(new Floor(\"9\"), new RoomNumber(\"102\"), new RoomType(\"NN\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                getTagSet(\"normal\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            new Room(new Floor(\"8\"), new RoomNumber(\"107\"), new RoomType(\"NA\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                getTagSet(\"room\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            new Room(new Floor(\"7\"), new RoomNumber(\"106\"), new RoomType(\"CN\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                getTagSet(\"hello\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static Allocation[] getSampleAllocations() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Allocation[]{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            new Allocation(new Floor(\"11\"), new RoomNumber(\"108\"), new StudentId(\"E0111111\"))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static ReadOnlyResiReg getSampleResiReg() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg sampleResiReg \u003d new ResiReg();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        sampleResiReg.setSemester(getSampleSemester());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            sampleResiReg.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        for (Room sampleRoom : getSampleRooms()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            sampleResiReg.addRoom(sampleRoom);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Allocation sampleAllocation : getSampleAllocations()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            sampleResiReg.addAllocation(sampleAllocation);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return sampleResiReg;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 9,
      "JingYenLoh": 23,
      "Lysire": 21,
      "mkeoliya": 53
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonAdaptedAllocation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Jackson-friendly version of {@link Allocation}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "class JsonAdaptedAllocation {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Allocation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final String floor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final String roomNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Constructs a {@code JsonAdaptedAllocation} with the given allocation details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public JsonAdaptedAllocation(@JsonProperty(\"floor\") String floor,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                                 @JsonProperty(\"roomNumber\") String roomNumber,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                                 @JsonProperty(\"studentId\") String studentId) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.floor \u003d floor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Converts a given {@code Allocation} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public JsonAdaptedAllocation(Allocation source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        floor \u003d source.getFloor().value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        roomNumber \u003d source.getRoomNumber().value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        studentId \u003d source.getStudentId().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Converts this Jackson-friendly adapted allocation object into the model\u0027s {@code Allocation} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted allocation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public Allocation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (floor \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Floor.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!Floor.isValidFloor(floor)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new IllegalValueException(Floor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        final Floor modelFloor \u003d new Floor(floor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (roomNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Number.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!RoomNumber.isValidRoomNumber(roomNumber)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new IllegalValueException(RoomNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        final RoomNumber modelRoomNumber \u003d new RoomNumber(roomNumber);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (studentId \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    StudentId.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!StudentId.isValidStudentId(studentId)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new IllegalValueException(StudentId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        final StudentId modelStudentId \u003d new StudentId(studentId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Allocation(modelFloor, modelRoomNumber, modelStudentId);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jetnew": 78
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonAdaptedCommandWordAlias.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.Alias;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "class JsonAdaptedCommandWordAlias {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Command word alias\u0027 %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final String alias;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public JsonAdaptedCommandWordAlias(@JsonProperty(\"commandWord\") String commandWord,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                          @JsonProperty(\"alias\") String alias) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public JsonAdaptedCommandWordAlias(CommandWordAlias source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.commandWord \u003d source.getCommandWord().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.alias \u003d source.getAlias().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts this Jackson-friendly adapted CommandWordAlias object into the model\u0027s {@code CommandWordAlias} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted command word alias."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandWordAlias toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (commandWord \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                CommandWord.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!CommandWord.isValidCommandWord(commandWord)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(CommandWord.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final CommandWord modelCommandWord \u003d new CommandWord(commandWord);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (alias \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Alias.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!Alias.isValidAlias(alias)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(Alias.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final Alias modelAlias \u003d new Alias(alias);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandWordAlias(modelCommandWord, modelAlias);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 67
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonAdaptedRoom.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * Jackson-friendly version of {@link Room}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "class JsonAdaptedRoom {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Room\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final String floor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final String roomNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final String roomType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Constructs a {@code JsonAdaptedRoom} with the given room details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public JsonAdaptedRoom(@JsonProperty(\"floor\") String floor, @JsonProperty(\"roomNumber\") String number,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                           @JsonProperty(\"roomType\") String roomType,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.floor \u003d floor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.roomNumber \u003d number;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.roomType \u003d roomType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Converts a given {@code Room} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public JsonAdaptedRoom(Room source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        floor \u003d source.getFloor().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        roomNumber \u003d source.getRoomNumber().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        roomType \u003d source.getRoomType().name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Converts this Jackson-friendly adapted room object into the model\u0027s {@code Room} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted room."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public Room toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        final List\u003cTag\u003e roomTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            roomTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (floor \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Floor.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!Floor.isValidFloor(floor)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new IllegalValueException(Floor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        final Floor modelFloor \u003d new Floor(floor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (roomNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    RoomNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!RoomNumber.isValidRoomNumber(roomNumber)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new IllegalValueException(RoomNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        final RoomNumber modelNumber \u003d new RoomNumber(roomNumber);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (roomType \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                    RoomType.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (!RoomType.isValidRoomType(roomType)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new IllegalValueException(RoomType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        final RoomType modelRoomType \u003d new RoomType(roomType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(roomTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Room(modelFloor, modelNumber, modelRoomType, modelTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jetnew": 4,
      "JingYenLoh": 2,
      "Lysire": 94
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonAdaptedSemester.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.academicyear.AcademicYear;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.roomrate.RoomRate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.semesternumber.SemesterNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Jackson-friendly version of {@link Semester}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class JsonAdaptedSemester {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final int academicYear;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final int semesterNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final List\u003cJsonAdaptedAllocation\u003e allocations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final HashMap\u003cRoomType, RoomRate\u003e roomFees \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Constructs a {@code JsonAdaptedSemester} with the given student details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public JsonAdaptedSemester(@JsonProperty(\"academicYear\") int academicYear,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                               @JsonProperty(\"semesterNumber\") int semesterNumber,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                               @JsonProperty(\"allocations\") List\u003cJsonAdaptedAllocation\u003e allocations,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                               @JsonProperty(\"roomFees\") Map\u003cString, Integer\u003e roomFees) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.semesterNumber \u003d semesterNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (allocations !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            this.allocations.addAll(allocations);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (roomFees !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            for (Map.Entry\u003cString, Integer\u003e entry : roomFees.entrySet()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                RoomType roomType \u003d new RoomType(entry.getKey());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                RoomRate roomRate \u003d new RoomRate(entry.getValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                this.roomFees.put(roomType, roomRate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Converts a given {@code Semester} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public JsonAdaptedSemester(Semester source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        academicYear \u003d source.getAcademicYear().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        semesterNumber \u003d source.getSemesterNumber().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        allocations.addAll(source.getAllocations().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .map(JsonAdaptedAllocation::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Semester} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted semester."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Semester toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        final List\u003cAllocation\u003e modelSemesterAllocations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        for (JsonAdaptedAllocation allocation : allocations) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            modelSemesterAllocations.add(allocation.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (!AcademicYear.isValidAcademicYear(academicYear)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new IllegalValueException(AcademicYear.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        final AcademicYear modelAcademicYear \u003d new AcademicYear(academicYear);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (!SemesterNumber.isValidSemesterNumber(semesterNumber)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new IllegalValueException(SemesterNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        final SemesterNumber modelSemesterNumber \u003d new SemesterNumber(semesterNumber);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        final Map\u003cRoomType, RoomRate\u003e modelRoomFees \u003d new HashMap\u003c\u003e(roomFees);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new Semester(modelAcademicYear, modelSemesterNumber, modelSemesterAllocations, modelRoomFees);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 88
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final String faculty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                              @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                              @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                              @JsonProperty(\"faculty\") String faculty,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                              @JsonProperty(\"studentId\") String studentId,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        faculty \u003d source.getFaculty().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        studentId \u003d source.getStudentId().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (faculty \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Faculty.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!Faculty.isValidFaculty(faculty)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(Faculty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final Faculty modelFaculty \u003d new Faculty(faculty);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (studentId \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                StudentId.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!StudentId.isValidStudentId(studentId)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new IllegalValueException(StudentId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final StudentId modelStudentId \u003d new StudentId(studentId);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Student(modelName, modelPhone, modelEmail, modelFaculty, modelStudentId, modelTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 27,
      "mkeoliya": 98
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonResiRegStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * A class to access ResiReg data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class JsonResiRegStorage implements ResiRegStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonResiRegStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public JsonResiRegStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Optional\u003cReadOnlyResiReg\u003e readResiReg() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return readResiReg(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Similar to {@link #readResiReg()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Optional\u003cReadOnlyResiReg\u003e readResiReg(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Optional\u003cJsonSerializableResiReg\u003e jsonResiReg \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                filePath, JsonSerializableResiReg.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (!jsonResiReg.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return Optional.of(jsonResiReg.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void saveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        saveResiReg(resiReg, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Similar to {@link #saveResiReg(ReadOnlyResiReg)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void saveResiReg(ReadOnlyResiReg resiReg, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        requireNonNull(resiReg);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableResiReg(resiReg), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void archiveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Path currentPath \u003d filePath.subpath(0, filePath.getNameCount() - 1).toAbsolutePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Path newPath \u003d Paths.get(currentPath.toString(), resiReg.getSemesterString(), \"archive.json\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        saveResiReg(resiReg, newPath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 29,
      "-": 54,
      "mkeoliya": 6
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonSerializableResiReg.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * An Immutable ResiReg that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "@JsonRootName(value \u003d \"resireg\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "class JsonSerializableResiReg {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"Rooms list contains duplicate room(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ALLOCATION \u003d \"Rooms list contains duplicate allocation(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final JsonAdaptedSemester semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final List\u003cJsonAdaptedRoom\u003e rooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final List\u003cJsonAdaptedAllocation\u003e allocations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Constructs a {@code JsonSerializableResiReg} with the given students."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public JsonSerializableResiReg(@JsonProperty(\"semester\") JsonAdaptedSemester semester,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                                   @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                                   @JsonProperty(\"rooms\") List\u003cJsonAdaptedRoom\u003e rooms,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                                   @JsonProperty(\"allocations\") List\u003cJsonAdaptedAllocation\u003e allocations) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.rooms.addAll(rooms);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.allocations.addAll(allocations);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Converts a given {@code ReadOnlyResiReg} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableResiReg}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public JsonSerializableResiReg(ReadOnlyResiReg source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        semester \u003d new JsonAdaptedSemester(source.getSemester());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        rooms.addAll(source.getRoomList().stream().map(JsonAdaptedRoom::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        allocations.addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                source.getAllocationList().stream().map(JsonAdaptedAllocation::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Converts this JsonSerializableResiReg instance into the model\u0027s {@code ResiReg} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ResiReg toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg resiReg \u003d new ResiReg();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assert semester !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiReg.setSemester(semester.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (resiReg.hasStudent(student)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            resiReg.addStudent(student);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        for (JsonAdaptedRoom jsonAdaptedRoom : rooms) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            Room room \u003d jsonAdaptedRoom.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (resiReg.hasRoom(room)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            resiReg.addRoom(room);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (JsonAdaptedAllocation jsonAdaptedAllocation : allocations) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            Allocation allocation \u003d jsonAdaptedAllocation.toModelType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (resiReg.hasAllocation(allocation)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ALLOCATION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            resiReg.addAllocation(allocation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return resiReg;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 14,
      "JingYenLoh": 26,
      "Lysire": 10,
      "-": 35,
      "mkeoliya": 8
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonSerializableUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * An Immutable ResiReg that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "@JsonRootName(value \u003d \"preferences\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "class JsonSerializableUserPrefs {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ALIAS \u003d \"Alias list contains duplicate alias(es).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final List\u003cJsonAdaptedCommandWordAlias\u003e commandWordAliases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final GuiSettings guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Path resiRegFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Constructs a {@code JsonSerializableResiReg} with the given students."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public JsonSerializableUserPrefs(@JsonProperty(\"guiSettings\") GuiSettings guiSettings,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                                     @JsonProperty(\"commandWordAliases\") List\u003cJsonAdaptedCommandWordAlias\u003e aliases,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                                     @JsonProperty(\"addressBookFilePath\") Path resiRegFilePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.commandWordAliases.addAll(aliases);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.resiRegFilePath \u003d resiRegFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Converts a given {@code ReadOnlyResiReg} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableResiReg}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public JsonSerializableUserPrefs(ReadOnlyUserPrefs source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandWordAliases.addAll(source.getCommandWordAliases().stream().map(JsonAdaptedCommandWordAlias::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.guiSettings \u003d source.getGuiSettings();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.resiRegFilePath \u003d source.getResiRegFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Converts this address book into the model\u0027s {@code ResiReg} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public UserPrefs toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (JsonAdaptedCommandWordAlias jsonAdaptedCommandWordAlias : commandWordAliases) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            CommandWordAlias commandWordAlias \u003d jsonAdaptedCommandWordAlias.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (userPrefs.hasAlias(commandWordAlias)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ALIAS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            userPrefs.addAlias(commandWordAlias);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        userPrefs.setResiRegFilePath(resiRegFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 10,
      "mkeoliya": 65
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonResiRegStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Optional\u003cJsonSerializableUserPrefs\u003e jsonUserPrefs \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            filePath, JsonSerializableUserPrefs.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!jsonUserPrefs.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return Optional.of(jsonUserPrefs.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        saveUserPrefs(userPrefs, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Saves the UserPrefs object as a Json file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param userPrefs the existing data to be saved"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param filePath the file path denoting the storage"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableUserPrefs(userPrefs), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 40,
      "mkeoliya": 41
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/ResiRegStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Represents a storage for {@link ResiReg}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public interface ResiRegStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Path getResiRegFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns ResiReg data as a {@link ReadOnlyResiReg}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Optional\u003cReadOnlyResiReg\u003e readResiReg() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @see #getResiRegFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Optional\u003cReadOnlyResiReg\u003e readResiReg(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Saves the given {@link ReadOnlyResiReg} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param resiReg cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void saveResiReg(ReadOnlyResiReg resiReg) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @see #saveResiReg(ReadOnlyResiReg)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void saveResiReg(ReadOnlyResiReg resiReg, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Archives the given {@link ReadOnlyResiReg} to the storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param resiReg cannot be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void archiveResiReg(ReadOnlyResiReg resiReg) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 55
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public interface Storage extends ResiRegStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Path getResiRegFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    Optional\u003cReadOnlyResiReg\u003e readResiReg() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void saveResiReg(ReadOnlyResiReg resiReg) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void archiveResiReg(ReadOnlyResiReg resiReg) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 7,
      "-": 23,
      "mkeoliya": 4
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Manages storage of ResiReg data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private ResiRegStorage resiRegStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ResiRegStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public StorageManager(ResiRegStorage resiRegStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.resiRegStorage \u003d resiRegStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ResiReg methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return resiRegStorage.getResiRegFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Optional\u003cReadOnlyResiReg\u003e readResiReg() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return readResiReg(resiRegStorage.getResiRegFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Optional\u003cReadOnlyResiReg\u003e readResiReg(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return resiRegStorage.readResiReg(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void saveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        saveResiReg(resiReg, resiRegStorage.getResiRegFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void saveResiReg(ReadOnlyResiReg resiReg, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiRegStorage.saveResiReg(resiReg, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void archiveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        logger.fine(\"Attempting to archive the current semester\u0027s data\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiRegStorage.archiveResiReg(resiReg);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 23,
      "-": 57,
      "mkeoliya": 5
    }
  },
  {
    "path": "src/main/java/seedu/resireg/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Represents a storage for {@link seedu.resireg.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Saves the given {@link seedu.resireg.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "mkeoliya": 6
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import javafx.scene.input.KeyCodeCombination;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    // keyboard shortcuts (can consider KeyboardCommandMapper similar to CommandMapper)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private static final KeyCombination undo \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            new KeyCodeCombination(KeyCode.Z, KeyCombination.CONTROL_DOWN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private static final KeyCombination redo \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            new KeyCodeCombination(KeyCode.Y, KeyCombination.CONTROL_DOWN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private void handleOnKeyPressed(KeyEvent event) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (undo.match(event)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            handleCommandEntered(\"undo\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        if (redo.match(event)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            handleCommandEntered(\"redo\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Tries to set the focus on this command box, which will allow the user type into the command box."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void requestFocus() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Handles the Enter button pressed event"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void handleCommandEntered(String commandText) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            commandExecutor.execute(commandText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "         * @see seedu.resireg.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 30,
      "-": 79,
      "mkeoliya": 5,
      "chloelee767": 7
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-t16-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Try entering the command \\\"help\\\", or refer to the user guide at: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "mkeoliya": 2,
      "chloelee767": 3
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/MainPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.TabView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Represents the main panel containing the room list and student list of the {@code MainWindow}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public abstract class MainPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected RoomListPanel roomListPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected StackPane roomListPanelPlaceholder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public MainPanel(String fxmlFileName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(fxmlFileName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    final void updatePanels(Logic logic) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        studentListPanel \u003d new StudentListPanel("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                logic.getFilteredStudentList(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                logic.getFilteredAllocationList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                logic.getFilteredRoomList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        studentListPanelPlaceholder.getChildren()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        roomListPanel \u003d new RoomListPanel("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                logic.getFilteredRoomList(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                logic.getFilteredAllocationList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        roomListPanelPlaceholder.getChildren()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .add(roomListPanel.getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Sets what is displayed in the listPanelStackPane based on the toggle."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param toggleView enum representing what should be displayed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    abstract void handleToggle(TabView toggleView);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 47
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.logic.commands.TabView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private MainPanel mainPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private StackPane semesterDisplayPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private StackPane mainPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        setMainPanel(new TabbedView());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getResiRegFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        SemesterDisplay semesterDisplay \u003d new SemesterDisplay(logic.getSemester());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        semesterDisplayPlaceholder.getChildren().add(semesterDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        commandBox.requestFocus(); // so the user can start entering commands right away"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private void setMainPanel(MainPanel mainPanel) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.mainPanel \u003d mainPanel;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        mainPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(mainPanel.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        mainPanel.updatePanels(logic);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Sets what is displayed in the listPanelStackPane based on the toggle."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param toggleView enum representing what should be displayed"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void handleToggle(TabView toggleView) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        mainPanel.handleToggle(toggleView);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Toggles the layout of the main panel between a tabbed layout and the side-by-side split layout."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void toggleMainPanelLayout() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (mainPanel instanceof TabbedView) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            setMainPanel(new SplitView());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            setMainPanel(new TabbedView());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @see seedu.resireg.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandText, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            commandResult.displayResult(this);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            mainPanel.updatePanels(logic);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandText, e.getMessage(), true);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 1,
      "JingYenLoh": 10,
      "-": 181,
      "mkeoliya": 8,
      "chloelee767": 32
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * A ui for the history of executed commands and results, which is displayed as a panel on the left of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private VBox responseContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private ScrollPane resultDisplayScroll;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Creates a ResultDisplay to display the result of a user\u0027s input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        resultDisplayScroll.vvalueProperty().bind(responseContainer.heightProperty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void setFeedbackToUser(String command, String feedbackToUser, boolean isError) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ResultDisplayItem response \u003d new ResultDisplayItem(command, feedbackToUser, isError);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        responseContainer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .getChildren()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .add(response.getRoot());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void setFeedbackToUser(String command, String feedbackToUser) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        setFeedbackToUser(command, feedbackToUser, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "mkeoliya": 12,
      "chloelee767": 7
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/ResultDisplayItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * A ui item in the {@link ResultDisplay} which displays an executed command and its result."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class ResultDisplayItem extends UiPart\u003cVBox\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplayItem.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Label command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Label feedback;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param commandText Command executed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param feedbackText Feedback to show to user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param isError Whether the command execution led to an error."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    ResultDisplayItem(String commandText, String feedbackText, boolean isError) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        command.setText(commandText);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        feedback.setText(feedbackText);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (isError) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            command.getStyleClass().add(\"result-display-invalid-command\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            command.getStyleClass().add(\"result-display-valid-command\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (!(other instanceof ResultDisplayItem)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ResultDisplayItem item \u003d (ResultDisplayItem) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return command.getText().equals(item.command.getText())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u0026\u0026 feedback.getText().equals(item.feedback.getText());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 52
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/RoomCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class RoomCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final String FXML \u003d \"RoomListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ResiReg level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public final Room room;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Label roomLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Label roomType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Label studentId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Label studentName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates a {@code RoomCard} with the given {@code Room} and index to display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public RoomCard(Room room, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        roomLabel.setText(room.getFloor() + \"-\" + room.getRoomNumber());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        roomType.setText(room.getRoomType().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        studentId.setText(\"Unallocated\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        studentName.setText(\"Unallocated\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        room.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates a {@code RoomCard} with the given {@code Room} and index to display."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Includes the {@code studentId} and {@code studentName}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public RoomCard(Room room, int displayedIndex, StudentId studentId, Name name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        roomLabel.setText(room.getFloor() + \"-\" + room.getRoomNumber());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        roomType.setText(room.getRoomType().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.studentId.setText(studentId.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.studentName.setText(name.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        room.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (!(other instanceof RoomCard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        RoomCard card \u003d (RoomCard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u0026\u0026 room.equals(card.room);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 19,
      "JingYenLoh": 75
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/RoomListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class RoomListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final String FXML \u003d \"RoomListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoomListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final ObservableList\u003cAllocation\u003e allocationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final ObservableList\u003cStudent\u003e studentList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private ListView\u003cRoom\u003e roomListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates a {@code RoomListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public RoomListPanel(ObservableList\u003cRoom\u003e roomList,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                         ObservableList\u003cAllocation\u003e allocationList,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                         ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.allocationList \u003d allocationList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.studentList \u003d studentList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        roomListView.setItems(roomList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        roomListView.setCellFactory(listView -\u003e new RoomListPanel.RoomListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Room} using a {@code RoomCard}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    class RoomListViewCell extends ListCell\u003cRoom\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        protected void updateItem(Room room, boolean empty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            super.updateItem(room, empty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (empty || room \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                Allocation relatedAllocation \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                for (Allocation allocation : allocationList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    if (allocation.isRelatedTo(room)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        relatedAllocation \u003d allocation;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                if (relatedAllocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    setGraphic(new RoomCard(room, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                Student relatedStudent \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                for (Student student : studentList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    if (relatedAllocation.isRelatedTo(student)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        relatedStudent \u003d student;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                if (relatedStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    setGraphic(new RoomCard(room, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                setGraphic(new RoomCard(room,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        getIndex() + 1,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        relatedStudent.getStudentId(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        relatedStudent.getName()).getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 32,
      "JingYenLoh": 43
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/SemesterDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Label containing the current semester."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class SemesterDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final String FXML \u003d \"SemesterDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SemesterDisplay.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Label semesterLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates a {@code SemesterDisplay} with the given {@code Semester} and index to display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public SemesterDisplay(Semester semester) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        logger.info(\"Created SemesterDisplay panel\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        semesterLabel.setText(\"Current Semester: AY\" + semester.getAcademicYear()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            + \" Semester \" + semester.getSemesterNumber());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (!(other instanceof SemesterDisplay)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        SemesterDisplay display \u003d (SemesterDisplay) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return semesterLabel.getText().equals(display.semesterLabel.getText())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u0026\u0026 semester.equals(display.semester);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 52
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/SplitView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.TabView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class SplitView extends MainPanel {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static final String FXML \u003d \"SplitView.fxml\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public SplitView() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void handleToggle(TabView toggleView) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // do nothing, since all tabs are already displayed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 16
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ResiReg level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Label faculty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Label studentId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Label roomNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Label floor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Creates a {@code StudentCard} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        phone.setText(student.getPhone().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        faculty.setText(student.getFaculty().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        studentId.setText(student.getStudentId().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        floor.setText(\"Unallocated\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        roomNumber.setText(\"Unallocated\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates a {@code StudentCard} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public StudentCard(Student student, int displayedIndex, Floor floor, RoomNumber roomNumber) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        phone.setText(student.getPhone().value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        faculty.setText(student.getFaculty().value);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        studentId.setText(student.getStudentId().value);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.floor.setText(floor.value);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.roomNumber.setText(roomNumber.value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 28,
      "JingYenLoh": 1,
      "-": 58,
      "mkeoliya": 21
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final ObservableList\u003cAllocation\u003e allocationList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private final ObservableList\u003cRoom\u003e roomList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Creates a {@code StudentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                            ObservableList\u003cAllocation\u003e allocationList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                            ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.allocationList \u003d allocationList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.roomList \u003d roomList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                Allocation relatedAllocation \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                for (Allocation allocation : allocationList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    if (allocation.isRelatedTo(student)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        relatedAllocation \u003d allocation;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                if (relatedAllocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                Room relatedRoom \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                for (Room room : roomList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    if (relatedAllocation.isRelatedTo(room)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        relatedRoom \u003d room;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                if (relatedRoom \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                setGraphic(new StudentCard(student,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        getIndex() + 1,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        relatedRoom.getFloor(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        relatedRoom.getRoomNumber()).getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            studentListView.refresh();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 33,
      "mkeoliya": 47
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/TabbedView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.TabView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class TabbedView extends MainPanel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static final String FXML \u003d \"TabbedView.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Tab studentsTab;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Tab roomsTab;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public TabbedView() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private void showStudentPanel() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        tabPane.getSelectionModel().select(studentsTab);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private void showRoomsPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        tabPane.getSelectionModel().select(roomsTab);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void handleToggle(TabView toggleView) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (toggleView \u003d\u003d TabView.ROOMS) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            showRoomsPanel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            showStudentPanel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 40
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "mkeoliya": 5
    }
  },
  {
    "path": "src/main/java/seedu/resireg/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleOnKeyPressed\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "               promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "         title\u003d\"ResiReg\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u003cGridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u003cgridLinesVisible\u003etrue\u003c/gridLinesVisible\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u003cColumnConstraints percentWidth\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u003cColumnConstraints percentWidth\u003d\"70\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u003cRowConstraints vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                         VBox.vgrow\u003d\"NEVER\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                         GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" GridPane.columnSpan\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u003cStackPane fx:id\u003d\"semesterDisplayPlaceholder\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                           VBox.vgrow\u003d\"NEVER\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                           GridPane.columnSpan\u003d\"2\" GridPane.rowSpan\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                           VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                           styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                           GridPane.rowSpan\u003d\"1\" GridPane.columnSpan\u003d\"1\" GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003cStackPane fx:id\u003d\"mainPanelPlaceholder\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                            VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                            styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                            GridPane.rowSpan\u003d\"1\" GridPane.columnSpan\u003d\"1\" GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                           VBox.vgrow\u003d\"NEVER\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                           styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"3\" GridPane.columnSpan\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                           VBox.vgrow\u003d\"NEVER\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"4\" GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 11,
      "-": 38,
      "mkeoliya": 28,
      "chloelee767": 14
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cScrollPane fx:id\u003d\"resultDisplayScroll\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            fitToHeight\u003d\"true\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            hvalue\u003d\"1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            vbarPolicy\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \u003c!--scroll bar won\u0027t appear without this for some reason--\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003cVBox fx:id\u003d\"responseContainer\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \u003cInsets bottom\u003d\"4.0\" left\u003d\"4.0\" right\u003d\"4.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 10,
      "-": 3,
      "chloelee767": 9
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplayItem.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003c!--minHeight needs to be -Infinity to allow the label to expand vertically--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003cLabel fx:id\u003d\"command\" styleClass\u003d\"result-display-text\" minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003cLabel fx:id\u003d\"feedback\" styleClass\u003d\"result-display-text\" minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "      \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 14
    }
  },
  {
    "path": "src/main/resources/view/RoomListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u003cLabel fx:id\u003d\"roomLabel\" text\u003d\"\\$roomLabel\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003cLabel fx:id\u003d\"roomType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$roomType\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentName\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentId\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 35
    }
  },
  {
    "path": "src/main/resources/view/RoomListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003cListView fx:id\u003d\"roomListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 7
    }
  },
  {
    "path": "src/main/resources/view/SemesterDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"semesterLabel\" maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" GridPane.columnSpan\u003d\"2\" GridPane.rowSpan\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 17
    }
  },
  {
    "path": "src/main/resources/view/SplitView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003cVBox HBox.hgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cLabel VBox.vgrow\u003d\"NEVER\" styleClass\u003d\"split-view-title\"\u003eStudents\u003c/Label\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003cVBox HBox.hgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cLabel VBox.vgrow\u003d\"NEVER\" styleClass\u003d\"split-view-title\"\u003eRooms\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cStackPane fx:id\u003d\"roomListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 16
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "      \u003cLabel fx:id\u003d\"studentId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentId\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "      \u003cLabel fx:id\u003d\"faculty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$faculty\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "      \u003cLabel fx:id\u003d\"floor\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$floor\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "      \u003cLabel fx:id\u003d\"roomNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$roomNumber\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jetnew": 2,
      "-": 35,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/main/resources/view/TabbedView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003cTabPane fx:id\u003d\"tabPane\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "             tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003c!-- Students tab --\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cTab fx:id\u003d\"studentsTab\" text\u003d\"Students\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \u003cVBox fx:id\u003d\"studentList\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                  VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                  styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                  minWidth\u003d\"340\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003c!-- Rooms tab --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cTab fx:id\u003d\"roomsTab\" text\u003d\"Rooms\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \u003cVBox fx:id\u003d\"roomList\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                  VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                  styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                  minWidth\u003d\"340\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003cStackPane fx:id\u003d\"roomListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 42
    }
  },
  {
    "path": "src/test/java/seedu/resireg/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/test/java/seedu/resireg/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/test/java/seedu/resireg/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "mkeoliya": 9
    }
  },
  {
    "path": "src/test/java/seedu/resireg/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/test/java/seedu/resireg/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "mkeoliya": 4
    }
  },
  {
    "path": "src/test/java/seedu/resireg/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/test/java/seedu/resireg/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.STUDENT_ID_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.JsonResiRegStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonResiRegStorage resiRegStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                new JsonResiRegStorage(temporaryFolder.resolve(\"resireg.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(resiRegStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // Setup LogicManager with JsonResiRegIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonResiRegStorage resiRegStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                new JsonResiRegIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionResiReg.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(resiRegStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_AMY + STUDENT_ID_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static class JsonResiRegIoExceptionThrowingStub extends JsonResiRegStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        private JsonResiRegIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveResiReg(ReadOnlyResiReg resiReg, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 13,
      "Lysire": 1,
      "-": 123,
      "mkeoliya": 27
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/AddAliasCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.ModelPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.CommandWordAliasBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class AddAliasCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void constructor_nullAlias_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddAliasCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_aliasAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ModelStubAcceptingAliasAdded modelStub \u003d new ModelStubAcceptingAliasAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias validAlias \u003d new CommandWordAliasBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Storage storageStub \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        CommandResult commandResult \u003d new AddAliasCommand(validAlias).execute(modelStub, storageStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(String.format(AddAliasCommand.MESSAGE_SUCCESS, validAlias), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(Arrays.asList(validAlias), modelStub.aliasesAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_duplicateAlias_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias validAlias \u003d new CommandWordAliasBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AddAliasCommand addAliasCommand \u003d new AddAliasCommand(validAlias);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAlias(validAlias);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Storage storageStub \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            AddAliasCommand.MESSAGE_DUPLICATE_ALIAS, () -\u003e addAliasCommand.execute(modelStub, storageStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias roomsR \u003d new CommandWordAliasBuilder().withAlias(\"r\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias roomsRo \u003d new CommandWordAliasBuilder().withAlias(\"ro\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AddAliasCommand addRoomsRCommand \u003d new AddAliasCommand(roomsR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AddAliasCommand addRoomsRoCommand \u003d new AddAliasCommand(roomsRo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(addRoomsRCommand.equals(addRoomsRCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AddAliasCommand addRoomsRCommandCopy \u003d new AddAliasCommand(roomsR);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(addRoomsRCommand.equals(addRoomsRCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(addRoomsRCommandCopy.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(addRoomsRCommandCopy.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(addRoomsRCommand.equals(addRoomsRoCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public String getCommandWordAliasesAsString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public List\u003cCommandWordAlias\u003e getCommandWordAliases() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasCommandWordAlias(CommandWordAlias target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void deleteCommandWordAlias(CommandWordAlias target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        };"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void addCommandWordAlias(CommandWordAlias source) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void setResiRegFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void setResiReg(ReadOnlyResiReg newData) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public ReadOnlyResiReg getResiReg() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean isAllocated(Student student) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean isAllocated(Room room) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void deleteRoom(Room target) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void addRoom(Room room) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasAllocation(Allocation allocation) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void removeAllocation(Allocation target) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void addAllocation(Allocation allocation) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setAllocation(Allocation target, Allocation editedAllocation) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Semester getSemester() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public ObservableList\u003cAllocation\u003e getFilteredAllocationList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void updateFilteredStudentList(ModelPredicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void updateFilteredRoomList(ModelPredicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void updateFilteredAllocationList(Predicate\u003cAllocation\u003e predicate) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void updateFilteredAllocationList(ModelPredicate\u003cAllocation\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean canUndoResiReg() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean canRedoResiReg() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void undoResiReg() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void redoResiReg() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void saveStateResiReg() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private class ModelStubWithAlias extends ModelStub {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private final CommandWordAlias commandWordAlias;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ModelStubWithAlias(CommandWordAlias commandWordAlias) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            requireNonNull(commandWordAlias);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.commandWordAlias \u003d commandWordAlias;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasCommandWordAlias(CommandWordAlias commandWordAlias) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            requireNonNull(commandWordAlias);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return this.commandWordAlias.getAlias().equals(commandWordAlias.getAlias());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private class ModelStubAcceptingAliasAdded extends ModelStub {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final ArrayList\u003cCommandWordAlias\u003e aliasesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasCommandWordAlias(CommandWordAlias commandWordAlias) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            requireNonNull(commandWordAlias);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return aliasesAdded.stream().anyMatch(commandWordAlias::equals);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void addCommandWordAlias(CommandWordAlias commandWordAlias) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            requireNonNull(commandWordAlias);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            aliasesAdded.add(commandWordAlias);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new UserPrefs();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 16,
      "mkeoliya": 312,
      "chloelee767": 16
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertCommandSuccess(new AddCommand(validStudent), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validStudent.getName().fullName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    validStudent.getStudentId().value), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Student studentInList \u003d model.getResiReg().getStudentList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertCommandFailure(new AddCommand(studentInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 4,
      "Lysire": 1,
      "mkeoliya": 42
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.ModelPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStudent).execute(modelStub, storageStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent.getName().fullName,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            validStudent.getStudentId().value), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            addCommand.execute(modelStub, storageStub));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public String getCommandWordAliasesAsString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public List\u003cCommandWordAlias\u003e getCommandWordAliases() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasCommandWordAlias(CommandWordAlias target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void deleteCommandWordAlias(CommandWordAlias target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void addCommandWordAlias(CommandWordAlias source) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void setResiRegFilePath(Path resiRegFilePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void setResiReg(ReadOnlyResiReg newData) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public ReadOnlyResiReg getResiReg() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public boolean isAllocated(Student student) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public boolean isAllocated(Room room) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public void setRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void deleteRoom(Room target) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void addRoom(Room room) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public boolean hasAllocation(Allocation allocation) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public void removeAllocation(Allocation target) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public void addAllocation(Allocation allocation) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public void setAllocation(Allocation target, Allocation editedAllocation) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Semester getSemester() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public ObservableList\u003cAllocation\u003e getFilteredAllocationList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void updateFilteredStudentList(ModelPredicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void updateFilteredRoomList(ModelPredicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public void updateFilteredAllocationList(Predicate\u003cAllocation\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void updateFilteredAllocationList(ModelPredicate\u003cAllocation\u003e predicate) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        public boolean canUndoResiReg() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        public boolean canRedoResiReg() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        public void undoResiReg() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        public void redoResiReg() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        public void saveStateResiReg() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        public void saveStateResiReg() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public ReadOnlyResiReg getResiReg() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return new ResiReg();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * A stub class for Storage."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static class StorageStub implements Storage {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Optional\u003cReadOnlyResiReg\u003e readResiReg() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Optional\u003cReadOnlyResiReg\u003e readResiReg(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveResiReg(ReadOnlyResiReg resiReg, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void archiveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 48,
      "JingYenLoh": 77,
      "Lysire": 41,
      "-": 142,
      "mkeoliya": 82,
      "chloelee767": 16
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/AllocateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.showRoomAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalAllocations.getTypicalResiReg;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIFTH_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIFTH_ROOM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_ROOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FOURTH_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FOURTH_ROOM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_SECOND_ROOM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Contains unit tests for {@code AllocateCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * TypicalResiReg is assumed to have allocated the first 3 students to the first 3 rooms, so the 4th student/room"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * is free to be allocated."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class AllocateCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Student studentToAllocate \u003d model.getFilteredStudentList().get(INDEX_FOURTH_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Room roomToAllocate \u003d model.getFilteredRoomList().get(INDEX_FOURTH_ROOM.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Allocation toAllocate \u003d new Allocation(roomToAllocate.getFloor(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                roomToAllocate.getRoomNumber(), studentToAllocate.getStudentId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AllocateCommand allocateCommand \u003d new AllocateCommand(INDEX_FOURTH_PERSON, INDEX_FOURTH_ROOM);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String expectedMessage \u003d String.format(AllocateCommand.MESSAGE_SUCCESS, roomToAllocate.getRoomLabel(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                studentToAllocate.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        expectedModel.addAllocation(toAllocate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandSuccess(allocateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexStudentUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndexStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AllocateCommand allocateCommand \u003d new AllocateCommand(outOfBoundIndexStudent, INDEX_FOURTH_ROOM);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(allocateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexRoomUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndexRoom \u003d Index.fromOneBased(model.getFilteredRoomList().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AllocateCommand allocateCommand \u003d new AllocateCommand(INDEX_FOURTH_ROOM, outOfBoundIndexRoom);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(allocateCommand, model, Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexStudentFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResiReg().getStudentList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AllocateCommand allocateCommand \u003d new AllocateCommand(outOfBoundIndex, INDEX_FIRST_ROOM);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(allocateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexRoomFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        showRoomAtIndex(model, INDEX_FIRST_ROOM);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ROOM;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResiReg().getRoomList().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AllocateCommand allocateCommand \u003d new AllocateCommand(INDEX_FIRST_PERSON, outOfBoundIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(allocateCommand, model, Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AllocateCommand allocateFirstCommand \u003d new AllocateCommand(INDEX_FOURTH_PERSON, INDEX_FOURTH_ROOM);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AllocateCommand allocateSecondCommand \u003d new AllocateCommand(INDEX_FIFTH_PERSON, INDEX_FIFTH_ROOM);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(allocateFirstCommand.equals(allocateFirstCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AllocateCommand allocateFirstCommandCopy \u003d new AllocateCommand(INDEX_FOURTH_PERSON, INDEX_FOURTH_ROOM);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(allocateFirstCommand.equals(allocateFirstCommandCopy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertFalse(allocateFirstCommand.equals(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertFalse(allocateFirstCommand.equals(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertFalse(allocateFirstCommand.equals(allocateSecondCommand));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no allocations."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private void showNoAllocation(Model model) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        model.updateFilteredAllocationList(p -\u003e false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(model.getFilteredAllocationList().isEmpty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 120
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/ArchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "class ArchiveCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void execute_archivalSuccessResiReg_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        PassingStorageStub storageStub \u003d new PassingStorageStub();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            CommandResult result \u003d new ArchiveCommand().execute(model, storageStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            assertEquals(new CommandResult(ArchiveCommand.MESSAGE_SUCCESS), result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void execute_archivalFailureResiReg_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        FailingStorageStub storageStub \u003d new FailingStorageStub();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ArchiveCommand().execute(model, storageStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * A stub class for Storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static class StorageStub implements Storage {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Optional\u003cReadOnlyResiReg\u003e readResiReg() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Optional\u003cReadOnlyResiReg\u003e readResiReg(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveResiReg(ReadOnlyResiReg resiReg, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void archiveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static class PassingStorageStub extends StorageStub {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void archiveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static class FailingStorageStub extends StorageStub {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void archiveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new IOException(\"This should fail\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 114
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void execute_emptyResiReg_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void execute_nonEmptyResiReg_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        expectedModel.setResiReg(new ResiReg());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 7,
      "Lysire": 2,
      "-": 20,
      "mkeoliya": 5
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.RoomNameContainsKeywordPairsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Valid students"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALID_FACULTY_AMY \u003d \"FASS\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALID_FACULTY_BOB \u003d \"SOC\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALID_STUDENT_ID_AMY \u003d \"E0111111\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALID_STUDENT_ID_BOB \u003d \"E0222222\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Valid rooms"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALID_FLOOR_A \u003d \"21\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALID_FLOOR_B \u003d \"7\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String VALID_FLOOR_C \u003d \"11\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_A \u003d \"120\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_B \u003d \"105\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_C \u003d \"103\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALID_ROOM_TYPE_A \u003d \"CA\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALID_ROOM_TYPE_B \u003d \"NA\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String VALID_ROOM_TYPE_C \u003d \"NN\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALID_TAG_RENOVATED \u003d \"renovated\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String VALID_TAG_DAMAGED \u003d \"damaged\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Valid command word aliases"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALID_COMMAND_ROOMS_RO \u003d \"rooms\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALID_COMMAND_STUDENTS_ST \u003d \"students\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALID_ALIAS_ROOMS_RO \u003d \"ro\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String VALID_ALIAS_STUDENTS_ST \u003d \"st\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String FACULTY_DESC_AMY \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String FACULTY_DESC_BOB \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String STUDENT_ID_DESC_AMY \u003d \" \" + PREFIX_STUDENT_ID + VALID_STUDENT_ID_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String STUDENT_ID_DESC_BOB \u003d \" \" + PREFIX_STUDENT_ID + VALID_STUDENT_ID_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_DESC_ROOMS_RO \u003d \" \" + PREFIX_COMMAND + VALID_COMMAND_ROOMS_RO;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String COMMAND_DESC_STUDENTS_STU \u003d \" \" + PREFIX_COMMAND + VALID_COMMAND_STUDENTS_ST;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String ALIAS_DESC_ROOMS_RO \u003d \" \" + PREFIX_ALIAS + VALID_ALIAS_ROOMS_RO;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String ALIAS_DESC_STUDENTS_STU \u003d \" \" + PREFIX_ALIAS + VALID_ALIAS_STUDENTS_ST;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String INVALID_FACULTY_DESC \u003d \" \" + PREFIX_FACULTY; // empty string not allowed for faculties"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String INVALID_STUDENT_ID_DESC \u003d \" \" + PREFIX_STUDENT_ID; // empty string not allowed for ids"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String INVALID_FLOOR \u003d \"asfdj\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String INVALID_ROOM_NUMBER \u003d \"asdfj\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static final String INVALID_ROOM_TYPE \u003d \"asdfjk\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String INVALID_COMMAND_DESC \u003d \" \" + PREFIX_COMMAND + \"71ndn\"; // command word doesn\u0027t exist"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // alias cant be a command word"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String INVALID_ALIAS_DESC \u003d \" \" + PREFIX_ALIAS + ListRoomCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withFaculty(VALID_FACULTY_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withStudentId(VALID_STUDENT_ID_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withFaculty(VALID_FACULTY_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withStudentId(VALID_STUDENT_ID_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, storageStub);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * - the returned {@link ToggleCommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static void assertToggleCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                                                  Model expectedModel, TabView tabView) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        ToggleCommandResult expectedCommandResult \u003d new ToggleCommandResult(expectedMessage, tabView);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * - the rest of the model, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg expectedResiReg \u003d new ResiReg(actualModel.getResiReg());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, storageStub));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(expectedResiReg, actualModel.getResiReg());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code model}\u0027s ResiReg."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the room at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * {@code model}\u0027s ResiReg."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static void showRoomAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRoomList().size());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Room room \u003d model.getFilteredRoomList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        final String[] info \u003d new String[]{room.getFloor().value, room.getRoomNumber().value};"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.updateFilteredRoomList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            new RoomNameContainsKeywordPairsPredicate(Arrays.asList(Map.entry(info[0], info[1])))"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        );"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertEquals(1, model.getFilteredRoomList().size());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Deletes the first student in {@code model}\u0027s filtered list from {@code model}\u0027s resireg."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static void deleteFirstStudent(Model model) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(0);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.deleteStudent(firstStudent);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.saveStateResiReg();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * A stub class for Storage."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static class StorageStub implements Storage {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Optional\u003cReadOnlyResiReg\u003e readResiReg() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Optional\u003cReadOnlyResiReg\u003e readResiReg(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void saveResiReg(ReadOnlyResiReg resiReg, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public void archiveResiReg(ReadOnlyResiReg resiReg) throws IOException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 69,
      "Lysire": 46,
      "-": 87,
      "mkeoliya": 60,
      "chloelee767": 7
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/DeallocateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalAllocations.getTypicalResiReg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_ROOM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Contains unit tests for {@code AllocateCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * TypicalResiReg is assumed to have allocated the first 3 students to the first 3 rooms, so the 4th student/room"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * is free to be allocated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class DeallocateCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Room roomToDeallocate \u003d model.getFilteredRoomList().get(INDEX_FIRST_ROOM.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Student studentToDeallocate \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        DeallocateCommand deallocateCommand \u003d new DeallocateCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String expectedMessage \u003d String.format(DeallocateCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                roomToDeallocate.getFloor().toString() + \u0027:\u0027 + roomToDeallocate.getRoomNumber(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                studentToDeallocate.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cAllocation\u003e lastShownListAllocation \u003d model.getFilteredAllocationList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Allocation toDeallocate \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Allocation allocation : lastShownListAllocation) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            if (studentToDeallocate.getStudentId().equals(allocation.getStudentId())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                toDeallocate \u003d allocation;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        expectedModel.removeAllocation(toDeallocate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandSuccess(deallocateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexStudentUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndexStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        DeallocateCommand deallocateCommand \u003d new DeallocateCommand(outOfBoundIndexStudent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(deallocateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexStudentFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ResiReg list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResiReg().getStudentList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        DeallocateCommand deallocateCommand \u003d new DeallocateCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(deallocateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        DeallocateCommand deallocateFirstCommand \u003d new DeallocateCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        DeallocateCommand deallocateSecondCommand \u003d new DeallocateCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(deallocateFirstCommand.equals(deallocateFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        DeallocateCommand deallocateFirstCommandCopy \u003d new DeallocateCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(deallocateFirstCommand.equals(deallocateFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertFalse(deallocateFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertFalse(deallocateFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertFalse(deallocateFirstCommand.equals(deallocateSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no allocations."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private void showNoAllocation(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        model.updateFilteredAllocationList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(model.getFilteredAllocationList().isEmpty());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 107
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/DeleteAliasCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.FIND_FI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.ROOMS_R;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.ROOMS_RO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.STUDENTS_STU;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.getTypicalUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DeleteAliasCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalResiReg(), getTypicalUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_validAlias_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias aliasToDelete \u003d FIND_FI;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        DeleteAliasCommand deleteCommand \u003d new DeleteAliasCommand(FIND_FI);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAliasCommand.MESSAGE_SUCCESS, aliasToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getResiReg(), model.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.deleteCommandWordAlias(aliasToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_invalidAlias_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias outOfBoundAlias \u003d ROOMS_RO;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        DeleteAliasCommand deleteCommand \u003d new DeleteAliasCommand(ROOMS_RO);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertCommandFailure(deleteCommand, model, DeleteAliasCommand.MESSAGE_INVALID_ALIAS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        DeleteAliasCommand deleteFirstCommand \u003d new DeleteAliasCommand(ROOMS_R);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        DeleteAliasCommand deleteSecondCommand \u003d new DeleteAliasCommand(STUDENTS_STU);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        DeleteAliasCommand deleteFirstCommandCopy \u003d new DeleteAliasCommand(ROOMS_R);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different command word alias -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "mkeoliya": 68
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Storage storage \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of students list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResiReg().getStudentList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Student toDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.deleteStudent(toDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // delete -\u003e first student deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        deleteCommand.execute(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // undo -\u003e reverts resireg back to previous state"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.undoResiReg();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.redoResiReg();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // execution failed -\u003e state not added to model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // single resireg state in model -\u003e undo and redo failures"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * 1. Deletes a {@code Student} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * 2. Undo deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * 3. The list should have the same filtering as before."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * 4. Remove list filtering. Verify the index of the deleted student has changed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * 5. Redo deletion, ensuring {@code RedoCommand} deletes the student"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameStudentDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        showStudentAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Student toDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.deleteStudent(toDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // delete -\u003e deletes second student in unfiltered student list, first student in filtered student list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        deleteCommand.execute(model, storage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // undo -\u003e reverts resireg back to previous state, keeps filtering"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.undoResiReg();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // remove filtering"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertNotEquals(toDelete, model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // redo -\u003e delete same second student in unfiltered student list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.redoResiReg();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 12,
      "Lysire": 60,
      "-": 77,
      "mkeoliya": 26,
      "chloelee767": 8
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Storage storage \u003d new StorageManager(null, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ResiReg(model.getResiReg()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ResiReg(model.getResiReg()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditStudentDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ResiReg(model.getResiReg()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ResiReg(model.getResiReg()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // edit student in filtered list into a duplicate in ResiReg"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Student studentInList \u003d model.getResiReg().getStudentList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * but smaller than size of ResiReg"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ResiReg\u0027s student list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResiReg().getStudentList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        EditStudentDescriptor desc \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, desc);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ResiReg(model.getResiReg()), new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // edit -\u003e first student edited"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        editCommand.execute(model, storage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // undo -\u003e reverts resireg back to prev state and filtered student list to show all students"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.undoResiReg();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // redo -\u003e same first student edited again"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.redoResiReg();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Index outofBounds \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        EditStudentDescriptor desc \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outofBounds, desc);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // execution failed -\u003e resireg state not added into model"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // single resireg state in mode -\u003e undo and redo fails"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * 1. Edits a {@code Student} from a filtered list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * 3. The list should have the same filtering as before."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * 4. Remove list filtering. Verify the index of the edited student has changed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the student object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * regardless of indexing."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameStudentEdited() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        EditStudentDescriptor desc \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, desc);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ResiReg(model.getResiReg()), new UserPrefs());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        showStudentAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // edit -\u003e edits second student in unfiltered list / first student in filtered student list"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        editCommand.execute(model, storage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // undo -\u003e reverts resireg back to prev state, keeps filtering"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.undoResiReg();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // remove filtering"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        model.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredStudentList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertNotEquals(model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased()), studentToEdit);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // redo -\u003e edits same second student in unfiltered student list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.redoResiReg();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 19,
      "Lysire": 67,
      "-": 107,
      "mkeoliya": 54,
      "chloelee767": 9
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/EditStudentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_STUDENT_ID_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different faculty -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withFaculty(VALID_FACULTY_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different student ID -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withStudentId(VALID_STUDENT_ID_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 63
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "mkeoliya": 5
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "-": 63,
      "mkeoliya": 17
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void executeWithNoCommand_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertCommandSuccess(helpCommand, model, HelpCommand.MESSAGE_GENERAL_HELP, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        HelpCommand helpCommandWithSpace \u003d new HelpCommand(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertCommandSuccess(helpCommandWithSpace, model, HelpCommand.MESSAGE_GENERAL_HELP, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void executeWithValidCommand_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertCommandSuccess(helpCommand, model, AddCommand.HELP.getFullMessage(), expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        HelpCommand helpCommandWithSpace \u003d new HelpCommand(AddCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertCommandSuccess(helpCommandWithSpace, model, AddCommand.HELP.getFullMessage(), expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        HelpCommand helpCommandForHelp \u003d new HelpCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertCommandSuccess(helpCommandForHelp, model, HelpCommand.HELP.getFullMessage(), expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void executeWithInvalidCommand_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String invalidCommand \u003d \"nonsenseCommand\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand(invalidCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertCommandFailure(helpCommand, model, String.format(HelpCommand.MESSAGE_UNKNOWN_COMMAND, invalidCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "mkeoliya": 1,
      "chloelee767": 40
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/ListAliasCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.getTypicalUserPrefs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class ListAliasCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Model fullModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Model expectedFullModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Model emptyModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Model expectedEmptyModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        fullModel \u003d new ModelManager(getTypicalResiReg(), getTypicalUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        expectedFullModel \u003d new ModelManager(fullModel.getResiReg(), fullModel.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        emptyModel \u003d new ModelManager(new ResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        expectedEmptyModel \u003d new ModelManager(emptyModel.getResiReg(), emptyModel.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_listExists_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertCommandSuccess(new ListAliasCommand(), fullModel,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            String.format(ListAliasCommand.MESSAGE_SUCCESS, fullModel.getCommandWordAliasesAsString()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            expectedFullModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void execute_listIsEmpty_showsEmptyMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertCommandSuccess(new ListAliasCommand(), emptyModel,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            ListAliasCommand.MESSAGE_EMPTY_ALIAS, expectedEmptyModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 6,
      "mkeoliya": 41
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "-": 28,
      "mkeoliya": 8
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/ListRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_C;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_C;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_C;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertToggleCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ListRoomCommand.RoomFilter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.testutil.RoomFilterBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class ListRoomCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ResiReg ab \u003d new ResiReg();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Room room1 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .withFloor(VALID_FLOOR_A).withRoomNumber(VALID_ROOM_NUMBER_A).withRoomType(VALID_ROOM_TYPE_A).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Room room2 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .withFloor(VALID_FLOOR_A).withRoomNumber(VALID_ROOM_NUMBER_B).withRoomType(VALID_ROOM_TYPE_B).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Room room3 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .withFloor(VALID_FLOOR_B).withRoomNumber(VALID_ROOM_NUMBER_A).withRoomType(VALID_ROOM_TYPE_C).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Room room4 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .withFloor(VALID_FLOOR_B).withRoomNumber(VALID_ROOM_NUMBER_C).withRoomType(VALID_ROOM_TYPE_A).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Room room5 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .withFloor(VALID_FLOOR_C).withRoomNumber(VALID_ROOM_NUMBER_C).withRoomType(VALID_ROOM_TYPE_B).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Room room6 \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .withFloor(VALID_FLOOR_C).withRoomNumber(VALID_ROOM_NUMBER_B).withRoomType(VALID_ROOM_TYPE_C).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Allocation allocation2 \u003d new Allocation(room2.getFloor(), room2.getRoomNumber(), ALICE.getStudentId());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Allocation allocation3 \u003d new Allocation(room3.getFloor(), room3.getRoomNumber(), BENSON.getStudentId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Allocation allocation5 \u003d new Allocation(room5.getFloor(), room5.getRoomNumber(), CARL.getStudentId());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (Room r: Arrays.asList(room1, room2, room3, room4, room5, room6)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ab.addRoom(r);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (Allocation a: Arrays.asList(allocation2, allocation3, allocation5)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ab.addAllocation(a);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        model \u003d new ModelManager(ab, new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void testSetUp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // RoomFilter tests"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // not sure how to test predicates"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void roomFilterEquals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(new RoomFilter(), new RoomFilter());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(new RoomFilter(), new RoomFilterBuilder().build());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilter();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.addFloors(Arrays.asList(new Floor(VALID_FLOOR_A)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(filter, new RoomFilterBuilder().addFloor(VALID_FLOOR_A).build());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertNotEquals(new RoomFilter(), filter);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(new ListRoomCommand(new RoomFilter()), new ListRoomCommand(new RoomFilter()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand command1 \u003d new ListRoomCommand(new RoomFilterBuilder().addRoomType(VALID_ROOM_TYPE_A).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand command2 \u003d new ListRoomCommand(new RoomFilterBuilder().addRoomType(VALID_ROOM_TYPE_A).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(command1, command2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // negative test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand command3 \u003d new ListRoomCommand(new RoomFilterBuilder().addRoomType(VALID_ROOM_TYPE_B).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertNotEquals(command1, command3);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // ListRoomCommand tests"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                new ListRoomCommand(new RoomFilter()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                model, ListRoomCommand.MESSAGE_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void execute_listFilterIsVacant_showsOnlyVacantRooms() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredRoomList((room, m) -\u003e !m.isAllocated(room));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var cmd \u003d new ListRoomCommand(new RoomFilterBuilder().onlyVacant().build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                cmd,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ListRoomCommand.MESSAGE_FILTERED_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void execute_listFilterIsAllocated_showsOnlyAllocatedRooms() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredRoomList((room, m) -\u003e m.isAllocated(room));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var cmd \u003d new ListRoomCommand(new RoomFilterBuilder().onlyAllocated().build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                cmd,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ListRoomCommand.MESSAGE_FILTERED_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void execute_listFilterSingleFloor_showsCorrect() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Floor floor \u003d new Floor(VALID_FLOOR_A);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e room.getFloor().equals(floor));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var cmd \u003d new ListRoomCommand(new RoomFilterBuilder().addFloor(floor).build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                cmd,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ListRoomCommand.MESSAGE_FILTERED_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void execute_listFilterMultipleFloors_showsCorrect() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Collection\u003cFloor\u003e floors \u003d Arrays.asList(new Floor(VALID_FLOOR_A), new Floor(VALID_FLOOR_B));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e floors.contains(room.getFloor()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var cmd \u003d new ListRoomCommand(new RoomFilterBuilder().addFloors(floors).build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                cmd,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ListRoomCommand.MESSAGE_FILTERED_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void execute_listFilterSingleRoomType_showsCorrect() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomType type \u003d new RoomType(VALID_ROOM_TYPE_A);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e room.getRoomType().equals(type));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var cmd \u003d new ListRoomCommand(new RoomFilterBuilder().addRoomType(type).build());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                cmd,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ListRoomCommand.MESSAGE_FILTERED_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void execute_listFilterMultipleRoomTypes_showsCorrect() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Collection\u003cRoomType\u003e types \u003d Arrays.asList(new RoomType(VALID_ROOM_TYPE_A), new RoomType(VALID_ROOM_TYPE_B));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e types.contains(room.getRoomType()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var cmd \u003d new ListRoomCommand(new RoomFilterBuilder().addRoomTypes(types).build());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                cmd,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ListRoomCommand.MESSAGE_FILTERED_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void execute_listFilterSingleRoomNumber_showsCorrect() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomNumber number \u003d new RoomNumber(VALID_ROOM_NUMBER_A);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e room.getRoomNumber().equals(number));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var cmd \u003d new ListRoomCommand(new RoomFilterBuilder().addRoomNumber(number).build());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                cmd,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ListRoomCommand.MESSAGE_FILTERED_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void execute_listFilterMultipleRoomNumbers_showsCorrect() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Collection\u003cRoomNumber\u003e numbers \u003d Arrays.asList(new RoomNumber(VALID_ROOM_NUMBER_A),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                new RoomNumber(VALID_ROOM_NUMBER_B));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e numbers.contains(room.getRoomNumber()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var cmd \u003d new ListRoomCommand(new RoomFilterBuilder().addRoomNumbers(numbers).build());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                cmd,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ListRoomCommand.MESSAGE_FILTERED_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void execute_listFilterDifferentAttributes_showsCorrect() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomType type \u003d new RoomType(VALID_ROOM_TYPE_B);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Floor floor \u003d new Floor(VALID_FLOOR_A);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e room.getFloor().equals(floor) \u0026\u0026 room.getRoomType().equals(type));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var cmd \u003d new ListRoomCommand(new RoomFilterBuilder().addRoomType(type).addFloor(floor).build());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertToggleCommandSuccess("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                cmd,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ListRoomCommand.MESSAGE_FILTERED_SUCCESS, expectedModel, TabView.ROOMS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 9,
      "Lysire": 30,
      "chloelee767": 171
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/ReallocateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.showRoomAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalAllocations.getTypicalResiReg;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIFTH_ROOM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_ROOM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FOURTH_ROOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_SECOND_ROOM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Contains unit tests for {@code ReallocateCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * TypicalResiReg is assumed to have allocated the first 3 students to the first 3 rooms, so the 4th student/room"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * is free to be allocated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class ReallocateCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Student studentToReallocate \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Room roomToReallocate \u003d model.getFilteredRoomList().get(INDEX_FOURTH_ROOM.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cAllocation\u003e lastShownListAllocation \u003d model.getFilteredAllocationList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Allocation toReallocate \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Allocation allocation : lastShownListAllocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            if (studentToReallocate.getStudentId().equals(allocation.getStudentId())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                toReallocate \u003d allocation;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Allocation editedAllocate \u003d new Allocation(roomToReallocate.getFloor(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                roomToReallocate.getRoomNumber(), studentToReallocate.getStudentId());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ReallocateCommand allocateCommand \u003d new ReallocateCommand(INDEX_FIRST_PERSON, INDEX_FOURTH_ROOM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String expectedMessage \u003d String.format(ReallocateCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                studentToReallocate.getName().fullName,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                roomToReallocate.getRoomLabel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        expectedModel.setAllocation(toReallocate, editedAllocate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        expectedModel.saveStateResiReg();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandSuccess(allocateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexStudentUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndexStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ReallocateCommand reallocateCommand \u003d new ReallocateCommand(outOfBoundIndexStudent, INDEX_FOURTH_ROOM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(reallocateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexRoomUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndexRoom \u003d Index.fromOneBased(model.getFilteredRoomList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ReallocateCommand reallocateCommand \u003d new ReallocateCommand(INDEX_FIRST_PERSON, outOfBoundIndexRoom);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(reallocateCommand, model, Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexStudentFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResiReg().getStudentList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ReallocateCommand reallocateCommand \u003d new ReallocateCommand(outOfBoundIndex, INDEX_FOURTH_ROOM);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(reallocateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void execute_invalidIndexRoomFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        showRoomAtIndex(model, INDEX_FIRST_ROOM);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ROOM;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResiReg().getRoomList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ReallocateCommand reallocateCommand \u003d new ReallocateCommand(INDEX_FIRST_PERSON, outOfBoundIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertCommandFailure(reallocateCommand, model, Messages.MESSAGE_INVALID_ROOM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ReallocateCommand reallocateFirstCommand \u003d new ReallocateCommand(INDEX_FIRST_PERSON, INDEX_FOURTH_ROOM);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ReallocateCommand reallocateSecondCommand \u003d new ReallocateCommand(INDEX_SECOND_PERSON, INDEX_FIFTH_ROOM);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(reallocateFirstCommand.equals(reallocateFirstCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ReallocateCommand reallocateFirstCommandCopy \u003d new ReallocateCommand(INDEX_FIRST_PERSON, INDEX_FOURTH_ROOM);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(reallocateFirstCommand.equals(reallocateFirstCommandCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertFalse(reallocateFirstCommand.equals(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertFalse(reallocateFirstCommand.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertFalse(reallocateFirstCommand.equals(reallocateSecondCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no allocations."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private void showNoAllocation(Model model) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        model.updateFilteredAllocationList(p -\u003e false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertTrue(model.getFilteredAllocationList().isEmpty());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 131
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/RedoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.deleteFirstStudent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // set up undo/redo history"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.undoResiReg();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        model.undoResiReg();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.undoResiReg();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.undoResiReg();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.redoResiReg();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.redoResiReg();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "Lysire": 44
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.deleteFirstStudent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalResiReg(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // set up undo/redo history"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.undoResiReg();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedModel.undoResiReg();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // no undoable states remaining"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 3,
      "Lysire": 40
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/AddAliasCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.ALIAS_DESC_ROOMS_RO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.COMMAND_DESC_ROOMS_RO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.COMMAND_DESC_STUDENTS_STU;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_ALIAS_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_COMMAND_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ALIAS_ROOMS_RO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_COMMAND_ROOMS_RO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.ROOMS_RO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddAliasCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.Alias;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.CommandWordAliasBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class AddAliasCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private AddAliasCommandParser parser \u003d new AddAliasCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias expectedAlias \u003d new CommandWordAliasBuilder(ROOMS_RO).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + COMMAND_DESC_ROOMS_RO"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + ALIAS_DESC_ROOMS_RO, new AddAliasCommand(expectedAlias));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // multiple command words - last name accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + COMMAND_DESC_STUDENTS_STU + COMMAND_DESC_ROOMS_RO"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + ALIAS_DESC_ROOMS_RO, new AddAliasCommand(expectedAlias));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.HELP.getFullMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // missing command word prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, VALID_COMMAND_ROOMS_RO + ALIAS_DESC_ROOMS_RO,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // missing alias prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, COMMAND_DESC_ROOMS_RO + VALID_ALIAS_ROOMS_RO,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, VALID_COMMAND_ROOMS_RO + VALID_ALIAS_ROOMS_RO, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid command word"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, INVALID_COMMAND_DESC + ALIAS_DESC_ROOMS_RO, CommandWord.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid alias"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, COMMAND_DESC_ROOMS_RO + INVALID_ALIAS_DESC, Alias.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, INVALID_COMMAND_DESC + INVALID_ALIAS_DESC, CommandWord.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + COMMAND_DESC_ROOMS_RO + ALIAS_DESC_ROOMS_RO,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 75
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_STUDENT_ID_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.STUDENT_ID_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.STUDENT_ID_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_STUDENT_ID_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // multiple faculties - last address accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + FACULTY_DESC_AMY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + FACULTY_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + STUDENT_ID_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new AddCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_AMY + STUDENT_ID_DESC_AMY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.HELP.getFullMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // missing faculty prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + VALID_FACULTY_BOB + STUDENT_ID_DESC_BOB,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + VALID_FACULTY_BOB + VALID_STUDENT_ID_BOB,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid faculty"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + INVALID_FACULTY_DESC + STUDENT_ID_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Faculty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid student ID"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + FACULTY_DESC_BOB + INVALID_STUDENT_ID_DESC"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, StudentId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_FACULTY_DESC"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + STUDENT_ID_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 162,
      "chloelee767": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                DeleteCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "mkeoliya": 6,
      "chloelee767": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_STUDENT_ID_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.STUDENT_ID_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.STUDENT_ID_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_STUDENT_ID_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_STUDENT_ID_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.HELP.getFullMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, \"1 j/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FACULTY_DESC, Faculty.MESSAGE_CONSTRAINTS); // invalid faculty"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STUDENT_ID_DESC, StudentId.MESSAGE_CONSTRAINTS); // invalid id"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_FACULTY_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + VALID_STUDENT_ID_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + EMAIL_DESC_AMY + FACULTY_DESC_AMY + STUDENT_ID_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withFaculty(VALID_FACULTY_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withStudentId(VALID_STUDENT_ID_AMY)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // faculty"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + FACULTY_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withFaculty(VALID_FACULTY_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + FACULTY_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + FACULTY_DESC_AMY + STUDENT_ID_DESC_AMY"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + PHONE_DESC_BOB + FACULTY_DESC_BOB + STUDENT_ID_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withFaculty(VALID_FACULTY_BOB).withStudentId(VALID_STUDENT_ID_BOB)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + FACULTY_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                + STUDENT_ID_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withFaculty(VALID_FACULTY_BOB).withStudentId(VALID_STUDENT_ID_BOB).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 142,
      "mkeoliya": 78,
      "chloelee767": 1
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                FindCommand.HELP.getFullMessage()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "mkeoliya": 6,
      "chloelee767": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/ListRoomCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_FLOOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.INVALID_ROOM_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_FLOOR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_ROOM_TYPE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.logic.commands.ListRoomCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ListRoomCommand.RoomFilter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.testutil.RoomFilterBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "class ListRoomCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static final String MESSAGE_INVALID_COMMAND \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListRoomCommand.HELP.getFullMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final ListRoomCommandParser parser \u003d new ListRoomCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void parse_whitespaceOnlyArg_returnsListRoomCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(new RoomFilter());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedListRoomCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // whitespace"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertParseSuccess(parser, \"            \", expectedListRoomCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // tabs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertParseSuccess(parser, \"\\t\", expectedListRoomCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // tabs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertParseSuccess(parser, \"         \\t       \", expectedListRoomCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void parse_validVacantCommand_returnsListRoomCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilter();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.onlyVacant();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_KEYWORD + ListRoomCommand.COMMAND_VACANT_FLAG,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                expectedListRoomCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void parse_validAllocatedCommand_returnsListRoomCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilter();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.onlyAllocated();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_KEYWORD + ListRoomCommand.COMMAND_ALLOCATED_FLAG,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                expectedListRoomCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_invalidVacancyFlag_throwsParseException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // missing flag"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_KEYWORD.getPrefix(), MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // no two dashes"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, \" -\", MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // misspelled vacant"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, \" --vacent\", MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // misspelled allocated"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, \" -allokated\", MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_bothVacantAndAllocated_throwsParseException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, PREFIX_KEYWORD + ListRoomCommand.COMMAND_ALLOCATED_FLAG + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                + PREFIX_KEYWORD + ListRoomCommand.COMMAND_VACANT_FLAG, MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // Floor"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_validFloor_returnListRoomCommand() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilter();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.addFloors(Arrays.asList(new Floor(VALID_FLOOR_A)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_ROOM_FLOOR + VALID_FLOOR_A, expectedListRoomCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_validFloors_returnListRoomCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilter();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.addFloors(Arrays.asList(new Floor(VALID_FLOOR_A), new Floor(VALID_FLOOR_B)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_ROOM_FLOOR + VALID_FLOOR_A + \" \" + PREFIX_ROOM_FLOOR + VALID_FLOOR_B,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                expectedListRoomCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_invalidFloor_throwsCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_ROOM_FLOOR + VALID_FLOOR_A + \" \" + PREFIX_ROOM_FLOOR + INVALID_FLOOR,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Floor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // RoomNumber"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_validRoomNumber_returnListRoomCommand() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilterBuilder().addRoomNumber(VALID_ROOM_NUMBER_A).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_ROOM_NUMBER + VALID_ROOM_NUMBER_A, expectedListRoomCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_validRoomNumbers_returnListRoomCommand() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilterBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .addRoomNumber(VALID_ROOM_NUMBER_A).addRoomNumber(VALID_ROOM_NUMBER_B).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_ROOM_NUMBER + VALID_ROOM_NUMBER_A"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                + \" \" + PREFIX_ROOM_NUMBER + VALID_ROOM_NUMBER_B, expectedListRoomCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_invalidRoomNumber_throwsCommandException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_ROOM_NUMBER + VALID_ROOM_NUMBER_A"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                        + \" \" + PREFIX_ROOM_NUMBER + INVALID_ROOM_NUMBER, RoomNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // RoomType"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_validRoomType_returnListRoomCommand() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilterBuilder().addRoomType(VALID_ROOM_TYPE_A).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_ROOM_TYPE + VALID_ROOM_TYPE_A, expectedListRoomCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_validRoomTypes_returnListRoomCommand() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilterBuilder()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .addRoomType(VALID_ROOM_TYPE_A).addRoomType(VALID_ROOM_TYPE_B).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_ROOM_TYPE + VALID_ROOM_TYPE_A"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                + \" \" + PREFIX_ROOM_TYPE + VALID_ROOM_TYPE_B, expectedListRoomCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_invalidRoomType_throwsCommandException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_ROOM_TYPE + VALID_ROOM_TYPE_A"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                + \" \" + PREFIX_ROOM_TYPE + INVALID_ROOM_TYPE, RoomType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void parse_multipleFilterTypes_returnListRoomCommand() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        RoomFilter filter \u003d new RoomFilterBuilder()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .onlyVacant().addRoomType(VALID_ROOM_TYPE_A).addFloor(VALID_FLOOR_A).addFloor(VALID_FLOOR_B).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ListRoomCommand expectedListRoomCommand \u003d new ListRoomCommand(filter);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_ROOM_TYPE + VALID_ROOM_TYPE_A + \" \" + PREFIX_ROOM_FLOOR + VALID_FLOOR_A"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                + \" \" + PREFIX_ROOM_FLOOR + VALID_FLOOR_B + \" \" + PREFIX_KEYWORD + ListRoomCommand.COMMAND_VACANT_FLAG,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                expectedListRoomCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 46,
      "chloelee767": 127
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_FACULTY \u003d \"foo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_STUDENT_ID \u003d \"bar\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String VALID_FACULTY \u003d \"FASS\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String VALID_STUDENT_ID \u003d \"E0111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parseFaculty_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFaculty((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parseFaculty_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFaculty(INVALID_FACULTY));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parseFaculty_validValueWithoutWhitespace_returnsFaculty() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Faculty expectedFaculty \u003d new Faculty(VALID_FACULTY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedFaculty, ParserUtil.parseFaculty(VALID_FACULTY));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void parseFaculty_validValueWithWhitespace_returnsTrimmedFaculty() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String facultyWithWhitespace \u003d WHITESPACE + VALID_FACULTY + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Faculty expectedFaculty \u003d new Faculty(VALID_FACULTY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedFaculty, ParserUtil.parseFaculty(facultyWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parseStudentId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStudentId((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parseStudentId_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStudentId(INVALID_STUDENT_ID));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parseStudentId_validValueWithoutWhitespace_returnsStudentId() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        StudentId expectedStudentId \u003d new StudentId(VALID_STUDENT_ID);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedStudentId, ParserUtil.parseStudentId(VALID_STUDENT_ID));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void parseStudentId_validValueWithWhitespace_returnsTrimmedStudentId() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String studentIdWithWhitespace \u003d WHITESPACE + VALID_STUDENT_ID + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        StudentId expectedStudentId \u003d new StudentId(VALID_STUDENT_ID);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedStudentId, ParserUtil.parseStudentId(studentIdWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 173,
      "mkeoliya": 48
    }
  },
  {
    "path": "src/test/java/seedu/resireg/logic/parser/ResiRegParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class ResiRegParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static final String MOCK_COMMAND_WORD \u003d \"command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final ResiRegParser mockParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static class MockCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        private final String userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        MockCommand(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new CommandException(\"unimplemented stub method\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public String getUserInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return userInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    ResiRegParserTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Map\u003cString, Parser\u003cCommand\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        map.put(MOCK_COMMAND_WORD, MockCommand::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        mockParser \u003d new ResiRegParser(map);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void parseCommand_validCommandWordNoArgs() throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(\"\", ((MockCommand) mockParser.parseCommand(MOCK_COMMAND_WORD)).getUserInput());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void parseCommand_validCommandWordWithArgs() throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(\" args\", ((MockCommand) mockParser.parseCommand(MOCK_COMMAND_WORD + \" args\")).getUserInput());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(\" a1 a2\", ((MockCommand) mockParser.parseCommand(MOCK_COMMAND_WORD + \" a1 a2\")).getUserInput());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void parseCommand_validCommandWordWithArgsTrailingSpaces() throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // check that trailing spaces are removed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(\" args\", ((MockCommand) mockParser.parseCommand(MOCK_COMMAND_WORD + \" args  \")).getUserInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void parseCommand_invalidCommandWord() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e mockParser.parseCommand(\"nonexistentCommand\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void parseCommand_invalidCommandWordSubset() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e mockParser.parseCommand(MOCK_COMMAND_WORD + \"asdfj\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e mockParser.parseCommand(\"asdfj\" + MOCK_COMMAND_WORD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 6,
      "-": 33,
      "mkeoliya": 2,
      "chloelee767": 33
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.ROOMS_R;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.STUDENTS_ST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalRooms.ROOM_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.testutil.ResiRegBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.UserPrefsBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(new ResiReg(), new ResiReg(modelManager.getResiReg()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        userPrefs.setResiRegFilePath(Paths.get(\"resi/reg/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        userPrefs.setResiRegFilePath(Paths.get(\"new/resi/reg/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void setResiRegFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setResiRegFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void setResiRegFilePath_validPath_setsResiRegFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Path path \u003d Paths.get(\"resi/reg/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        modelManager.setResiRegFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(path, modelManager.getResiRegFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void hasStudent_studentNotInResiReg_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void hasStudent_studentInResiReg_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Rooms"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void getFilteredRoomList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRoomList().remove(0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasRoom_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRoom(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasRoom_roomNotInResiReg_returnsFalse() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(modelManager.hasRoom(ROOM_ONE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasRoom_roomInResiReg_returnsTrue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        modelManager.addRoom(ROOM_ONE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(modelManager.hasRoom(ROOM_ONE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Allocations (to be added)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Command word aliases"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void getAliasList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getCommandWordAliases().remove(0));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasCommandWordAlias_nullAlias_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCommandWordAlias(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasCommandWordAlias_aliasNotInUserPrefs_returnsFalse() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(modelManager.hasCommandWordAlias(ROOMS_R));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasCommandWordAlias_aliasInUserPrefs_returnsTrue() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        modelManager.addCommandWordAlias(ROOMS_R);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(modelManager.hasCommandWordAlias(ROOMS_R));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg resiReg \u003d new ResiRegBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg differentResiReg \u003d new ResiReg();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefsBuilder().withCommandWordAlias(ROOMS_R)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withCommandWordAlias(STUDENTS_ST).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        modelManager \u003d new ModelManager(resiReg, userPrefs);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(resiReg, userPrefs);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // different resiReg -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentResiReg, userPrefs)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // different resiReg -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(resiReg, differentUserPrefs)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(resiReg, userPrefs)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different alias list -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        modelManager.deleteCommandWordAlias(STUDENTS_ST);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(resiReg, userPrefs)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        modelManager.addCommandWordAlias(STUDENTS_ST);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        differentUserPrefs.setResiRegFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(resiReg, differentUserPrefs)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 24,
      "-": 92,
      "mkeoliya": 75
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/ResiRegTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_DAMAGED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_RENOVATED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalRooms.ROOM_ONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.testutil.TypicalSemesters;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class ResiRegTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final ResiReg resiReg \u003d new ResiReg();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(Collections.emptyList(), resiReg.getStudentList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e resiReg.resetData(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void resetData_withValidReadOnlyResiReg_replacesData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg newData \u003d getTypicalResiReg();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiReg.resetData(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(newData, resiReg);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiRegStub newData \u003d new ResiRegStub(newStudents, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e resiReg.resetData(newData));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e resiReg.hasStudent(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void hasStudent_studentNotInResiReg_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(resiReg.hasStudent(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void hasStudent_studentInResiReg_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiReg.addStudent(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(resiReg.hasStudent(ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInResiReg_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiReg.addStudent(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(resiReg.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e resiReg.getStudentList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Rooms"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void resetData_withDuplicateRooms_throwsDuplicateRoomException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // Two rooms with the same identity fields"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Room editedOne \u003d new RoomBuilder(ROOM_ONE).withTags(VALID_TAG_RENOVATED).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cRoom\u003e newRooms \u003d Arrays.asList(ROOM_ONE, editedOne);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiRegStub newData \u003d new ResiRegStub(new ArrayList\u003c\u003e(), newRooms);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(DuplicateRoomException.class, () -\u003e resiReg.resetData(newData));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasRoom_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e resiReg.hasRoom(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasRoom_roomNotInResiReg_returnsFalse() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(resiReg.hasRoom(ROOM_ONE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasRoom_roomInResiReg_returnsTrue() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiReg.addRoom(ROOM_ONE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(resiReg.hasRoom(ROOM_ONE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasRoom_roomWithSameIdentityFieldsInResiReg_returnsTrue() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiReg.addRoom(ROOM_ONE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder(ROOM_ONE).withRoomType(VALID_ROOM_TYPE_B).withTags(VALID_TAG_DAMAGED)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(resiReg.hasRoom(editedRoom));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void getRoomList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e resiReg.getRoomList().remove(0));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * A stub ReadOnlyResiReg whose students list can violate interface constraints."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static class ResiRegStub implements ReadOnlyResiReg {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        private final Semester semester \u003d TypicalSemesters.AY2020_SEM_2;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        private final ObservableList\u003cRoom\u003e rooms \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        private final ObservableList\u003cAllocation\u003e allocations \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiRegStub(Collection\u003cStudent\u003e students, Collection\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            this.students.setAll(students); // todo: set rooms"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.rooms.setAll(rooms);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Semester getSemester() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return semester;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public String getSemesterString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return semester.getShortRepresentation();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            return rooms;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        public ObservableList\u003cAllocation\u003e getAllocationList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return allocations;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 7,
      "JingYenLoh": 47,
      "Lysire": 7,
      "mkeoliya": 117
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.ROOMS_R;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.exceptions.DuplicateCommandWordAliasException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.CommandWordAliasBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void setResiRegFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setResiRegFilePath(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void resetData_withDuplicateAliases_throwsDuplicateCommandWordAliasException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias editedAlias \u003d new CommandWordAliasBuilder(ROOMS_R).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cCommandWordAlias\u003e newAliases \u003d Arrays.asList(ROOMS_R, editedAlias);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UserPrefsStub newData \u003d new UserPrefsStub(newAliases);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(DuplicateCommandWordAliasException.class, () -\u003e userPrefs.resetData(newData));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasAlias_nullAlias_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.hasAlias(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasAlias_aliasNotInUserPrefs_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(userPrefs.hasAlias(ROOMS_R));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void hasAlias_aliasInUserPrefs_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userPrefs.addAlias(ROOMS_R);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(userPrefs.hasAlias(ROOMS_R));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * A stub ReadOnlyAddressBook whose students list can violate interface constraints."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static class UserPrefsStub implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        private List\u003cCommandWordAlias\u003e commandWordAliases;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        private Path resiRegFilePath \u003d Paths.get(\"data\" , \"resireg.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UserPrefsStub(List\u003cCommandWordAlias\u003e commandWordAliases) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            this.commandWordAliases \u003d commandWordAliases;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return guiSettings;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        public List\u003cCommandWordAlias\u003e getCommandWordAliases() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return commandWordAliases;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        public Path getResiRegFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return resiRegFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 5,
      "-": 17,
      "mkeoliya": 67
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/VersionedResiRegTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.exceptions.NoRedoableStateException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.exceptions.NoUndoableStateException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.testutil.ResiRegBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "class VersionedResiRegTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final ReadOnlyResiReg resiRegWithAmy \u003d new ResiRegBuilder().withStudent(AMY).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final ReadOnlyResiReg resiRegWithBob \u003d new ResiRegBuilder().withStudent(BOB).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final ReadOnlyResiReg resiRegWithCarl \u003d new ResiRegBuilder().withStudent(CARL).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final ReadOnlyResiReg emptyResiReg \u003d new ResiRegBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void commit_singleResiReg_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList(emptyResiReg);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.save();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertResiRegListStatus(versionedResiReg,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.singletonList(emptyResiReg),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void commit_multipleResiRegPtrAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.save();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertResiRegListStatus(versionedResiReg,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Arrays.asList(emptyResiReg, resiRegWithAmy, resiRegWithBob),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                resiRegWithBob,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void commit_multipleResiRegPtrNotAtEndOfStateList_statesAfterPtrRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.save();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertResiRegListStatus(versionedResiReg,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.singletonList(emptyResiReg),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void canUndo_multipleResiRegPtrAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(versionedResiReg.canUndo());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void canUndo_multipleResiRegPtrAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(versionedResiReg.canUndo());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void canUndo_singleResiReg_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList(emptyResiReg);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(versionedResiReg.canUndo());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void canUndo_multipleResiRegPtrAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(versionedResiReg.canUndo());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void canRedo_multipleResiRegPtrNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(versionedResiReg.canRedo());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void canRedo_multipleResiRegPtrAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(versionedResiReg.canRedo());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void canRedo_singleResiReg_returnsFalse() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList(emptyResiReg);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(versionedResiReg.canRedo());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void canRedo_multipleResiRegPtrAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(versionedResiReg.canRedo());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void undo_multipleResiRegPtrAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.undo();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertResiRegListStatus(versionedResiReg,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.singletonList(emptyResiReg),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                resiRegWithAmy,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.singletonList(resiRegWithBob));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void undo_multipleResiRegPtrNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.undo();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertResiRegListStatus(versionedResiReg,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Arrays.asList(resiRegWithAmy, resiRegWithBob));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void undo_singleResiReg_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList(emptyResiReg);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NoUndoableStateException.class, versionedResiReg::undo);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void undo_multipleResiRegPtrAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NoUndoableStateException.class, versionedResiReg::undo);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void redo_multipleResiRegPtrNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.redo();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertResiRegListStatus(versionedResiReg,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Arrays.asList(emptyResiReg, resiRegWithAmy),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                resiRegWithBob,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void redo_multipleResiRegPtrAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 2);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        versionedResiReg.redo();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertResiRegListStatus(versionedResiReg,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.singletonList(emptyResiReg),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                resiRegWithAmy,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.singletonList(resiRegWithBob));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void redo_singleResiReg_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList(emptyResiReg);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NoRedoableStateException.class, versionedResiReg::redo);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void redo_multipleResiRegPtrAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NoRedoableStateException.class, versionedResiReg::redo);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d prepareResiRegList(resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg cp \u003d prepareResiRegList(resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(versionedResiReg.equals(cp));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(versionedResiReg.equals(versionedResiReg));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(versionedResiReg.equals(null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(versionedResiReg.equals(\"\"));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg diff \u003d prepareResiRegList(resiRegWithAmy, resiRegWithCarl);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(versionedResiReg.equals(diff));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different index of curr ptr -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg diffStatePtr \u003d prepareResiRegList("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                emptyResiReg, resiRegWithAmy, resiRegWithBob);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        shiftCurrentStatePtrLeft(versionedResiReg, 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(versionedResiReg.equals(diffStatePtr));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Asserts that {@code versionedResiReg} currently points to {@code expectedCurrentState},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * states before {@code versionedResiReg#currentStatePtr} is equal to"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * {@code expectedStatesBeforePtr} and states after {@code versionedResiReg#currentStatePtr}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * is equal to {@code expectedStatesAfterPtr}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private void assertResiRegListStatus(VersionedResiReg versionedResiReg,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                                         List\u003cReadOnlyResiReg\u003e expectedStatesBeforePtr,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                                         ReadOnlyResiReg expectedCurrentState,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                                         List\u003cReadOnlyResiReg\u003e expectedStatesAfterPtr) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // check state currently pointing to is correct"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(new ResiReg(versionedResiReg), expectedCurrentState);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // shift ptr to start of state list"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        while (versionedResiReg.canUndo()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            versionedResiReg.undo();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // check states before ptr are correct"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        for (var expectedResiReg : expectedStatesBeforePtr) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            assertEquals(expectedResiReg, new ResiReg(versionedResiReg));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            versionedResiReg.redo();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // check states after ptr are correct"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        for (var expectedResiReg : expectedStatesAfterPtr) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            versionedResiReg.redo();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            assertEquals(expectedResiReg, new ResiReg(versionedResiReg));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // check that there are not more states after ptr"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(versionedResiReg.canRedo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // revert ptr to original position"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedStatesAfterPtr.forEach(unused -\u003e versionedResiReg.undo());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Creates and returns a {@code VersionedResiReg} with the {@code resiRegStates} added into it, and"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * the {@code VersionedResiReg#currentStatePtr} at the end of the list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private VersionedResiReg prepareResiRegList(ReadOnlyResiReg ...resiRegStates) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(resiRegStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        VersionedResiReg versionedResiReg \u003d new VersionedResiReg(resiRegStates[0]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        for (int i \u003d 1; i \u003c resiRegStates.length; i++) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            versionedResiReg.resetData(resiRegStates[i]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            versionedResiReg.save();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return versionedResiReg;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Shifts the {@code versionedResiReg#currentStatePtr} by {@code shift} to the left of the list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private void shiftCurrentStatePtrLeft(VersionedResiReg versionedResiReg, int ctr) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        for (int i \u003d 0; i \u003c ctr; i++) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            versionedResiReg.undo();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 12,
      "Lysire": 289
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/alias/AliasTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "class AliasTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Alias(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void constructor_invalidFloor_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String invalidFloor \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Alias(invalidFloor));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void isValidAlias() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null alias"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Alias.isValidAlias(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid alias"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Alias.isValidAlias(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Alias.isValidAlias(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Alias.isValidAlias(\"123\")); // contains 3 digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Alias.isValidAlias(\"01\")); // starts with 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Alias.isValidAlias(AddCommand.COMMAND_WORD)); // only non-numeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Alias.isValidAlias(ListCommand.COMMAND_WORD)); // contains non-numeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Alias.isValidAlias(\"two words\")); // contains multiple words"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // valid alias"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(Alias.isValidAlias(\"ro\")); // 2 digits"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(Alias.isValidAlias(\"stu\")); // 1 digit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 46
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/alias/CommandWordAliasTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ALIAS_STUDENTS_ST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_COMMAND_STUDENTS_ST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.ROOMS_R;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.STUDENTS_ST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.CommandWordAliasBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class CommandWordAliasTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias roomsCopy \u003d new CommandWordAliasBuilder(ROOMS_R).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(ROOMS_R.equals(roomsCopy));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(ROOMS_R.equals(ROOMS_R));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ROOMS_R.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ROOMS_R.equals(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ROOMS_R.equals(STUDENTS_ST));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different command word -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        CommandWordAlias editedRoomAlias \u003d new CommandWordAliasBuilder(ROOMS_R)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withCommandWord(VALID_COMMAND_STUDENTS_ST).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ROOMS_R.equals(editedRoomAlias));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different alias -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedRoomAlias \u003d new CommandWordAliasBuilder(ROOMS_R).withAlias(VALID_ALIAS_STUDENTS_ST).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ROOMS_R.equals(editedRoomAlias));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 44
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/alias/CommandWordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "class CommandWordTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CommandWord(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void constructor_invalidFloor_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String invalidCommandWord \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CommandWord(invalidCommandWord));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    void isValidCommandWord() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null command word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CommandWord.isValidCommandWord(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid command word"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(CommandWord.isValidCommandWord(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(CommandWord.isValidCommandWord(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(CommandWord.isValidCommandWord(\"123\")); // contains 3 digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(CommandWord.isValidCommandWord(\"01\")); // starts with 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(CommandWord.isValidCommandWord(\"two words\")); // contains multiple words"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // valid command word"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(CommandWord.isValidCommandWord(AddCommand.COMMAND_WORD)); // 2 digits"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(CommandWord.isValidCommandWord(ListCommand.COMMAND_WORD)); // 1 digit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(CommandWord.isValidCommandWord(AddCommand.COMMAND_WORD + \" \")); // only non-numeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(CommandWord.isValidCommandWord(ListCommand.COMMAND_WORD + \"\\t\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 45
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/room/FloorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "class FloorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Floor(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void constructor_invalidFloor_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        String invalidFloor \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Floor(invalidFloor));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    void isValidFloor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Floor.isValidFloor(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // invalid floor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(Floor.isValidFloor(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(Floor.isValidFloor(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(Floor.isValidFloor(\"^\")); // only non-numeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(Floor.isValidFloor(\"1*\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(Floor.isValidFloor(\"123\")); // contains 3 digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(Floor.isValidFloor(\"01\")); // starts with 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // valid floor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(Floor.isValidFloor(\"12\")); // 2 digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(Floor.isValidFloor(\"9\")); // 1 digit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 40
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/room/RoomNameContainsKeywordPairsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class RoomNameContainsKeywordPairsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        List\u003cMap.Entry\u003cString, String\u003e\u003e firstPredicateKeywordList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Collections.singletonList(Map.entry(\"1\", \"2\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        List\u003cMap.Entry\u003cString, String\u003e\u003e secondPredicateKeywordList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Arrays.asList(Map.entry(\"1\", \"2\"), Map.entry(\"3\", \"4\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        RoomNameContainsKeywordPairsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                new RoomNameContainsKeywordPairsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        RoomNameContainsKeywordPairsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                new RoomNameContainsKeywordPairsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        RoomNameContainsKeywordPairsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                new RoomNameContainsKeywordPairsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void test_nameContainsPairs_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // Matching Keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        RoomNameContainsKeywordPairsPredicate predicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                new RoomNameContainsKeywordPairsPredicate(Collections.singletonList(Map.entry(\"11\", \"108\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(predicate.test(new RoomBuilder().withFloor(\"11\").withRoomNumber(\"108\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        predicate \u003d new RoomNameContainsKeywordPairsPredicate("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                Arrays.asList(Map.entry(\"11\", \"108\"), Map.entry(\"12\", \"109\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(predicate.test(new RoomBuilder().withFloor(\"11\").withRoomNumber(\"108\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void test_nameDoesNotContainPairs_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        RoomNameContainsKeywordPairsPredicate predicate \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                new RoomNameContainsKeywordPairsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(predicate.test(new RoomBuilder().withFloor(\"11\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // Non-matching pair (one keyword, floor does not match)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                new RoomNameContainsKeywordPairsPredicate(Collections.singletonList(Map.entry(\"11\", \"108\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(predicate.test(new RoomBuilder().withFloor(\"12\").withRoomNumber(\"108\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // Non-matching pair (one keyword, room number does not match)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                new RoomNameContainsKeywordPairsPredicate(Collections.singletonList(Map.entry(\"11\", \"108\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(predicate.test(new RoomBuilder().withFloor(\"11\").withRoomNumber(\"109\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // Non-matching pair (both keywords)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                new RoomNameContainsKeywordPairsPredicate(Collections.singletonList(Map.entry(\"11\", \"108\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(predicate.test(new RoomBuilder().withFloor(\"12\").withRoomNumber(\"109\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 84
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/room/RoomNumberTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "class RoomNumberTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RoomNumber(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void constructor_invalidRoomNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        String invalidRoomNumber \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RoomNumber(invalidRoomNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    void isValidRoomNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RoomNumber.isValidRoomNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // invalid floor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"^\")); // only non-numeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"1*\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"1\")); // contains 1 digit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"12\")); // contains 2 digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomNumber.isValidRoomNumber(\"012\")); // starts with 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // valid floor"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(RoomNumber.isValidRoomNumber(\"123\")); // small number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(RoomNumber.isValidRoomNumber(\"450\")); // medium number"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(RoomNumber.isValidRoomNumber(\"912\")); // big number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 41
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/room/RoomTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_DAMAGED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.TypicalRooms.ROOM_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.TypicalRooms.ROOM_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class RoomTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e room.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void isSameRoom() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // same object, returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(ROOM_A.isSameRoom(ROOM_A));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // null, returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.isSameRoom(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different room type, same floor and room number -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Room editedRoomA \u003d new RoomBuilder(ROOM_A).withRoomType(VALID_ROOM_TYPE_B).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(ROOM_A.isSameRoom(editedRoomA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different tags, same floor and room number -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        editedRoomA \u003d new RoomBuilder(ROOM_A).withTags(VALID_TAG_DAMAGED).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(ROOM_A.isSameRoom(editedRoomA));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different floor -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        editedRoomA \u003d new RoomBuilder(ROOM_A).withFloor(VALID_FLOOR_B).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.isSameRoom(editedRoomA));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        editedRoomA \u003d new RoomBuilder(ROOM_A).withRoomNumber(VALID_ROOM_NUMBER_B).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.isSameRoom(editedRoomA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Room roomACopy \u003d new RoomBuilder(ROOM_A).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(ROOM_A.equals(roomACopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(ROOM_A.equals(ROOM_A));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.equals(7));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different room -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.equals(ROOM_B));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different floor -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Room editedRoomA \u003d new RoomBuilder(ROOM_A).withFloor(VALID_FLOOR_B).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.equals(editedRoomA));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        editedRoomA \u003d new RoomBuilder(ROOM_A).withRoomNumber(VALID_ROOM_NUMBER_B).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.equals(editedRoomA));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different room type -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        editedRoomA \u003d new RoomBuilder(ROOM_A).withRoomType(VALID_ROOM_TYPE_B).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.equals(editedRoomA));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        editedRoomA \u003d new RoomBuilder(ROOM_A).withTags(VALID_TAG_DAMAGED).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(ROOM_A.equals(editedRoomA));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 84
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/room/UniqueRoomListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_DAMAGED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.TypicalRooms.ROOM_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.TypicalRooms.ROOM_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.exceptions.RoomNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class UniqueRoomListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private final UniqueRoomList uniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void contains_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void contains_roomNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(uniqueRoomList.contains(ROOM_A));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void contains_roomInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(uniqueRoomList.contains(ROOM_A));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void contains_roomWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Room editedRoomA \u003d new RoomBuilder(ROOM_A).withRoomType(VALID_ROOM_TYPE_B).withTags(VALID_TAG_DAMAGED)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(uniqueRoomList.contains(editedRoomA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void add_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void add_duplicateRoom_throwsDuplicateRoomException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(DuplicateRoomException.class, () -\u003e uniqueRoomList.add(ROOM_A));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRoom_nullTargetRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.setRoom(null, ROOM_A));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRoom_nullEditedRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.setRoom(ROOM_A, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRoom_targetRoomNotInList_throwsRoomNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(RoomNotFoundException.class, () -\u003e uniqueRoomList.setRoom(ROOM_A, ROOM_A));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRoom_editedRoomIsSameRoom_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.setRoom(ROOM_A, ROOM_A);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedUniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertEquals(expectedUniqueRoomList, uniqueRoomList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRoom_editedRoomHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        Room editedRoomA \u003d new RoomBuilder(ROOM_A).withRoomType(VALID_ROOM_TYPE_B).withTags(VALID_TAG_DAMAGED)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.setRoom(ROOM_A, editedRoomA);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedUniqueRoomList.add(editedRoomA);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertEquals(expectedUniqueRoomList, uniqueRoomList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRoom_editedRoomHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.setRoom(ROOM_A, ROOM_B);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedUniqueRoomList.add(ROOM_B);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertEquals(expectedUniqueRoomList, uniqueRoomList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRoom_editedRoomHasNonUniqueIdentity_throwsDuplicateRoomException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_B);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(DuplicateRoomException.class, () -\u003e uniqueRoomList.setRoom(ROOM_A, ROOM_B));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void remove_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void remove_roomDoesNotExist_throwsRoomNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(RoomNotFoundException.class, () -\u003e uniqueRoomList.remove(ROOM_A));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void remove_existingRoom_removesRoom() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.remove(ROOM_A);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertEquals(expectedUniqueRoomList, uniqueRoomList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRooms_nullUniqueRoomList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.setRooms((UniqueRoomList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRooms_uniqueRoomList_replacesOwnListWithProvidedUniqueRoomList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedUniqueRoomList.add(ROOM_B);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.setRooms(expectedUniqueRoomList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertEquals(expectedUniqueRoomList, uniqueRoomList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRooms_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoomList.setRooms((List\u003cRoom\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRooms_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.add(ROOM_A);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        List\u003cRoom\u003e roomList \u003d Collections.singletonList(ROOM_B);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        uniqueRoomList.setRooms(roomList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        UniqueRoomList expectedUniqueRoomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        expectedUniqueRoomList.add(ROOM_B);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertEquals(expectedUniqueRoomList, uniqueRoomList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void setRooms_listWithDuplicateRooms_throwsDuplicateRoomException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        List\u003cRoom\u003e listWithDuplicateRooms \u003d Arrays.asList(ROOM_A, ROOM_A);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(DuplicateRoomException.class, () -\u003e uniqueRoomList.setRooms(listWithDuplicateRooms));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            -\u003e uniqueRoomList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lysire": 170
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/room/roomtype/RoomTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.model.room.roomtype;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class RoomTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RoomType(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void constructor_invalidRoomType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        String invalidRoomType \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RoomType(invalidRoomType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public void isValidRoomType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // null roomtype"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RoomType.isValidRoomType(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // invalid roomtypes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomType.isValidRoomType(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomType.isValidRoomType(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertFalse(RoomType.isValidRoomType(\"dnfj\")); // invalid roomtype abbreviation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        // valid roomtypes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(RoomType.isValidRoomType(\"CA\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(RoomType.isValidRoomType(\"CN\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(RoomType.isValidRoomType(\"NA\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        assertTrue(RoomType.isValidRoomType(\"NN\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "Lysire": 37
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/semester/AcademicYearTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.academicyear.AcademicYear;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "class AcademicYearTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void constructor_invalidAcademicYear_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        int invalidAcademicYear \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AcademicYear(invalidAcademicYear));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void isValidAcademicYear() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // invalid academic years"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(AcademicYear.isValidAcademicYear(0)); // zero"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(AcademicYear.isValidAcademicYear(-1)); // negative numbers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(AcademicYear.isValidAcademicYear(AcademicYear.YEAR_OF_ESTABLISHMENT - 1)); // \u003c 1980"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(AcademicYear.isValidAcademicYear(Integer.MIN_VALUE)); // boundary"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // valid academic years"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(AcademicYear.isValidAcademicYear(AcademicYear.YEAR_OF_ESTABLISHMENT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(AcademicYear.isValidAcademicYear(2020)); // current AY at time of writing test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 31
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/semester/RoomRateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.roomrate.RoomRate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "class RoomRateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void constructor_invalidRoomRate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        int invalidRoomRate \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RoomRate(invalidRoomRate));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void isValidRoomRate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // invalid room rates"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(RoomRate.isValidRoomRate(0)); // zero"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(RoomRate.isValidRoomRate(-1)); // negative numbers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(RoomRate.isValidRoomRate(Integer.MIN_VALUE)); // boundary"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // valid room rates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(RoomRate.isValidRoomRate(1)); // positive number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(RoomRate.isValidRoomRate(Integer.MAX_VALUE)); // boundary. Infeasible, but hey"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        RoomRate rateA \u003d new RoomRate(2500);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        RoomRate rateB \u003d new RoomRate(2500);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // same room rates should have same hashcode"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(rateA.hashCode(), rateB.hashCode());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 39
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/semester/SemesterNumberTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.semesternumber.SemesterNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "class SemesterNumberTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void constructor_invalidSemesterNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        int invalidSemesterNumber \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SemesterNumber(invalidSemesterNumber));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void isValidSemesterNumber() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // invalid semester numbers"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(SemesterNumber.isValidSemesterNumber(0)); // zero"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(SemesterNumber.isValidSemesterNumber(-1)); // negative numbers"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(SemesterNumber.isValidSemesterNumber(3)); // \u003e 2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(SemesterNumber.isValidSemesterNumber(Integer.MIN_VALUE)); // boundary"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(SemesterNumber.isValidSemesterNumber(Integer.MAX_VALUE)); // boundary"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // valid semester numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(SemesterNumber.isValidSemesterNumber(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(SemesterNumber.isValidSemesterNumber(2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 31
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/semester/SemesterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalSemesters.AY2020_SEM_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalSemesters.AY2020_SEM_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.testutil.SemesterBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "class SemesterTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void isSameSemester() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(AY2020_SEM_1.isSameSemester(AY2020_SEM_1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(AY2020_SEM_1.isSameSemester(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(AY2020_SEM_1.isSameSemester(AY2020_SEM_1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(AY2020_SEM_1.isSameSemester(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // different semesters -\u003e different string representations"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertNotEquals(AY2020_SEM_1.toString(), AY2020_SEM_2.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void getShortRepresentation() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // equals"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String ay2020Sem1ShortRepresentation \u003d AY2020_SEM_1.getShortRepresentation();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(ay2020Sem1ShortRepresentation.substring(0, 2).equals(\"AY\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertTrue(ay2020Sem1ShortRepresentation.endsWith(\"1\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String ay2020Sem2ShortRepresentation \u003d AY2020_SEM_2.getShortRepresentation();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(ay2020Sem2ShortRepresentation, \"AY2020S2\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // not equals"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertNotEquals(AY2020_SEM_1.getShortRepresentation(), \"invalid string\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertNotEquals(AY2020_SEM_1.getShortRepresentation(), \"invalid string\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void getNextSemester() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Semester nextSemester \u003d new SemesterBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .withAcademicYear(2021)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .withSemesterNumber(1)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // should proceed to current year sem 2"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(Semester.getNextSemester(AY2020_SEM_1), AY2020_SEM_2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // should wrap over to next year sem 1"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(Semester.getNextSemester(AY2020_SEM_2), nextSemester);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // not equals"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertNotEquals(Semester.getNextSemester(AY2020_SEM_1), nextSemester);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertNotEquals(Semester.getNextSemester(AY2020_SEM_1), AY2020_SEM_1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 70
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/student/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/student/FacultyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class FacultyTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Faculty(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void constructor_invalidFaculty_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String invalidFaculty \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Faculty(invalidFaculty));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void isValidFaculty() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null faculty"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Faculty.isValidFaculty(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid faculties"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\"dnfj\")); // invalid faculty abbreviation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // valid faculties"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"FASS\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"DEN\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"USP\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "mkeoliya": 39
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withEmail(\"alice@email.com\").withFaculty(\"FASS\").withStudentId(\"E0111111\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "mkeoliya": 11
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/student/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/student/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/student/StudentIdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class StudentIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StudentId(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void constructor_invalidStudentId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String invalidStudentId \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new StudentId((invalidStudentId)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void isValidStudentId() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null student ID"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StudentId.isValidStudentId((null)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // invalid student IDs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(StudentId.isValidStudentId((\"\"))); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(StudentId.isValidStudentId((\" \"))); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(StudentId.isValidStudentId((\"e\"))); // missing \"0\" and 6 digits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(StudentId.isValidStudentId((\"E0\"))); // missing 6 digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(StudentId.isValidStudentId((\"E012345\"))); // only 5 digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // valid student IDs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(StudentId.isValidStudentId(\"E0407889\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(StudentId.isValidStudentId(\"E0123456\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(StudentId.isValidStudentId(\"E0123457\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "mkeoliya": 39
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/student/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_STUDENT_ID_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different phone and email, same student ID -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different name, same student ID -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same name, same phone, different attributes (including student id) -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withFaculty(VALID_FACULTY_BOB).withStudentId(VALID_STUDENT_ID_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same name, same email, different attributes (including student id) -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withFaculty(VALID_FACULTY_BOB).withStudentId(VALID_STUDENT_ID_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same name, same phone, same email, different attributes (including student id) -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withStudentId(VALID_STUDENT_ID_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different faculty -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different student ID -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withStudentId(VALID_STUDENT_ID_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 104
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/student/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withFaculty(VALID_FACULTY_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((UniqueStudentList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudents(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 170
    }
  },
  {
    "path": "src/test/java/seedu/resireg/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/storage/JsonAdaptedCommandWordAliasTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.storage.JsonAdaptedCommandWordAlias.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalCommandWordAliases.ROOMS_R;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.Alias;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class JsonAdaptedCommandWordAliasTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_COMMAND_WORD \u003d \"3482ndn\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_ALIAS \u003d AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String VALID_COMMAND_WORD \u003d ROOMS_R.getCommandWord().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String VALID_ALIAS \u003d ROOMS_R.getAlias().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_validCommandWordAliasDetails_returnsCommandWordAlias() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedCommandWordAlias commandWordAlias \u003d new JsonAdaptedCommandWordAlias(ROOMS_R);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(ROOMS_R, commandWordAlias.toModelType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_invalidCommandWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedCommandWordAlias commandWordAlias \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new JsonAdaptedCommandWordAlias(INVALID_COMMAND_WORD, VALID_ALIAS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d CommandWord.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, commandWordAlias::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_nullCommandWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedCommandWordAlias commandWordAlias \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new JsonAdaptedCommandWordAlias(null, VALID_ALIAS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CommandWord.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, commandWordAlias::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_invalidAlias_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedCommandWordAlias commandWordAlias \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new JsonAdaptedCommandWordAlias(VALID_COMMAND_WORD, INVALID_ALIAS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d Alias.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, commandWordAlias::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_nullAlias_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedCommandWordAlias commandWordAlias \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            new JsonAdaptedCommandWordAlias(VALID_COMMAND_WORD, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Alias.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, commandWordAlias::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 60
    }
  },
  {
    "path": "src/test/java/seedu/resireg/storage/JsonAdaptedRoomTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.storage.JsonAdaptedRoom.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.testutil.TypicalRooms.ROOM_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "class JsonAdaptedRoomTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static final String INVALID_FLOOR \u003d \"08\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static final String INVALID_NUMBER \u003d \"0110\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static final String INVALID_ROOMTYPE \u003d \"??\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#toilet\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static final String VALID_FLOOR \u003d ROOM_ONE.getFloor().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static final String VALID_NUMBER \u003d ROOM_ONE.getRoomNumber().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static final String VALID_ROOMTYPE \u003d ROOM_ONE.getRoomType().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d ROOM_ONE.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    void toModelType_validRoomDetails_returnsRoom() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(ROOM_ONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertEquals(ROOM_ONE, room.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void toModelType_invalidFloor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        JsonAdaptedRoom room \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                new JsonAdaptedRoom(INVALID_FLOOR, VALID_NUMBER, VALID_ROOMTYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String expectedMessage \u003d Floor.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void toModelType_nullFloor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        JsonAdaptedRoom room \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                new JsonAdaptedRoom(null, VALID_NUMBER, VALID_ROOMTYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Floor.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void toModelType_invalidNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        JsonAdaptedRoom room \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                new JsonAdaptedRoom(VALID_FLOOR, INVALID_NUMBER, VALID_ROOMTYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String expectedMessage \u003d RoomNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void toModelType_nullNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        JsonAdaptedRoom room \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                new JsonAdaptedRoom(VALID_FLOOR, null, VALID_ROOMTYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RoomNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void toModelType_invalidRoomType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        JsonAdaptedRoom room \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                new JsonAdaptedRoom(VALID_FLOOR, VALID_NUMBER, INVALID_ROOMTYPE, VALID_TAGS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String expectedMessage \u003d RoomType.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void toModelType_nullRoomType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        JsonAdaptedRoom room \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                new JsonAdaptedRoom(VALID_FLOOR, VALID_NUMBER, null, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RoomType.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        JsonAdaptedRoom room \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                new JsonAdaptedRoom(VALID_FLOOR, VALID_NUMBER, VALID_ROOMTYPE, invalidTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertThrows(IllegalValueException.class, room::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 86,
      "Lysire": 8
    }
  },
  {
    "path": "src/test/java/seedu/resireg/storage/JsonAdaptedSemesterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalSemesters.AY2020_SEM_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.academicyear.AcademicYear;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.semesternumber.SemesterNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "class JsonAdaptedSemesterTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final int INVALID_YEAR \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final int INVALID_SEMESTER_NUMBER \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final int VALID_ACADEMIC_YEAR \u003d 2020;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final int VALID_SEMESTER_NUMBER \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final List\u003cJsonAdaptedAllocation\u003e VALID_ALLOCATIONS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final Map\u003cString, Integer\u003e VALID_ROOM_FEES \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void toModelType_validSemesterDetails_returnsSemester() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonAdaptedSemester semester \u003d new JsonAdaptedSemester(AY2020_SEM_1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(AY2020_SEM_1, semester.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void toModelType_invalidAcademicYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonAdaptedSemester semester \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            new JsonAdaptedSemester(INVALID_YEAR, VALID_SEMESTER_NUMBER, VALID_ALLOCATIONS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                VALID_ROOM_FEES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String expectedMessage \u003d AcademicYear.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, semester::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void toModelType_invalidSemesterNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonAdaptedSemester semester \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            new JsonAdaptedSemester(VALID_ACADEMIC_YEAR, INVALID_SEMESTER_NUMBER, VALID_ALLOCATIONS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                VALID_ROOM_FEES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String expectedMessage \u003d SemesterNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, semester::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 50
    }
  },
  {
    "path": "src/test/java/seedu/resireg/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_FACULTY \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_STUDENT_ID \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String VALID_FACULTY \u003d BENSON.getFaculty().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final String VALID_STUDENT_ID \u003d BENSON.getStudentId().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_FACULTY,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        VALID_STUDENT_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(null, VALID_PHONE, VALID_EMAIL, VALID_FACULTY,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                VALID_STUDENT_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_FACULTY,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        VALID_STUDENT_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_FACULTY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                VALID_STUDENT_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_FACULTY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        VALID_STUDENT_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, null, VALID_FACULTY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                VALID_STUDENT_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_invalidFaculty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_FACULTY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        VALID_STUDENT_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d Faculty.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_nullFaculty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                VALID_STUDENT_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Faculty.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_invalidStudentId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_FACULTY,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        INVALID_STUDENT_ID, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d StudentId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_nullStudentId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_FACULTY,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                null, VALID_TAGS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StudentId.class.getSimpleName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_FACULTY, VALID_STUDENT_ID,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                        invalidTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 11,
      "mkeoliya": 128
    }
  },
  {
    "path": "src/test/java/seedu/resireg/storage/JsonResiRegStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class JsonResiRegStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonResiRegStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void readResiReg_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readResiReg(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyResiReg\u003e readResiReg(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new JsonResiRegStorage(Paths.get(filePath)).readResiReg(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertFalse(readResiReg(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readResiReg(\"notJsonFormatResiReg.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void readResiReg_invalidStudentResiReg_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readResiReg(\"invalidStudentResiReg.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void readResiReg_invalidAndValidStudentResiReg_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readResiReg(\"invalidAndValidStudentResiReg.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void readAndSaveResiReg_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempResiReg.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg original \u003d getTypicalResiReg();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonResiRegStorage jsonResiRegStorage \u003d new JsonResiRegStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        jsonResiRegStorage.saveResiReg(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ReadOnlyResiReg readBack \u003d jsonResiRegStorage.readResiReg(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(original, new ResiReg(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        jsonResiRegStorage.saveResiReg(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        readBack \u003d jsonResiRegStorage.readResiReg(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(original, new ResiReg(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        jsonResiRegStorage.saveResiReg(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        readBack \u003d jsonResiRegStorage.readResiReg().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(original, new ResiReg(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void saveResiReg_nullResiReg_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveResiReg(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Saves {@code resiReg} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private void saveResiReg(ReadOnlyResiReg resiReg, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            new JsonResiRegStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                .saveResiReg(resiReg, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void saveResiReg_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveResiReg(new ResiReg(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 110
    }
  },
  {
    "path": "src/test/java/seedu/resireg/storage/JsonSerializableResiRegTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class JsonSerializableResiRegTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableResiRegTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsResiReg.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentResiReg.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentResiReg.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonSerializableResiReg dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                JsonSerializableResiReg.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg resiRegFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg typicalStudentsResiReg \u003d TypicalStudents.getTypicalResiReg();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(resiRegFromFile, typicalStudentsResiReg);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonSerializableResiReg dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                JsonSerializableResiReg.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonSerializableResiReg dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                JsonSerializableResiReg.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableResiReg.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 16,
      "-": 23,
      "mkeoliya": 8
    }
  },
  {
    "path": "src/test/java/seedu/resireg/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        userPrefs.setResiRegFilePath(Paths.get(\"resireg.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 111,
      "mkeoliya": 5
    }
  },
  {
    "path": "src/test/java/seedu/resireg/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static seedu.resireg.testutil.TypicalStudents.getTypicalResiReg;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ReadOnlyResiReg;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        JsonResiRegStorage resiRegStorage \u003d new JsonResiRegStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        storageManager \u003d new StorageManager(resiRegStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void resiRegReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "         * {@link JsonResiRegStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonResiRegStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg original \u003d getTypicalResiReg();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        storageManager.saveResiReg(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ReadOnlyResiReg retrieved \u003d storageManager.readResiReg().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(original, new ResiReg(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void getResiRegFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertNotNull(storageManager.getResiRegFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 14,
      "-": 51,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/AllocationBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * A utility class to help with building Allocation objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class AllocationBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String DEFAULT_FLOOR \u003d \"8\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String DEFAULT_ROOM_NUMBER \u003d \"105\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final String DEFAULT_STUDENT_ID \u003d \"E0407889\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Floor floor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private RoomNumber roomNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private StudentId studentId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates a {@code AllocationBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public AllocationBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        floor \u003d new Floor(DEFAULT_FLOOR);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        roomNumber \u003d new RoomNumber(DEFAULT_ROOM_NUMBER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        studentId \u003d new StudentId(DEFAULT_STUDENT_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Initializes the AllocationBuilder with the data of {@code allocationToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public AllocationBuilder(Allocation allocationToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        floor \u003d allocationToCopy.getFloor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        roomNumber \u003d allocationToCopy.getRoomNumber();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        studentId \u003d allocationToCopy.getStudentId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Sets the {@code Floor} of the {@code Allocation} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public AllocationBuilder withFloor(String floor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.floor \u003d new Floor(floor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Sets the {@code RoomNumber} of the {@code Allocation} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public AllocationBuilder withRoomNumber(String roomNumber) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.roomNumber \u003d new RoomNumber(roomNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Sets the {@code StudentId} of the {@code Allocation} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public AllocationBuilder withStudentId(String studentId) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.studentId \u003d new StudentId(studentId);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns a new {@code Allocation} created."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public Allocation build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Allocation(floor, roomNumber, studentId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 70
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/CommandWordAliasBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.Alias;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class CommandWordAliasBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String DEFAULT_COMMAND_WORD \u003d \"rooms\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String DEFAULT_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private CommandWord commandWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Alias alias;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Creates a {@code RoomBuilder} with the default details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandWordAliasBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandWord \u003d new CommandWord(DEFAULT_COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        alias \u003d new Alias(DEFAULT_ALIAS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Initializes the RoomBuilder with the data of {@code roomToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandWordAliasBuilder(CommandWordAlias commandWordAliasToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandWord \u003d commandWordAliasToCopy.getCommandWord();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        alias \u003d commandWordAliasToCopy.getAlias();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code Floor} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandWordAliasBuilder withCommandWord(String commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.commandWord \u003d new CommandWord(commandWord);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code RoomType} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandWordAliasBuilder withAlias(String alias) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.alias \u003d new Alias(alias);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public CommandWordAlias build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new CommandWordAlias(commandWord, alias);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 56
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setPhone(student.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setFaculty(student.getFaculty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setStudentId(student.getStudentId());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code Faculty} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptorBuilder withFaculty(String faculty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setFaculty(new Faculty(faculty));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code StudentId} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptorBuilder withStudentId(String studentId) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setStudentId(new StudentId(studentId));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 97
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/ResiRegBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * A utility class to help with building ResiReg objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * {@code ResiReg rr \u003d new ResiRegBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class ResiRegBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private ResiReg resiReg;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ResiRegBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiReg \u003d new ResiReg();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ResiRegBuilder(ResiReg resiReg) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.resiReg \u003d resiReg;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Adds a new {@code Student} to the {@code ResiReg} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ResiRegBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        resiReg.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public ResiReg build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return resiReg;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 34
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/RoomBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class RoomBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String DEFAULT_FLOOR \u003d \"8\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String DEFAULT_ROOM_NUMBER \u003d \"105\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final String DEFAULT_ROOM_TYPE \u003d \"CN\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private Floor floor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private RoomNumber roomNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private RoomType roomType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Student student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Creates a {@code RoomBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        floor \u003d new Floor(DEFAULT_FLOOR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        roomNumber \u003d new RoomNumber(DEFAULT_ROOM_NUMBER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        roomType \u003d new RoomType(DEFAULT_ROOM_TYPE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Initializes the RoomBuilder with the data of {@code roomToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomBuilder(Room roomToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        floor \u003d roomToCopy.getFloor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        roomNumber \u003d roomToCopy.getRoomNumber();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        roomType \u003d roomToCopy.getRoomType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(roomToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Sets the {@code Floor} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public RoomBuilder withFloor(String floor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.floor \u003d new Floor(floor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Room} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Sets the {@code RoomType} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomBuilder withRoomType(String type) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.roomType \u003d new RoomType(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     * Sets the {@code RoomNumber} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public RoomBuilder withRoomNumber(String number) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        this.roomNumber \u003d new RoomNumber(number);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Sets the {@code RoomNumber} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public RoomBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public Room build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return new Room(floor, roomNumber, roomType, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 1,
      "JingYenLoh": 10,
      "Lysire": 82
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/RoomFilterBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.logic.commands.ListRoomCommand.RoomFilter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.Floor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.RoomNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * A utility class to help with building RoomFilter objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class RoomFilterBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private RoomFilter filter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter \u003d new RoomFilter();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds a {@code RoomNumber} to the {@code RoomFilter} that we are building."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder addRoomNumber(RoomNumber numbers) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return addRoomNumbers(Arrays.asList(numbers));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds a {@code RoomNumber} to the {@code RoomFilter} that we are building."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder addRoomNumber(String roomNumber) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return addRoomNumber(new RoomNumber(roomNumber));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds {@code RoomNumber}s to the {@code RoomFilter} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder addRoomNumbers(Collection\u003cRoomNumber\u003e numbers) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.addRoomNumbers(numbers);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds a {@code RoomType} to the {@code RoomFilter} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder addRoomType(RoomType type) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return addRoomTypes(Arrays.asList(type));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds a {@code RoomType} to the {@code RoomFilter} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder addRoomType(String roomType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return addRoomType(new RoomType(roomType));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds {@code RoomType}s to the {@code RoomFilter} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder addRoomTypes(Collection\u003cRoomType\u003e types) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.addRoomTypes(types);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds a {@code Floor} to the {@code RoomFilter} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder addFloor(Floor floor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return addFloors(Arrays.asList(floor));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds a {@code Floor} to the {@code RoomFilter} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder addFloor(String floor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return addFloor(new Floor(floor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds {@code Floors}s to the {@code RoomFilter} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder addFloors(Collection\u003cFloor\u003e floors) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.addFloors(floors);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Makes the {@code RoomFilter} we are building show only vacant rooms."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder onlyVacant() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.onlyVacant();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Makes the {@code RoomFilter} we are building show only allocated rooms."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilterBuilder onlyAllocated() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        filter.onlyAllocated();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public RoomFilter build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return filter;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 106
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/SemesterBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.room.roomtype.RoomType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.academicyear.AcademicYear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.roomrate.RoomRate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.semesternumber.SemesterNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class SemesterBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final AcademicYear DEFAULT_ACADEMIC_YEAR \u003d new AcademicYear(2020);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final SemesterNumber DEFAULT_SEMESTER_NUMBER \u003d new SemesterNumber(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private AcademicYear academicYear;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private SemesterNumber semesterNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private List\u003cAllocation\u003e allocations;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Map\u003cRoomType, RoomRate\u003e roomFees;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates a {@code SemesterBuilder} with the default details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public SemesterBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        academicYear \u003d DEFAULT_ACADEMIC_YEAR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        semesterNumber \u003d DEFAULT_SEMESTER_NUMBER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        allocations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        roomFees \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Initializes the SemesterBuilder with the data of {@code semesterToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public SemesterBuilder(Semester semesterToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        academicYear \u003d new AcademicYear(semesterToCopy.getAcademicYear().value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        semesterNumber \u003d semesterToCopy.getSemesterNumber();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        allocations \u003d semesterToCopy.getAllocations();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        roomFees \u003d semesterToCopy.getRoomFees();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Sets the {@code academicYear} of the {@code Semester} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public SemesterBuilder withAcademicYear(int academicYear) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.academicYear \u003d new AcademicYear(academicYear);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Sets the {@code semesterNumber} of the {@code Semester} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public SemesterBuilder withSemesterNumber(int semesterNumber) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.semesterNumber \u003d new SemesterNumber(semesterNumber);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Sets the {@code allocations} of the {@code Semester} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public SemesterBuilder withAllocations(List\u003cAllocation\u003e allocations) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.allocations \u003d allocations;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Sets the {@code roomFees} of the {@code Semester} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public SemesterBuilder withRoomFees(HashMap\u003cRoomType, RoomRate\u003e roomFees) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.roomFees \u003d roomFees;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns a new {@code Semester} created."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Semester build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new Semester(academicYear, semesterNumber, allocations, roomFees);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 83
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/StudentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.StudentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.faculty.Faculty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String DEFAULT_FACULTY \u003d \"FASS\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String DEFAULT_STUDENT_ID \u003d \"E0407889\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Faculty faculty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private StudentId studentId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Room room;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Creates a {@code StudentBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        faculty \u003d new Faculty(DEFAULT_FACULTY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        studentId \u003d new StudentId(DEFAULT_STUDENT_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        room \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        phone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        faculty \u003d studentToCopy.getFaculty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        studentId \u003d studentToCopy.getStudentId();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code Faculty} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentBuilder withFaculty(String faculty) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.faculty \u003d new Faculty(faculty);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code StudentId} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentBuilder withStudentId(String studentId) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.studentId \u003d new StudentId(studentId);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Sets the {@code Room} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public StudentBuilder withRoom(Room room) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns a new {@code Student} created."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Student(name, phone, email, faculty, studentId, tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 15,
      "mkeoliya": 108
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/StudentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        sb.append(PREFIX_PHONE + student.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        sb.append(PREFIX_FACULTY + student.getFaculty().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        sb.append(PREFIX_STUDENT_ID + student.getStudentId().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.getFaculty().ifPresent(faculty -\u003e sb.append(PREFIX_FACULTY).append(faculty.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        descriptor.getStudentId().ifPresent(studentId -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            sb.append(PREFIX_STUDENT_ID).append(studentId.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 66
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "mkeoliya": 11
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/TypicalAllocations.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_STUDENT_ID_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_STUDENT_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.allocation.Allocation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * A utility class containing a list of {@code Allocation} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Assumes typical students and rooms."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class TypicalAllocations {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Allocation ALLOCATION_ONE \u003d new AllocationBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFloor(TypicalRooms.ROOM_ONE.getFloor().value)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withRoomNumber(TypicalRooms.ROOM_ONE.getRoomNumber().value)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(TypicalStudents.ALICE.getStudentId().value)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Allocation ALLOCATION_TWO \u003d new AllocationBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFloor(TypicalRooms.ROOM_TWO.getFloor().value)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withRoomNumber(TypicalRooms.ROOM_TWO.getRoomNumber().value)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(TypicalStudents.BENSON.getStudentId().value)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Allocation ALLOCATION_THREE \u003d new AllocationBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFloor(TypicalRooms.ROOM_THREE.getFloor().value)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withRoomNumber(TypicalRooms.ROOM_THREE.getRoomNumber().value)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(TypicalStudents.CARL.getStudentId().value)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Allocation ALLOCATION_A \u003d new AllocationBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFloor(VALID_FLOOR_A)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withRoomNumber(VALID_ROOM_NUMBER_A)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(VALID_STUDENT_ID_AMY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Allocation ALLOCATION_B \u003d new AllocationBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFloor(VALID_FLOOR_B)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withRoomNumber(VALID_ROOM_NUMBER_B)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(VALID_STUDENT_ID_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private TypicalAllocations() {} // prevents instantiation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns an {@code ResiReg} with all the typical allocations."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static ResiReg getTypicalResiReg() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ResiReg ab \u003d new ResiReg();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Student student : TypicalStudents.getTypicalStudents()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Room room : TypicalRooms.getTypicalRooms()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            ab.addRoom(room);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Allocation allocation: getTypicalAllocations()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            ab.addAllocation(allocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static List\u003cAllocation\u003e getTypicalAllocations() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALLOCATION_ONE, ALLOCATION_TWO, ALLOCATION_THREE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 76
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/TypicalCommandWordAliases.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ALIAS_ROOMS_RO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ALIAS_STUDENTS_ST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_COMMAND_ROOMS_RO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_COMMAND_STUDENTS_ST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class TypicalCommandWordAliases {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final CommandWordAlias ROOMS_R \u003d new CommandWordAliasBuilder().withCommandWord(\"rooms\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withAlias(\"r\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final CommandWordAlias STUDENTS_STU \u003d new CommandWordAliasBuilder().withCommandWord(\"students\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withAlias(\"stu\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final CommandWordAlias ALLOCATE_AL \u003d new CommandWordAliasBuilder().withCommandWord(\"allocate\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withAlias(\"al\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final CommandWordAlias FIND_FI \u003d new CommandWordAliasBuilder().withCommandWord(\"find\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withAlias(\"fi\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final CommandWordAlias REALLOCATE_REL \u003d new CommandWordAliasBuilder().withCommandWord(\"reallocate\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withAlias(\"rel\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final CommandWordAlias EDIT_E \u003d new CommandWordAliasBuilder().withCommandWord(\"edit\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withAlias(\"e\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final CommandWordAlias DELETE_D \u003d new CommandWordAliasBuilder().withCommandWord(\"delete\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withAlias(\"d\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final CommandWordAlias ROOMS_RO \u003d new CommandWordAliasBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withCommandWord(VALID_COMMAND_ROOMS_RO)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withAlias(VALID_ALIAS_ROOMS_RO).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final CommandWordAlias STUDENTS_ST \u003d new CommandWordAliasBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withCommandWord(VALID_COMMAND_STUDENTS_ST)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        .withAlias(VALID_ALIAS_STUDENTS_ST).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private TypicalCommandWordAliases() {} // prevents instantiation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns an {@code UserPrefs} with all the typical command word aliases."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static ReadOnlyUserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (CommandWordAlias commandWordAlias : getTypicalCommandWordAliases()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            userPrefs.addAlias(commandWordAlias);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static List\u003cCommandWordAlias\u003e getTypicalCommandWordAliases() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ROOMS_R, STUDENTS_STU, ALLOCATE_AL, FIND_FI, REALLOCATE_REL));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 62
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Index INDEX_FOURTH_PERSON \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Index INDEX_FIFTH_PERSON \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Index INDEX_FIRST_ROOM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Index INDEX_SECOND_ROOM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Index INDEX_THIRD_ROOM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Index INDEX_FOURTH_ROOM \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Index INDEX_FIFTH_ROOM \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 4,
      "Lysire": 4,
      "-": 10,
      "mkeoliya": 2
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/TypicalRooms.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lysire"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FLOOR_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_NUMBER_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_ROOM_TYPE_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_DAMAGED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_RENOVATED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lysire"
        },
        "content": "import seedu.resireg.model.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lysire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lysire"
        },
        "content": " * A utility class containing a list of {@code Room} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lysire"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lysire"
        },
        "content": "public class TypicalRooms {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Room ROOM_ONE \u003d new RoomBuilder().withFloor(\"19\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomNumber(\"112\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomType(\"CA\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withTags(\"repaired\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Room ROOM_TWO \u003d new RoomBuilder().withFloor(\"4\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomNumber(\"102\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomType(\"CN\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withTags(\"deserted\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Room ROOM_THREE \u003d new RoomBuilder().withFloor(\"5\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomNumber(\"107\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomType(\"NN\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withTags(\"stuffy\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Room ROOM_FOUR \u003d new RoomBuilder().withFloor(\"8\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomNumber(\"107\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomType(\"NA\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withTags(\"musical\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Room ROOM_FIVE \u003d new RoomBuilder().withFloor(\"9\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomNumber(\"103\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomType(\"CN\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withTags(\"airy\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    // Manually added - Room\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Room ROOM_A \u003d new RoomBuilder().withFloor(VALID_FLOOR_A)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomNumber(VALID_ROOM_NUMBER_A).withRoomType(VALID_ROOM_TYPE_A).withTags(VALID_TAG_RENOVATED).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static final Room ROOM_B \u003d new RoomBuilder().withFloor(VALID_FLOOR_B)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lysire"
        },
        "content": "            .withRoomNumber(VALID_ROOM_NUMBER_B).withRoomType(VALID_ROOM_TYPE_B).withTags(VALID_TAG_DAMAGED).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    private TypicalRooms() {} // prevents instantiation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns an {@code ResiReg} with all the typical rooms."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lysire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static ResiReg getTypicalResiReg() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg rr \u003d new ResiReg();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        for (Room room : getTypicalRooms()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            rr.addRoom(room);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return rr;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    public static List\u003cRoom\u003e getTypicalRooms() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lysire"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ROOM_ONE, ROOM_TWO, ROOM_THREE, ROOM_FOUR, ROOM_FIVE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lysire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lysire"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lysire"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 6,
      "Lysire": 61
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/TypicalSemesters.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.semester.Semester;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * A utility class containing a list of {@code Semester} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class TypicalSemesters {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final Semester AY2020_SEM_1 \u003d new SemesterBuilder()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .withAcademicYear(2020)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .withSemesterNumber(1).build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final Semester AY2020_SEM_2 \u003d new SemesterBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .withAcademicYear(2020)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            .withSemesterNumber(2).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private TypicalSemesters() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 20
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/TypicalStudents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_STUDENT_ID_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_STUDENT_ID_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import seedu.resireg.model.ResiReg;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFaculty(\"FASS\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(\"E0111110\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFaculty(\"FASS\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(\"E0222228\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withEmail(\"benson@example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withRoom(new RoomBuilder().withFloor(\"1\").withRoomNumber(\"101\").build()).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withEmail(\"carl@example.com\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFaculty(\"FASS\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(\"E0111112\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFaculty(\"FASS\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(\"E0111113\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withEmail(\"daniel@example.com\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withEmail(\"elle@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFaculty(\"FASS\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(\"E0111114\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withEmail(\"fiona@example.com\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFaculty(\"FASS\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(\"E0111115\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withEmail(\"george@example.com\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withFaculty(\"FASS\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            .withStudentId(\"E0111101\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withEmail(\"stefan@example.com\").withFaculty(\"FASS\").withStudentId(\"E0111116\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withEmail(\"hans@example.com\").withFaculty(\"FASS\").withStudentId(\"E0111117\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withFaculty(VALID_FACULTY_AMY).withStudentId(VALID_STUDENT_ID_AMY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withFaculty(VALID_FACULTY_BOB).withStudentId(VALID_STUDENT_ID_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns an {@code ResiReg} with all the typical students."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static ResiReg getTypicalResiReg() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ResiReg ab \u003d new ResiReg();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 30,
      "JingYenLoh": 4,
      "mkeoliya": 66
    }
  },
  {
    "path": "src/test/java/seedu/resireg/testutil/UserPrefsBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.UserPrefs;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.model.alias.CommandWordAlias;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A utility class to help with building UserPrefs objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " *     {@code UserPrefs up \u003d new UserPrefsBuilder().withCommandWordAlias([object]).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class UserPrefsBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private UserPrefs userPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public UserPrefsBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public UserPrefsBuilder(UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Adds a new {@code CommandWordAlias} to the {@code UserPrefs} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public UserPrefsBuilder withCommandWordAlias(CommandWordAlias commandWordAlias) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userPrefs.addAlias(commandWordAlias);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public UserPrefs build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 34
    }
  },
  {
    "path": "src/test/java/seedu/resireg/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/test/java/seedu/resireg/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package seedu.resireg.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static seedu.resireg.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import seedu.resireg.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "mkeoliya": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003c?import seedu.resireg.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "mkeoliya": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "\u003cfx:root type\u003d\"seedu.resireg.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "mkeoliya": 1
    }
  }
]
